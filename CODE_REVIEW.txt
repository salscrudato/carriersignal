CODE REVIEW CONSOLIDATION
Generated: 2025-10-29T12:33:47.892Z
Repository: /Users/salscrudato/Projects/carriersignal
================================================================================


================================================================================
FILE: .lighthouserc.json
================================================================================

{
  "ci": {
    "collect": {
      "url": [
        "http://localhost:5173"
      ],
      "numberOfRuns": 3,
      "settings": {
        "configPath": "./lighthouse-config.js"
      }
    },
    "upload": {
      "target": "temporary-public-storage"
    },
    "assert": {
      "preset": "lighthouse:recommended",
      "assertions": {
        "categories:performance": ["error", { "minScore": 0.9 }],
        "categories:accessibility": ["error", { "minScore": 0.9 }],
        "categories:best-practices": ["error", { "minScore": 0.9 }],
        "categories:seo": ["error", { "minScore": 0.9 }],
        "first-contentful-paint": ["error", { "maxNumericValue": 2500 }],
        "largest-contentful-paint": ["error", { "maxNumericValue": 2500 }],
        "cumulative-layout-shift": ["error", { "maxNumericValue": 0.1 }],
        "total-blocking-time": ["error", { "maxNumericValue": 300 }]
      }
    }
  }
}




================================================================================
FILE: consolidate-code.js
================================================================================

#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const ROOT_DIR = process.cwd();
const OUTPUT_FILE = path.join(ROOT_DIR, 'CODE_REVIEW.txt');
const EXCLUDE_DIRS = [
  'node_modules',
  'dist',
  '.git',
  '.next',
  'build',
  'coverage',
  '.vscode',
  '.idea',
];

const INCLUDE_EXTENSIONS = [
  '.ts',
  '.tsx',
  '.js',
  '.jsx',
  '.css',
  '.scss',
  '.json',
  '.html',
  '.md',
  '.yml',
  '.yaml',
];

// Specific files to include
const INCLUDE_FILES = [
  'package.json',
  'tsconfig.json',
  'vite.config.ts',
  'firebase.json',
  'firestore.rules',
  'eslint.config.js',
];

let output = '';
let fileCount = 0;

function shouldIncludeFile(filePath) {
  const ext = path.extname(filePath);
  const basename = path.basename(filePath);
  
  return (
    INCLUDE_EXTENSIONS.includes(ext) ||
    INCLUDE_FILES.includes(basename)
  );
}

function shouldExcludeDir(dirPath) {
  const parts = dirPath.split(path.sep);
  return parts.some(part => EXCLUDE_DIRS.includes(part));
}

function walkDir(dir, relativePath = '') {
  try {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    entries.forEach(entry => {
      const fullPath = path.join(dir, entry.name);
      const relPath = path.join(relativePath, entry.name);
      
      if (shouldExcludeDir(fullPath)) {
        return;
      }
      
      if (entry.isDirectory()) {
        walkDir(fullPath, relPath);
      } else if (shouldIncludeFile(fullPath)) {
        try {
          const content = fs.readFileSync(fullPath, 'utf-8');
          output += `\n${'='.repeat(80)}\n`;
          output += `FILE: ${relPath}\n`;
          output += `${'='.repeat(80)}\n\n`;
          output += content;
          output += '\n\n';
          fileCount++;
        } catch (err) {
          console.error(`Error reading file ${fullPath}:`, err.message);
        }
      }
    });
  } catch (err) {
    console.error(`Error reading directory ${dir}:`, err.message);
  }
}

// Start consolidation
console.log('Starting code consolidation...');
console.log(`Root directory: ${ROOT_DIR}`);

output += `CODE REVIEW CONSOLIDATION\n`;
output += `Generated: ${new Date().toISOString()}\n`;
output += `Repository: ${ROOT_DIR}\n`;
output += `${'='.repeat(80)}\n\n`;

walkDir(ROOT_DIR);

// Write output file
try {
  fs.writeFileSync(OUTPUT_FILE, output, 'utf-8');
  console.log(`✓ Successfully created ${OUTPUT_FILE}`);
  console.log(`✓ Total files included: ${fileCount}`);
  console.log(`✓ Output file size: ${(fs.statSync(OUTPUT_FILE).size / 1024 / 1024).toFixed(2)} MB`);
} catch (err) {
  console.error(`Error writing output file: ${err.message}`);
  process.exit(1);
}




================================================================================
FILE: eslint.config.js
================================================================================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])



================================================================================
FILE: firebase.json
================================================================================

{
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        ".git",
        "firebase-debug.log",
        "firebase-debug.*.log",
        "*.local"
      ],
      "predeploy": [
        "npm --prefix \"$RESOURCE_DIR\" run lint",
        "npm --prefix \"$RESOURCE_DIR\" run build"
      ]
    }
  ],
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "/askBrief",
        "function": "askBrief"
      }
    ]
  }
}




================================================================================
FILE: firestore.indexes.json
================================================================================

{
  "indexes": [],
  "fieldOverrides": []
}




================================================================================
FILE: firestore.rules
================================================================================

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Articles collection - public read, Cloud Functions write only
    match /articles/{articleId} {
      allow read: if true;
      allow write: if false; // Only Cloud Functions can write

      // Article embeddings subcollection
      match /embeddings/{embeddingId} {
        allow read: if true;
        allow write: if false;
      }
    }

    // Article embeddings collection - public read, Cloud Functions write only
    match /article_embeddings/{embeddingId} {
      allow read: if true;
      allow write: if false; // Only Cloud Functions can write
    }

    // Feed sources collection - public read, Cloud Functions write only
    match /feed_sources/{feedId} {
      allow read: if true;
      allow write: if false; // Only Cloud Functions can write
    }

    // Rate limits collection - Cloud Functions write only, no client read
    match /rate_limits/{rateLimitId} {
      allow read: if false; // Clients cannot read rate limits
      allow write: if false; // Only Cloud Functions can write
    }

    // Catch-all: deny all other access
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}




================================================================================
FILE: functions/lib/agents.d.ts
================================================================================

import OpenAI from "openai";
import { z } from "zod";
export type Article = {
    url: string;
    source: string;
    publishedAt?: string;
    title?: string;
    html?: string;
    text?: string;
    author?: string;
    mainImage?: string;
};
declare const schema: z.ZodObject<{
    title: z.ZodString;
    url: z.ZodString;
    source: z.ZodString;
    bullets5: z.ZodArray<z.ZodString>;
    whyItMatters: z.ZodObject<{
        underwriting: z.ZodString;
        claims: z.ZodString;
        brokerage: z.ZodString;
        actuarial: z.ZodString;
    }, z.core.$strip>;
    tags: z.ZodObject<{
        lob: z.ZodArray<z.ZodString>;
        perils: z.ZodArray<z.ZodString>;
        regions: z.ZodArray<z.ZodString>;
        companies: z.ZodArray<z.ZodString>;
        trends: z.ZodArray<z.ZodString>;
        regulations: z.ZodArray<z.ZodString>;
    }, z.core.$strip>;
    riskPulse: z.ZodEnum<{
        LOW: "LOW";
        MEDIUM: "MEDIUM";
        HIGH: "HIGH";
    }>;
    sentiment: z.ZodEnum<{
        POSITIVE: "POSITIVE";
        NEGATIVE: "NEGATIVE";
        NEUTRAL: "NEUTRAL";
    }>;
    confidence: z.ZodNumber;
    citations: z.ZodArray<z.ZodString>;
    impactScore: z.ZodNumber;
    impactBreakdown: z.ZodObject<{
        market: z.ZodNumber;
        regulatory: z.ZodNumber;
        catastrophe: z.ZodNumber;
        technology: z.ZodNumber;
    }, z.core.$strip>;
    confidenceRationale: z.ZodString;
    leadQuote: z.ZodString;
    disclosure: z.ZodString;
}, z.core.$strip>;
export declare function hashUrl(u: string): string;
export declare function extractArticle(url: string): Promise<{
    url: string;
    title: string;
    html: string;
    text: string;
    mainImage: string | undefined;
    author: string | undefined;
}>;
export declare function summarizeAndTag(client: OpenAI, art: Article & {
    text?: string;
    mainImage?: string;
    author?: string;
}): Promise<{
    title: string;
    url: string;
    source: string;
    bullets5: string[];
    whyItMatters: {
        underwriting: string;
        claims: string;
        brokerage: string;
        actuarial: string;
    };
    tags: {
        lob: string[];
        perils: string[];
        regions: string[];
        companies: string[];
        trends: string[];
        regulations: string[];
    };
    riskPulse: "LOW" | "MEDIUM" | "HIGH";
    sentiment: "POSITIVE" | "NEGATIVE" | "NEUTRAL";
    confidence: number;
    citations: string[];
    impactScore: number;
    impactBreakdown: {
        market: number;
        regulatory: number;
        catastrophe: number;
        technology: number;
    };
    confidenceRationale: string;
    leadQuote: string;
    disclosure: string;
}>;
/**
 * Post-parse validation for article data
 * - Deduplicates citations (case-insensitive)
 * - Validates all citations are proper URLs
 * - Ensures bullets only use [1],[2] markers if citations exist
 * - Removes citation markers from bullets if no valid citations
 * - Ensures impactScore and impactBreakdown are coherent
 * - Validates all required fields are present and non-empty
 */
export declare function validateAndCleanArticle(article: z.infer<typeof schema>): z.infer<typeof schema>;
/**
 * RAG Quality Check: Validates article quality for retrieval-augmented generation
 * Ensures articles are suitable for use in Ask-the-Brief context
 */
export declare function checkRAGQuality(article: z.infer<typeof schema>): {
    isQuality: boolean;
    score: number;
    issues: string[];
};
export declare function embedForRAG(client: OpenAI, text: string): Promise<number[]>;
/**
 * Calculate SmartScore v3: Enhanced multi-dimensional scoring for P&C insurance
 * Returns a score 0-100 for ranking articles
 */
export declare function calculateSmartScore(params: {
    publishedAt?: string;
    impactScore: number;
    impactBreakdown?: {
        market?: number;
        regulatory?: number;
        catastrophe?: number;
        technology?: number;
    };
    tags?: {
        regulations?: string[];
        perils?: string[];
        lob?: string[];
        trends?: string[];
    };
    regulatory?: boolean;
    riskPulse?: 'LOW' | 'MEDIUM' | 'HIGH';
    stormName?: string;
}): number;
/**
 * Normalize regions to ISO 3166-2 codes
 */
export declare function normalizeRegions(regions: string[]): string[];
/**
 * Normalize company names to canonical forms
 */
export declare function normalizeCompanies(companies: string[]): string[];
/**
 * Generate canonical URL (respect og:url if present)
 */
export declare function getCanonicalUrl(url: string, html?: string): string;
/**
 * Compute content hash for deduplication (simhash-style)
 */
export declare function computeContentHash(text: string): string;
/**
 * Detect storm/hurricane names from text
 * Returns storm name if found (e.g., "Hurricane Milton", "Tropical Storm Debby")
 */
export declare function detectStormName(text: string): string | undefined;
/**
 * Detect if article is from a regulatory source (DOI bulletin, etc.)
 */
export declare function isRegulatorySource(url: string, source: string): boolean;
/**
 * AI-driven article scoring for P&C insurance professionals (v3 Enhanced)
 * Uses LLM to evaluate relevance, impact, and professional interest
 * Focuses on actionability and decision-making value
 * Includes timeout, retry, and fallback logic
 */
export declare function scoreArticleWithAI(client: OpenAI, article: {
    title: string;
    bullets5?: string[];
    whyItMatters?: Record<string, string>;
    tags?: Record<string, unknown>;
    impactScore?: number;
    publishedAt?: string;
    regulatory?: boolean;
    stormName?: string;
    riskPulse?: string;
    sentiment?: string;
}): Promise<number>;
export {};
//# sourceMappingURL=agents.d.ts.map


================================================================================
FILE: functions/lib/agents.js
================================================================================

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashUrl = hashUrl;
exports.extractArticle = extractArticle;
exports.summarizeAndTag = summarizeAndTag;
exports.validateAndCleanArticle = validateAndCleanArticle;
exports.checkRAGQuality = checkRAGQuality;
exports.embedForRAG = embedForRAG;
exports.calculateSmartScore = calculateSmartScore;
exports.normalizeRegions = normalizeRegions;
exports.normalizeCompanies = normalizeCompanies;
exports.getCanonicalUrl = getCanonicalUrl;
exports.computeContentHash = computeContentHash;
exports.detectStormName = detectStormName;
exports.isRegulatorySource = isRegulatorySource;
exports.scoreArticleWithAI = scoreArticleWithAI;
const jsdom_1 = require("jsdom");
const readability_1 = require("@mozilla/readability");
const zod_1 = require("zod");
const exponential_backoff_1 = require("exponential-backoff"); // Import for retry logic
const utils_1 = require("./utils");
const schema = zod_1.z.object({
    title: zod_1.z.string(),
    url: zod_1.z.string(),
    source: zod_1.z.string(),
    bullets5: zod_1.z.array(zod_1.z.string()).min(3).max(5),
    whyItMatters: zod_1.z.object({
        underwriting: zod_1.z.string().min(20).max(200), // Ensure meaningful length
        claims: zod_1.z.string().min(20).max(200),
        brokerage: zod_1.z.string().min(20).max(200),
        actuarial: zod_1.z.string().min(20).max(200),
    }),
    tags: zod_1.z.object({
        lob: zod_1.z.array(zod_1.z.string()).max(6), // Lines of Business, e.g., "Auto", "Property"
        perils: zod_1.z.array(zod_1.z.string()).max(6), // Perils, e.g., "Hurricane", "Cyber"
        regions: zod_1.z.array(zod_1.z.string()).max(10), // ISO codes or names, e.g., "US-FL", "California"
        companies: zod_1.z.array(zod_1.z.string()).max(10), // Company names, e.g., "State Farm"
        trends: zod_1.z.array(zod_1.z.string()).max(8), // Trends like "GenAI", "Climate Risk", "Social Inflation", etc.
        regulations: zod_1.z.array(zod_1.z.string()).max(5), // Regulatory aspects, e.g., "NAIC Bulletin", "Tort Reform"
    }),
    riskPulse: zod_1.z.enum(["LOW", "MEDIUM", "HIGH"]),
    sentiment: zod_1.z.enum(["POSITIVE", "NEGATIVE", "NEUTRAL"]),
    confidence: zod_1.z.number().min(0).max(1),
    // v2 additions
    citations: zod_1.z.array(zod_1.z.string()).max(10), // URLs cited in bullets
    impactScore: zod_1.z.number().min(0).max(100), // Overall impact score
    impactBreakdown: zod_1.z.object({
        market: zod_1.z.number().min(0).max(100),
        regulatory: zod_1.z.number().min(0).max(100),
        catastrophe: zod_1.z.number().min(0).max(100),
        technology: zod_1.z.number().min(0).max(100),
    }),
    confidenceRationale: zod_1.z.string().max(200), // Why this confidence level
    leadQuote: zod_1.z.string().max(300), // Key factual excerpt (required for OpenAI structured output)
    disclosure: zod_1.z.string().max(200), // If promotional/opinionated (required for OpenAI structured output)
});
function hashUrl(u) {
    return (0, utils_1.hashUrl)(u);
}
async function extractArticle(url) {
    var _a, _b, _c, _d, _e, _f, _g;
    // Validate URL format before attempting fetch
    try {
        new URL(url);
    }
    catch (_h) {
        throw new Error(`Invalid URL format: ${url}`);
    }
    try {
        // Enhanced fetch with user-agent to mimic browser and avoid blocks
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
        const res = await fetch(url, {
            redirect: "follow",
            signal: controller.signal,
            headers: {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            },
        });
        clearTimeout(timeoutId);
        if (!res.ok) {
            throw new Error(`HTTP error! status: ${res.status}`);
        }
        const html = await res.text();
        // Validate HTML content
        if (!html || html.length < 100) {
            throw new Error(`Article content too short (${html.length} bytes)`);
        }
        const dom = new jsdom_1.JSDOM(html, { url });
        const reader = new readability_1.Readability(dom.window.document);
        const parsed = reader.parse();
        // Extract main image: Look for og:image or first relevant img
        let mainImage;
        const metaImage = (_a = dom.window.document.querySelector('meta[property="og:image"]')) === null || _a === void 0 ? void 0 : _a.getAttribute("content");
        if (metaImage) {
            mainImage = metaImage.startsWith("http") ? metaImage : new URL(metaImage, url).href;
        }
        else {
            const images = dom.window.document.querySelectorAll("img");
            if (images.length > 0) {
                mainImage = images[0].src.startsWith("http") ? images[0].src : new URL(images[0].src, url).href;
            }
        }
        // Extract author: From meta or byline
        let author;
        const metaAuthor = (_b = dom.window.document.querySelector('meta[name="author"]')) === null || _b === void 0 ? void 0 : _b.getAttribute("content");
        if (metaAuthor) {
            author = metaAuthor;
        }
        else {
            const byline = (_d = (_c = dom.window.document.querySelector(".byline, .author")) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.trim();
            if (byline)
                author = byline;
        }
        const extractedText = ((_e = parsed === null || parsed === void 0 ? void 0 : parsed.textContent) !== null && _e !== void 0 ? _e : "").trim();
        return {
            url,
            title: (_g = (_f = parsed === null || parsed === void 0 ? void 0 : parsed.title) !== null && _f !== void 0 ? _f : dom.window.document.title) !== null && _g !== void 0 ? _g : "",
            html,
            text: extractedText,
            mainImage,
            author,
        };
    }
    catch (error) {
        console.error(`Error extracting article from ${url}:`, error);
        throw error; // Let caller handle fallback
    }
}
async function summarizeAndTag(client, art) {
    var _a, _b, _c, _d;
    const jsonSchema = {
        name: "InsuranceBrief",
        schema: {
            type: "object",
            additionalProperties: false,
            properties: {
                title: { type: "string" },
                url: { type: "string" },
                source: { type: "string" },
                bullets5: { type: "array", items: { type: "string" }, minItems: 3, maxItems: 5 },
                whyItMatters: {
                    type: "object",
                    properties: {
                        underwriting: { type: "string", minLength: 20, maxLength: 200 },
                        claims: { type: "string", minLength: 20, maxLength: 200 },
                        brokerage: { type: "string", minLength: 20, maxLength: 200 },
                        actuarial: { type: "string", minLength: 20, maxLength: 200 },
                    },
                    required: ["underwriting", "claims", "brokerage", "actuarial"],
                    additionalProperties: false,
                },
                tags: {
                    type: "object",
                    properties: {
                        lob: { type: "array", items: { type: "string" } },
                        perils: { type: "array", items: { type: "string" } },
                        regions: { type: "array", items: { type: "string" } },
                        companies: { type: "array", items: { type: "string" } },
                        trends: { type: "array", items: { type: "string" } },
                        regulations: { type: "array", items: { type: "string" } },
                    },
                    required: ["lob", "perils", "regions", "companies", "trends", "regulations"],
                    additionalProperties: false,
                },
                riskPulse: { type: "string", enum: ["LOW", "MEDIUM", "HIGH"] },
                sentiment: { type: "string", enum: ["POSITIVE", "NEGATIVE", "NEUTRAL"] },
                confidence: { type: "number", minimum: 0, maximum: 1 },
                citations: { type: "array", items: { type: "string" }, maxItems: 10 },
                impactScore: { type: "number", minimum: 0, maximum: 100 },
                impactBreakdown: {
                    type: "object",
                    properties: {
                        market: { type: "number", minimum: 0, maximum: 100 },
                        regulatory: { type: "number", minimum: 0, maximum: 100 },
                        catastrophe: { type: "number", minimum: 0, maximum: 100 },
                        technology: { type: "number", minimum: 0, maximum: 100 },
                    },
                    required: ["market", "regulatory", "catastrophe", "technology"],
                    additionalProperties: false,
                },
                confidenceRationale: { type: "string", maxLength: 200 },
                leadQuote: { type: "string", maxLength: 300 },
                disclosure: { type: "string", maxLength: 200 },
            },
            required: ["title", "url", "source", "bullets5", "whyItMatters", "tags", "riskPulse", "sentiment", "confidence", "citations", "impactScore", "impactBreakdown", "confidenceRationale", "leadQuote", "disclosure"],
        },
        strict: true,
    };
    const currentDate = new Date().toISOString().split('T')[0]; // Use current date for timeliness
    const system = [
        "# ROLE & EXPERTISE",
        "You are a senior P&C insurance analyst with 20+ years experience across underwriting, claims, actuarial science, and risk management.",
        "You specialize in translating complex insurance news into actionable intelligence for industry professionals.",
        "",
        "# ANALYSIS FRAMEWORK",
        "Analyze articles through the P&C insurance lens focusing on:",
        "- Lines of Business: Personal Auto, Commercial Auto, Homeowners, Commercial Property, General Liability, Workers Comp, Professional Liability, Cyber, Umbrella/Excess",
        "- Perils: Hurricane, Wildfire, Earthquake, Flood, Tornado, Hail, Severe Weather, Cyber Attack, Litigation",
        "- Regions: Use ISO 3166-2 for US states (US-FL, US-CA, US-TX, etc.); spell out full country names (Canada, Mexico, etc.). NEVER use city names.",
        "- Companies: Use exact legal names (State Farm, Allstate, Chubb, The Hanover, Cincinnati Insurance, Erie Insurance, Selective, Hiscox, etc.). Normalize variations.",
        "- Key Trends (CONTROLLED LIST): Climate Risk, Social Inflation, GenAI, Litigation Funding, Tort Reform, Rate Adequacy, Reinsurance, Capacity Constraints, Nuclear Verdicts, AOB, Parametric Insurance, Telematics, ESG, Wildfire Mitigation",
        "- Regulations: Name the specific rule/bulletin if explicit (e.g., 'Florida HB 221', 'NAIC Model Law'); otherwise use 'State DOI Bulletin', 'NAIC', etc.",
        "",
        "# BULLET WRITING EXCELLENCE & FACTS & CITATIONS",
        "Create 3-5 executive summary bullets that tell a complete story:",
        "",
        "STRUCTURE:",
        "• Bullet 1 (HEADLINE): Lead with the most critical finding - what happened and why it matters (max 40 words)",
        "• Bullet 2 (DATA/CONTEXT): Provide quantitative evidence and key context (max 35 words)",
        "• Bullet 3 (IMPLICATIONS): Explain market/industry implications (max 35 words)",
        "• Bullet 4 (TRENDS/DRIVERS): Connect to broader trends or root causes (max 35 words, optional)",
        "• Bullet 5 (OUTLOOK/ACTION): Forward-looking implications or recommended actions (max 35 words, optional)",
        "",
        "FACTS & CITATIONS REQUIREMENTS:",
        "✓ EVERY quantitative claim (numbers, percentages, dollar amounts) MUST have a [n] citation marker",
        "✓ EVERY specific data point MUST map to an item in the citations[] array",
        "✓ If a specific number is not in the source, write 'no quantified data in source' instead of inventing",
        "✓ Citations array must contain ONLY absolute URLs that actually support the bracketed claims",
        "✓ Maximum 5 citations per article; prioritize sources that directly support key facts",
        "✓ Do NOT cite the main article URL unless it contains external links to supporting sources",
        "",
        "QUALITY STANDARDS:",
        "✓ Lead with impact, not background",
        "✓ Use specific numbers, percentages, dollar amounts when available (with citations)",
        "✓ Avoid jargon unless industry-standard (combined ratio, loss ratio, CAT losses, etc.)",
        "✓ Each bullet should stand alone but flow sequentially",
        "✓ Use active voice and strong verbs",
        "✓ Include [1], [2] citation markers for key facts (REQUIRED for all quantitative claims)",
        "",
        "EXAMPLES OF EXCELLENT BULLETS:",
        "✓ \"Florida's tort reforms reduced homeowners defense costs by 23% in Q3 2024, driving the state's combined ratio down to 94.2% from 108.5% in 2023, marking the first underwriting profit in three years.\"",
        "✓ \"California FAIR Plan exposure surged 29.8% to $458 billion as major carriers non-renewed 2.1 million policies in wildfire-prone areas, creating a residual market crisis that threatens state solvency.\"",
        "✓ \"Third-party litigation funding in auto injury claims increased average settlement costs by 47% across 12 states, with Florida, Louisiana, and California seeing the highest impact on loss ratios.\"",
        "",
        "# WHY IT MATTERS (Role-Specific Insights)",
        "Provide crisp, actionable insights for each role (20-120 chars, MUST be actionable):",
        "• Underwriting: What should underwriters watch/change/ask? Impact on risk selection, pricing, appetite, capacity, or underwriting guidelines",
        "• Claims: What should claims teams prepare for? Impact on loss costs, settlement strategies, litigation trends, fraud patterns, or reserve adequacy",
        "• Brokerage: What should brokers advise clients? Impact on market conditions, placement strategies, client risk profiles, or advisory opportunities",
        "• Actuarial: What should actuaries model/adjust? Impact on loss projections, reserving, pricing models, capital requirements, or assumption changes",
        "",
        "ROLE-SPECIFIC EXAMPLES:",
        "✓ Underwriting: 'Tighten underwriting for Florida homeowners; tort reforms reduce defense costs but exposure remains elevated.'",
        "✓ Claims: 'Prepare for higher litigation costs in California; FAIR Plan claims surge 29.8% YoY, requiring enhanced reserve strategies.'",
        "✓ Brokerage: 'Advise clients on residual market growth; placement challenges in FL/CA may require alternative risk transfer solutions.'",
        "✓ Actuarial: 'Update loss projections for CA FAIR Plan; 29.8% exposure growth and $2.7B claims require revised catastrophe models.'",
        "",
        "# SCORING METHODOLOGY",
        "",
        "IMPACT SCORE (0-100): Overall significance to P&C industry",
        "• 90-100: Industry-transforming (major CAT, regulatory overhaul, market crisis)",
        "• 70-89: Highly significant (large carrier action, state-level reform, emerging trend)",
        "• 50-69: Notable (regional impact, specific LOB changes, tactical shifts)",
        "• 30-49: Moderate (company news, incremental changes, niche topics)",
        "• 0-29: Low (tangential relevance, minor updates)",
        "",
        "IMPACT BREAKDOWN (each 0-100, MUST sum conceptually to overall impactScore):",
        "• Market: Effect on rates, capacity, competition, M&A, financial results (0-100)",
        "• Regulatory: Effect on compliance, rate filings, solvency, market conduct (0-100)",
        "• Catastrophe: Effect on loss exposure, reinsurance, accumulation risk (0-100)",
        "• Technology: Effect on operations, underwriting, claims, distribution (0-100)",
        "NOTE: impactBreakdown values reflect emphasis areas, NOT a sum. Each is independent 0-100.",
        "",
        "RISK PULSE (Industry Disruption Potential):",
        "• HIGH: Severe disruption - immediate action required (major CAT, market exit, regulatory emergency)",
        "• MEDIUM: Notable impact - strategic response needed (rate changes, capacity shifts, new regulations)",
        "• LOW: Minor impact - monitoring sufficient (incremental changes, niche developments)",
        "",
        "SENTIMENT:",
        "• POSITIVE: Favorable for industry profitability, stability, or growth",
        "• NEGATIVE: Challenges to profitability, capacity, or operations",
        "• NEUTRAL: Informational without clear directional impact",
        "",
        "CONFIDENCE (0-1): Based on article quality, data specificity, source credibility",
        "• 0.9-1.0: Authoritative source (NAIC, DOI, major carrier), specific quantified data, direct P&C relevance",
        "• 0.7-0.89: Credible source (industry publication), some quantified data, clear industry connection",
        "• 0.5-0.69: General source (news outlet), limited data, indirect relevance",
        "• 0-0.49: Questionable source, vague claims, tangential connection",
        "CONFIDENCE RATIONALE (≤200 chars): Explain WHY this confidence level (e.g., 'NAIC official source with specific loss data' or 'Industry blog with limited quantification')",
        "",
        "# OUTPUT REQUIREMENTS",
        "Return ONLY valid JSON matching the schema. Current date: " + currentDate,
        "Include all required fields: citations array, impactScore, impactBreakdown, confidenceRationale, leadQuote, disclosure.",
        "",
        "LEAD QUOTE (≤300 chars): Extract an exact, short factual excerpt from the article (with quotation marks if direct quote). No opinions or synthesis.",
        "DISCLOSURE (≤200 chars): Set to 'Vendor/Opinionated' if source is promotional or opinion-based; otherwise leave empty string ''.",
        "CITATIONS: Array of absolute URLs that directly support bracketed claims in bullets. Maximum 5 items.",
        "Use citation markers [1], [2] in bullets for ALL quantitative claims.",
        "URL: https://agencychecklists.com/2025/10/20/federal-report-2025-pc-sectors-decade-best-underwriting-profit-77765/",
        "SOURCE: Agency Checklists",
        "PUBLISHED: 2025-10-20",
        "TITLE: Federal Report 2025: P&C Sector’s Decade-Best Underwriting Profit",
        "CONTENT: [truncated content from the article...]",
        "",
        "Example Output:",
        '{"title":"Federal Report 2025: P&C Sector’s Decade-Best Underwriting Profit","url":"https://agencychecklists.com/2025/10/20/federal-report-2025-pc-sectors-decade-best-underwriting-profit-77765/","source":"Agency Checklists","bullets5":["The U.S. P&C sector achieved its best underwriting profit in a decade in 2024, with a combined ratio of 96.7% (down from 101.8% in 2023), net income of $171 billion (more than doubled), and record premiums of $1.06 trillion.","Investment income surged 28% to $88 billion, driven by a high-yield environment, while policyholder surplus grew 7% to $1.1 trillion, reflecting strong financial resilience despite high catastrophe losses.","Litigation costs declined in Florida due to tort reforms, reducing defense costs in homeowners multi-peril lines, while Third-Party Litigation Funding remains a concern.","Residential insurance markets face challenges: Florida Citizens reduced policies from 1.25 million to 924,732, but California’s FAIR Plan saw a 29.8% increase in dwelling policies and paid $2.7 billion in claims after major fires.","AI is transforming underwriting, claims, and fraud detection, with NAIC guidelines in place, while a new market for insuring digital assets is emerging, prompting regulatory discussions."],"whyItMatters":{"underwriting":"Improved combined ratio and premium growth indicate rate adequacy, but residential market pressures and litigation trends require careful risk selection and pricing adjustments.","claims":"Declining litigation costs in Florida signal potential cost savings, but rising claims in California’s FAIR Plan highlight the need for robust claims handling and reinsurance strategies.","brokerage":"Strong premium growth and investment income suggest a favorable market for brokers, but residual market growth and digital asset insurance present new opportunities and challenges.","actuarial":"Record catastrophe losses and litigation trends necessitate refined loss projections, while AI adoption and digital asset risks require updated modeling and regulatory compliance."},"tags":{"lob":["Property","Casualty","Personal Lines","Commercial Lines"],"perils":["Catastrophes","Litigation","Fire","Digital Asset Theft"],"regions":["US","US-FL","US-CA"],"companies":["Florida Citizens","California FAIR Plan"],"trends":["AI Adoption","Tort Reform","Digital Assets"],"regulations":["NAIC Bulletin","Florida Reforms"]},"riskPulse":"MEDIUM","sentiment":"POSITIVE","confidence":0.95}',
    ].join("\n");
    const input = [
        `URL: ${art.url}`,
        `SOURCE: ${art.source}`,
        `PUBLISHED: ${(_a = art.publishedAt) !== null && _a !== void 0 ? _a : ""}`,
        `TITLE: ${(_b = art.title) !== null && _b !== void 0 ? _b : ""}`,
        `AUTHOR: ${(_c = art.author) !== null && _c !== void 0 ? _c : ""}`,
        "CONTENT:",
        ((_d = art.text) !== null && _d !== void 0 ? _d : "").slice(0, 14000), // Truncate to avoid token limits
    ].join("\n");
    async function run(model) {
        var _a, _b, _c;
        const resp = await client.chat.completions.create({
            model,
            temperature: 0.2,
            max_tokens: 1200, // Increased for expanded schema
            response_format: { type: "json_schema", json_schema: jsonSchema },
            messages: [
                { role: "system", content: system },
                { role: "user", content: input },
            ],
        });
        const outText = (_c = (_b = (_a = resp.choices[0]) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.content) !== null && _c !== void 0 ? _c : "{}";
        return schema.parse(JSON.parse(outText));
    }
    // Model routing strategy: try primary model first, fallback to secondary
    const models = ["gpt-4o-mini", "gpt-4-turbo"]; // Primary, then fallback
    let lastError = null;
    for (const model of models) {
        try {
            console.log(`[SUMMARIZE] Attempting with model: ${model}`);
            const result = await (0, exponential_backoff_1.backOff)(() => run(model), {
                numOfAttempts: 3, // Reduced retries per model
                startingDelay: 1000,
                timeMultiple: 2,
                retry: (e) => {
                    console.warn(`[SUMMARIZE] ${model} call failed, retrying:`, e);
                    return true;
                },
            });
            // Final validation of result
            const validation = schema.safeParse(result);
            if (!validation.success) {
                console.error(`[SUMMARIZE] ${model} response failed validation:`, validation.error);
                lastError = new Error(`Invalid response from ${model}: ${validation.error.message}`);
                continue; // Try next model
            }
            console.log(`[SUMMARIZE] Successfully processed with ${model}`);
            return result;
        }
        catch (error) {
            console.warn(`[SUMMARIZE] Model ${model} failed:`, error);
            lastError = error instanceof Error ? error : new Error(String(error));
            // Continue to next model
        }
    }
    // All models failed
    console.error("[SUMMARIZE] All models failed:", lastError);
    throw lastError || new Error("Failed to summarize article with all available models");
}
/**
 * Ensure impactScore and impactBreakdown are coherent
 * - impactScore should be 0-100
 * - impactBreakdown fields should be 0-100
 * - impactBreakdown should sum to approximately impactScore (within tolerance)
 */
function ensureImpactCoherence(article) {
    const impactScore = Math.max(0, Math.min(100, article.impactScore || 0));
    let impactBreakdown = article.impactBreakdown || {
        market: 0,
        regulatory: 0,
        catastrophe: 0,
        technology: 0,
    };
    // Ensure all breakdown fields are 0-100
    impactBreakdown = {
        market: Math.max(0, Math.min(100, impactBreakdown.market || 0)),
        regulatory: Math.max(0, Math.min(100, impactBreakdown.regulatory || 0)),
        catastrophe: Math.max(0, Math.min(100, impactBreakdown.catastrophe || 0)),
        technology: Math.max(0, Math.min(100, impactBreakdown.technology || 0)),
    };
    // Check coherence: breakdown sum should be close to impactScore
    const breakdownSum = (impactBreakdown.market + impactBreakdown.regulatory +
        impactBreakdown.catastrophe + impactBreakdown.technology) / 4;
    if (Math.abs(breakdownSum - impactScore) > 20) {
        console.warn(`[IMPACT COHERENCE] Breakdown average (${Math.round(breakdownSum)}) differs from impactScore (${impactScore}) by >20 points`);
    }
    return Object.assign(Object.assign({}, article), { impactScore,
        impactBreakdown });
}
/**
 * Post-parse validation for article data
 * - Deduplicates citations (case-insensitive)
 * - Validates all citations are proper URLs
 * - Ensures bullets only use [1],[2] markers if citations exist
 * - Removes citation markers from bullets if no valid citations
 * - Ensures impactScore and impactBreakdown are coherent
 * - Validates all required fields are present and non-empty
 */
function validateAndCleanArticle(article) {
    // Validate required fields are present
    if (!article.title || article.title.trim().length === 0) {
        throw new Error('Article title is required and cannot be empty');
    }
    if (!article.url || article.url.trim().length === 0) {
        throw new Error('Article URL is required and cannot be empty');
    }
    if (!article.bullets5 || article.bullets5.length < 3) {
        throw new Error('Article must have at least 3 bullets');
    }
    // Deduplicate citations (case-insensitive), filtering out undefined/null values
    const citationsToProcess = (article.citations || []).filter((c) => c != null);
    const uniqueLowercase = Array.from(new Set(citationsToProcess.map(c => c.toLowerCase())));
    const uniqueCitations = uniqueLowercase
        .map(lower => citationsToProcess.find(orig => orig.toLowerCase() === lower))
        .filter((c) => c != null);
    // Validate all citations are proper URLs
    const validCitations = uniqueCitations.filter(c => {
        if (!c)
            return false;
        try {
            new URL(c);
            return true;
        }
        catch (_a) {
            console.warn(`Invalid citation URL: ${c}`);
            return false;
        }
    });
    // Clean bullets: remove citation markers if no valid citations exist
    let cleanedBullets = article.bullets5;
    if (validCitations.length === 0) {
        cleanedBullets = article.bullets5.map(b => {
            const hasMarkers = /\[\d+\]/.test(b);
            if (hasMarkers) {
                console.warn(`Removing citation markers from bullet: "${b}"`);
                return b.replace(/\s*\[\d+\]\s*/g, ' ').trim();
            }
            return b;
        });
    }
    else {
        // Validate that citation markers only reference valid citations
        cleanedBullets = article.bullets5.map(b => {
            const markers = b.match(/\[\d+\]/g) || [];
            const validMarkers = markers.filter(m => {
                const idx = parseInt(m.slice(1, -1), 10);
                return idx > 0 && idx <= validCitations.length;
            });
            if (validMarkers.length < markers.length) {
                console.warn(`Removing invalid citation markers from bullet: "${b}"`);
                let cleaned = b;
                markers.forEach(m => {
                    const idx = parseInt(m.slice(1, -1), 10);
                    if (idx < 1 || idx > validCitations.length) {
                        cleaned = cleaned.replace(m, '');
                    }
                });
                return cleaned.replace(/\s+/g, ' ').trim();
            }
            return b;
        });
    }
    let result = Object.assign(Object.assign({}, article), { bullets5: cleanedBullets, citations: validCitations });
    // Ensure impactScore and impactBreakdown are coherent
    result = ensureImpactCoherence(result);
    return result;
}
/**
 * RAG Quality Check: Validates article quality for retrieval-augmented generation
 * Ensures articles are suitable for use in Ask-the-Brief context
 */
function checkRAGQuality(article) {
    const issues = [];
    let score = 100;
    // Check 1: Bullet quality
    if (!article.bullets5 || article.bullets5.length < 3) {
        issues.push('Insufficient bullets (need at least 3)');
        score -= 20;
    }
    for (const bullet of article.bullets5 || []) {
        if (bullet.length < 20) {
            issues.push(`Bullet too short: "${bullet}"`);
            score -= 5;
        }
        if (bullet.length > 200) {
            issues.push(`Bullet too long: "${bullet.slice(0, 50)}..."`);
            score -= 5;
        }
    }
    // Check 2: Citation discipline
    const citationMarkers = (article.bullets5 || [])
        .join(' ')
        .match(/\[\d+\]/g) || [];
    if (citationMarkers.length > 0 && (!article.citations || article.citations.length === 0)) {
        issues.push('Citation markers present but no citations provided');
        score -= 15;
    }
    if (article.citations && article.citations.length > 5) {
        issues.push(`Too many citations (${article.citations.length}, max 5)`);
        score -= 10;
    }
    // Check 3: Why It Matters quality
    const whyItMatters = article.whyItMatters || {};
    const roles = ['underwriting', 'claims', 'brokerage', 'actuarial'];
    for (const role of roles) {
        const text = whyItMatters[role] || '';
        if (text.length < 20) {
            issues.push(`${role} impact too brief`);
            score -= 5;
        }
        if (text.length > 200) {
            issues.push(`${role} impact too long`);
            score -= 5;
        }
    }
    // Check 4: Confidence level
    if (article.confidence < 0.5) {
        issues.push(`Low confidence score (${article.confidence})`);
        score -= 10;
    }
    // Check 5: Impact score validity
    if (article.impactScore < 30) {
        issues.push(`Low impact score (${article.impactScore})`);
        score -= 5;
    }
    // Check 6: Lead quote presence
    if (!article.leadQuote || article.leadQuote.length < 10) {
        issues.push('Missing or too-short lead quote');
        score -= 10;
    }
    return {
        isQuality: score >= 70,
        score: Math.max(0, score),
        issues,
    };
}
async function embedForRAG(client, text) {
    // Validate input
    if (!text || text.trim().length === 0) {
        throw new Error('Cannot embed empty text');
    }
    // Truncate text to avoid token limits (embeddings have limits)
    const maxChars = 8000;
    const truncatedText = text.length > maxChars ? text.slice(0, maxChars) : text;
    // Enhanced text for better semantic capture: Prefix with P&C context
    const enhancedText = `P&C Insurance Article: ${truncatedText}`;
    try {
        const e = await client.embeddings.create({
            model: "text-embedding-3-small",
            input: enhancedText,
            dimensions: 512, // Increased dimensions for better similarity
        });
        if (!e.data || e.data.length === 0) {
            throw new Error('No embedding returned from API');
        }
        const embedding = e.data[0].embedding;
        if (!embedding || embedding.length === 0) {
            throw new Error('Empty embedding vector returned');
        }
        return embedding;
    }
    catch (error) {
        console.error('[EMBED] Failed to generate embedding:', error);
        // Fallback: return zero vector with correct dimensions
        // This allows processing to continue without breaking the pipeline
        console.warn('[EMBED] Using fallback zero vector for embedding');
        return new Array(512).fill(0);
    }
}
/**
 * Calculate SmartScore v3: Enhanced multi-dimensional scoring for P&C insurance
 * Returns a score 0-100 for ranking articles
 */
function calculateSmartScore(params) {
    return (0, utils_1.calculateSmartScore)(params);
}
/**
 * Normalize regions to ISO 3166-2 codes
 */
function normalizeRegions(regions) {
    return (0, utils_1.normalizeRegions)(regions);
}
/**
 * Normalize company names to canonical forms
 */
function normalizeCompanies(companies) {
    return (0, utils_1.normalizeCompanies)(companies);
}
/**
 * Generate canonical URL (respect og:url if present)
 */
function getCanonicalUrl(url, html) {
    var _a, _b;
    if (!html)
        return url;
    try {
        const dom = new jsdom_1.JSDOM(html);
        const ogUrl = (_a = dom.window.document.querySelector('meta[property="og:url"]')) === null || _a === void 0 ? void 0 : _a.getAttribute("content");
        if (ogUrl)
            return ogUrl;
        const canonical = (_b = dom.window.document.querySelector('link[rel="canonical"]')) === null || _b === void 0 ? void 0 : _b.getAttribute("href");
        if (canonical) {
            return canonical.startsWith('http') ? canonical : new URL(canonical, url).href;
        }
    }
    catch (_c) {
        // Ignore parsing errors
    }
    return url;
}
/**
 * Compute content hash for deduplication (simhash-style)
 */
function computeContentHash(text) {
    return (0, utils_1.computeContentHash)(text);
}
/**
 * Detect storm/hurricane names from text
 * Returns storm name if found (e.g., "Hurricane Milton", "Tropical Storm Debby")
 */
function detectStormName(text) {
    return (0, utils_1.detectStormName)(text);
}
/**
 * Detect if article is from a regulatory source (DOI bulletin, etc.)
 */
function isRegulatorySource(url, source) {
    return (0, utils_1.isRegulatorySource)(url, source);
}
/**
 * AI-driven article scoring for P&C insurance professionals (v3 Enhanced)
 * Uses LLM to evaluate relevance, impact, and professional interest
 * Focuses on actionability and decision-making value
 * Includes timeout, retry, and fallback logic
 */
async function scoreArticleWithAI(client, article) {
    const TIMEOUT_MS = 10000; // 10 second timeout
    const MAX_RETRIES = 2;
    const scoreWithTimeout = async () => {
        const prompt = `You are a senior P&C insurance analyst evaluating article relevance for industry professionals (underwriters, claims adjusters, actuaries, brokers, risk managers).

ARTICLE ANALYSIS:
Title: ${article.title}

Executive Summary:
${(article.bullets5 || []).map((b, i) => `${i + 1}. ${b}`).join('\n')}

Professional Impact:
${Object.entries(article.whyItMatters || {})
            .map(([role, impact]) => `• ${role.toUpperCase()}: ${impact}`)
            .join('\n')}

Metadata:
• Tags: ${JSON.stringify(article.tags || {})}
• Impact Score: ${article.impactScore || 0}/100
• Risk Pulse: ${article.riskPulse || 'UNKNOWN'}
• Sentiment: ${article.sentiment || 'NEUTRAL'}
• Regulatory: ${article.regulatory ? 'Yes' : 'No'}
• Named Storm: ${article.stormName || 'None'}
• Published: ${article.publishedAt || 'Unknown'}

SCORING CRITERIA (0-100):

Rate this article's value to P&C insurance professionals based on:

1. PROFESSIONAL RELEVANCE (35 points):
   - Direct impact on underwriting decisions, pricing, or risk selection
   - Affects claims handling, settlement strategies, or loss costs
   - Influences actuarial models, reserving, or capital requirements
   - Impacts brokerage placement, client advisory, or market access

2. ACTIONABILITY (25 points):
   - Provides specific data, metrics, or quantitative insights
   - Enables immediate decision-making or strategic planning
   - Offers competitive intelligence or market positioning insights
   - Contains regulatory guidance or compliance requirements

3. MARKET SIGNIFICANCE (25 points):
   - Affects rates, capacity, or market availability
   - Involves major carriers, significant market share, or systemic risk
   - Represents emerging trends or structural market changes
   - Impacts reinsurance, capital markets, or industry economics

4. TIMELINESS & URGENCY (15 points):
   - Breaking news requiring immediate attention
   - Time-sensitive regulatory or catastrophe developments
   - Evolving situations with ongoing implications
   - Enduring relevance beyond immediate news cycle

SCORING GUIDELINES:
• 90-100: CRITICAL - Industry-transforming events (major CAT, regulatory overhaul, market crisis, carrier insolvency)
• 75-89: HIGH VALUE - Significant developments (state reforms, large carrier actions, emerging trends, material rate changes)
• 60-74: VALUABLE - Notable industry news (regional impacts, specific LOB changes, tactical intelligence)
• 45-59: MODERATE - Relevant updates (company news, incremental changes, niche topics)
• 30-44: LIMITED - Tangential relevance (peripheral topics, minor updates, low actionability)
• 0-29: LOW - Minimal P&C relevance (general business news, unrelated topics)

PRIORITIZE:
✓ Catastrophe loss events and accumulation risk
✓ Regulatory changes affecting rates, forms, or solvency
✓ Litigation trends and nuclear verdicts
✓ Market capacity shifts and carrier exits/entries
✓ Rate adequacy and combined ratio impacts
✓ Reinsurance market developments
✓ Technology disruption (AI, telematics, parametric)
✓ Climate risk and secondary perils
✓ Social inflation and claims cost trends

DEPRIORITIZE:
✗ Generic business news without P&C angle
✗ Promotional content or vendor marketing
✗ Life/health insurance topics
✗ International news without U.S. market impact
✗ Tangential technology without insurance application

Respond with ONLY a single integer 0-100, no explanation or additional text.`;
        // Create abort controller for timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);
        try {
            const response = await client.chat.completions.create({
                model: "gpt-4o-mini",
                temperature: 0.1, // Low temperature for consistent scoring
                max_tokens: 10,
                messages: [{ role: "user", content: prompt }],
            });
            clearTimeout(timeoutId);
            const scoreText = (response.choices[0].message.content || "50").trim();
            const score = parseInt(scoreText, 10);
            if (isNaN(score) || score < 0 || score > 100) {
                console.warn(`[AI SCORE] Invalid score "${scoreText}", defaulting to 50`);
                return 50;
            }
            console.log(`[AI SCORE] "${article.title}" → ${score}/100`);
            return score;
        }
        catch (error) {
            clearTimeout(timeoutId);
            throw error;
        }
    };
    // Retry logic with exponential backoff
    for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {
        try {
            return await scoreWithTimeout();
        }
        catch (error) {
            if (attempt === MAX_RETRIES) {
                console.error(`[AI SCORE] Failed after ${MAX_RETRIES + 1} attempts:`, error);
                return 50; // Final fallback
            }
            const delay = Math.pow(2, attempt) * 1000; // 1s, 2s, 4s
            console.warn(`[AI SCORE] Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    return 50; // Should not reach here, but safety fallback
}
//# sourceMappingURL=agents.js.map


================================================================================
FILE: functions/lib/ai/index.d.ts
================================================================================

/**
 * AI Module Exports
 * AI-powered summarization and tagging functionality
 */
export { default as SummarizationService } from './summarization';
export type { ArticleSummary, AIProcessingResult, SummaryCache, AIPromptConfig, TagInferenceResult, QuoteExtractionResult, } from './types';
//# sourceMappingURL=index.d.ts.map


================================================================================
FILE: functions/lib/ai/index.js
================================================================================

"use strict";
/**
 * AI Module Exports
 * AI-powered summarization and tagging functionality
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummarizationService = void 0;
var summarization_1 = require("./summarization");
Object.defineProperty(exports, "SummarizationService", { enumerable: true, get: function () { return __importDefault(summarization_1).default; } });
//# sourceMappingURL=index.js.map


================================================================================
FILE: functions/lib/ai/summarization.d.ts
================================================================================

/**
 * AI Summarization Service
 * Generates deterministic JSON summaries with schema validation
 */
import { AIProcessingResult } from './types';
export declare class SummarizationService {
    private openai;
    private readonly CACHE_TTL_DAYS;
    private readonly PROMPT_VERSION;
    constructor(apiKey: string);
    /**
     * Generate content hash for caching
     */
    private generateContentHash;
    /**
     * Check cache for existing summary
     */
    private checkCache;
    /**
     * Store summary in cache
     */
    private storeInCache;
    /**
     * Summarize article using OpenAI
     */
    summarizeArticle(articleId: string, url: string, title: string, content: string): Promise<AIProcessingResult>;
}
export default SummarizationService;
//# sourceMappingURL=summarization.d.ts.map


================================================================================
FILE: functions/lib/ai/summarization.js
================================================================================

"use strict";
/**
 * AI Summarization Service
 * Generates deterministic JSON summaries with schema validation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummarizationService = void 0;
const openai_1 = __importDefault(require("openai"));
const zod_1 = require("zod");
const firebase_1 = require("../ingestion/firebase");
const crypto = __importStar(require("crypto"));
const SummarySchema = zod_1.z.object({
    url: zod_1.z.string().url(),
    headline: zod_1.z.string().min(10).max(200),
    briefBullets: zod_1.z.array(zod_1.z.string()).min(3).max(5),
    keyNumbers: zod_1.z.array(zod_1.z.string()).max(10),
    materiality: zod_1.z.number().min(0).max(100),
    impacts: zod_1.z.object({
        underwriting: zod_1.z.string().min(20).max(200),
        claims: zod_1.z.string().min(20).max(200),
        brokerage: zod_1.z.string().min(20).max(200),
        actuarial: zod_1.z.string().min(20).max(200),
    }),
    geos: zod_1.z.array(zod_1.z.string()).max(10),
    perils: zod_1.z.array(zod_1.z.string()).max(10),
    regulatoryFlags: zod_1.z.array(zod_1.z.string()).max(5),
    riskNotes: zod_1.z.string().max(500),
    confidence: zod_1.z.number().min(0).max(1),
    citations: zod_1.z.array(zod_1.z.string().url()).max(10),
    leadQuote: zod_1.z.string().max(300),
    disclosure: zod_1.z.string().max(200),
});
class SummarizationService {
    constructor(apiKey) {
        this.CACHE_TTL_DAYS = 30;
        this.PROMPT_VERSION = '1.0';
        this.openai = new openai_1.default({ apiKey });
    }
    /**
     * Generate content hash for caching
     */
    generateContentHash(content) {
        return crypto
            .createHash('sha256')
            .update(content.toLowerCase().trim())
            .digest('hex');
    }
    /**
     * Check cache for existing summary
     */
    async checkCache(url, contentHash) {
        try {
            const cacheKey = `${url}|${contentHash}|${this.PROMPT_VERSION}`;
            const cacheHash = crypto.createHash('md5').update(cacheKey).digest('hex');
            const doc = await firebase_1.db.collection('summaryCache').doc(cacheHash).get();
            if (doc.exists) {
                const cache = doc.data();
                if (new Date(cache.expiresAt) > new Date()) {
                    return cache.summary;
                }
            }
        }
        catch (error) {
            console.error('Cache check error:', error);
        }
        return null;
    }
    /**
     * Store summary in cache
     */
    async storeInCache(url, contentHash, summary) {
        try {
            const cacheKey = `${url}|${contentHash}|${this.PROMPT_VERSION}`;
            const cacheHash = crypto.createHash('md5').update(cacheKey).digest('hex');
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + this.CACHE_TTL_DAYS);
            const cache = {
                url,
                contentHash,
                promptVersion: this.PROMPT_VERSION,
                summary,
                createdAt: new Date().toISOString(),
                expiresAt: expiresAt.toISOString(),
                ttlDays: this.CACHE_TTL_DAYS,
            };
            await firebase_1.db.collection('summaryCache').doc(cacheHash).set(cache);
        }
        catch (error) {
            console.error('Cache storage error:', error);
        }
    }
    /**
     * Summarize article using OpenAI
     */
    async summarizeArticle(articleId, url, title, content) {
        var _a, _b, _c;
        const startTime = Date.now();
        const contentHash = this.generateContentHash(content);
        try {
            // Check cache
            const cached = await this.checkCache(url, contentHash);
            if (cached) {
                return {
                    articleId,
                    summary: cached,
                    processingTime: Date.now() - startTime,
                    model: 'gpt-4-turbo',
                    tokensUsed: 0,
                    cached: true,
                    timestamp: new Date().toISOString(),
                };
            }
            // Generate summary
            const systemPrompt = `You are an expert P&C insurance analyst. Analyze the provided article and output ONLY valid JSON matching the required schema. Be deterministic and precise.`;
            const userPrompt = `Analyze this insurance article and provide a comprehensive summary:

Title: ${title}
URL: ${url}
Content: ${content.substring(0, 2000)}

Provide output as valid JSON with these fields:
- headline: concise headline (10-200 chars)
- briefBullets: 3-5 key points
- keyNumbers: any important numbers mentioned
- materiality: 0-100 score
- impacts: object with underwriting, claims, brokerage, actuarial impacts
- geos: affected geographies
- perils: relevant perils
- regulatoryFlags: regulatory implications
- riskNotes: risk assessment
- confidence: 0-1 confidence score
- citations: relevant URLs
- leadQuote: key quote from article
- disclosure: any important disclosures`;
            const response = await this.openai.chat.completions.create({
                model: 'gpt-4-turbo',
                temperature: 0,
                max_tokens: 1500,
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: userPrompt },
                ],
            });
            const content_text = ((_b = (_a = response.choices[0]) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.content) || '';
            const jsonMatch = content_text.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                throw new Error('No JSON found in response');
            }
            const summaryData = JSON.parse(jsonMatch[0]);
            const parsedSummary = SummarySchema.parse(Object.assign({ url }, summaryData));
            const summary = parsedSummary;
            // Store in cache
            await this.storeInCache(url, contentHash, summary);
            return {
                articleId,
                summary,
                processingTime: Date.now() - startTime,
                model: 'gpt-4-turbo',
                tokensUsed: ((_c = response.usage) === null || _c === void 0 ? void 0 : _c.total_tokens) || 0,
                cached: false,
                timestamp: new Date().toISOString(),
            };
        }
        catch (error) {
            throw new Error(`Summarization failed: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
}
exports.SummarizationService = SummarizationService;
exports.default = SummarizationService;
//# sourceMappingURL=summarization.js.map


================================================================================
FILE: functions/lib/ai/types.d.ts
================================================================================

/**
 * AI Processing Types
 * Defines interfaces for AI summarization and tagging
 */
export interface ArticleSummary {
    url: string;
    headline: string;
    briefBullets: string[];
    keyNumbers: string[];
    materiality: number;
    impacts: {
        underwriting: string;
        claims: string;
        brokerage: string;
        actuarial: string;
    };
    geos: string[];
    perils: string[];
    regulatoryFlags: string[];
    riskNotes: string;
    confidence: number;
    citations: string[];
    leadQuote: string;
    disclosure: string;
}
export interface AIProcessingResult {
    articleId: string;
    summary: ArticleSummary;
    processingTime: number;
    model: string;
    tokensUsed: number;
    cached: boolean;
    timestamp: string;
}
export interface SummaryCache {
    url: string;
    contentHash: string;
    promptVersion: string;
    summary: ArticleSummary;
    createdAt: string;
    expiresAt: string;
    ttlDays: number;
}
export interface AIPromptConfig {
    version: string;
    model: string;
    temperature: number;
    maxTokens: number;
    systemPrompt: string;
    examples: Array<{
        input: string;
        output: ArticleSummary;
    }>;
}
export interface TagInferenceResult {
    lob: string[];
    perils: string[];
    regions: string[];
    companies: string[];
    trends: string[];
    regulations: string[];
    confidence: number;
}
export interface QuoteExtractionResult {
    quotes: string[];
    sources: string[];
    confidence: number;
}
//# sourceMappingURL=types.d.ts.map


================================================================================
FILE: functions/lib/ai/types.js
================================================================================

"use strict";
/**
 * AI Processing Types
 * Defines interfaces for AI summarization and tagging
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map


================================================================================
FILE: functions/lib/clustering/index.d.ts
================================================================================

/**
 * Clustering Module Exports
 * Event clustering and deduplication functionality
 */
export { ClusteringService } from './service';
export type { Event, ClusteringResult, ClusteringMetrics, SimilarityScore, EventUpdate, } from './types';
import { ClusteringService } from './service';
export declare const clusteringService: ClusteringService;
//# sourceMappingURL=index.d.ts.map


================================================================================
FILE: functions/lib/clustering/index.js
================================================================================

"use strict";
/**
 * Clustering Module Exports
 * Event clustering and deduplication functionality
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clusteringService = exports.ClusteringService = void 0;
var service_1 = require("./service");
Object.defineProperty(exports, "ClusteringService", { enumerable: true, get: function () { return service_1.ClusteringService; } });
const service_2 = require("./service");
exports.clusteringService = new service_2.ClusteringService();
//# sourceMappingURL=index.js.map


================================================================================
FILE: functions/lib/clustering/service.d.ts
================================================================================

/**
 * Clustering Service
 * Groups similar articles into events using similarity metrics
 */
import { SimilarityScore, ClusteringMetrics } from './types';
export declare class ClusteringService {
    private readonly SIMILARITY_THRESHOLD;
    private readonly TITLE_WEIGHT;
    private readonly CONTENT_WEIGHT;
    private readonly TAG_WEIGHT;
    private readonly TEMPORAL_WINDOW_HOURS;
    /**
     * Calculate Levenshtein distance for string similarity
     */
    private levenshteinDistance;
    /**
     * Calculate tag-based similarity (P&C-specific)
     */
    private calculateTagSimilarity;
    /**
     * Calculate similarity between two articles
     */
    calculateSimilarity(article1: Record<string, unknown>, article2: Record<string, unknown>): Promise<SimilarityScore>;
    /**
     * Check if two articles are within temporal window
     */
    private isWithinTemporalWindow;
    /**
     * Cluster unprocessed articles into events
     */
    clusterArticles(): Promise<ClusteringMetrics>;
    /**
     * Create or update event
     */
    private createOrUpdateEvent;
}
declare const _default: ClusteringService;
export default _default;
//# sourceMappingURL=service.d.ts.map


================================================================================
FILE: functions/lib/clustering/service.js
================================================================================

"use strict";
/**
 * Clustering Service
 * Groups similar articles into events using similarity metrics
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusteringService = void 0;
const firebase_1 = require("../ingestion/firebase");
class ClusteringService {
    constructor() {
        this.SIMILARITY_THRESHOLD = 0.75;
        this.TITLE_WEIGHT = 0.4;
        this.CONTENT_WEIGHT = 0.6;
        this.TAG_WEIGHT = 0.3; // Weight for tag-based similarity
        this.TEMPORAL_WINDOW_HOURS = 24; // Cluster articles within 24 hours
    }
    /**
     * Calculate Levenshtein distance for string similarity
     */
    levenshteinDistance(str1, str2) {
        const len1 = str1.length;
        const len2 = str2.length;
        const matrix = Array(len2 + 1)
            .fill(null)
            .map(() => Array(len1 + 1).fill(0));
        for (let i = 0; i <= len1; i++)
            matrix[0][i] = i;
        for (let j = 0; j <= len2; j++)
            matrix[j][0] = j;
        for (let j = 1; j <= len2; j++) {
            for (let i = 1; i <= len1; i++) {
                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(matrix[j][i - 1] + 1, matrix[j - 1][i] + 1, matrix[j - 1][i - 1] + indicator);
            }
        }
        const distance = matrix[len2][len1];
        const maxLen = Math.max(len1, len2);
        return 1 - distance / maxLen;
    }
    /**
     * Calculate tag-based similarity (P&C-specific)
     */
    calculateTagSimilarity(tags1, tags2) {
        if (!tags1 || !tags2)
            return 0;
        let matchCount = 0;
        let totalTags = 0;
        // Check LOB matches
        const lob1 = tags1.lob || [];
        const lob2 = tags2.lob || [];
        totalTags += Math.max(lob1.length, lob2.length);
        matchCount += lob1.filter(l => lob2.includes(l)).length;
        // Check peril matches
        const perils1 = tags1.perils || [];
        const perils2 = tags2.perils || [];
        totalTags += Math.max(perils1.length, perils2.length);
        matchCount += perils1.filter(p => perils2.includes(p)).length;
        // Check region matches
        const regions1 = tags1.regions || [];
        const regions2 = tags2.regions || [];
        totalTags += Math.max(regions1.length, regions2.length);
        matchCount += regions1.filter(r => regions2.includes(r)).length;
        return totalTags > 0 ? matchCount / totalTags : 0;
    }
    /**
     * Calculate similarity between two articles
     */
    async calculateSimilarity(article1, article2) {
        const title1 = article1.title || '';
        const title2 = article2.title || '';
        const content1 = (article1.text || article1.html || '').substring(0, 500);
        const content2 = (article2.text || article2.html || '').substring(0, 500);
        const titleSimilarity = this.levenshteinDistance(title1.toLowerCase(), title2.toLowerCase());
        const contentSimilarity = this.levenshteinDistance(content1.toLowerCase(), content2.toLowerCase());
        const tagSimilarity = this.calculateTagSimilarity(article1.tags, article2.tags);
        // Weighted combination: title 40%, content 40%, tags 20%
        const overallSimilarity = (this.TITLE_WEIGHT * titleSimilarity) +
            (this.CONTENT_WEIGHT * contentSimilarity) +
            (this.TAG_WEIGHT * tagSimilarity);
        return {
            articleId1: article1.id,
            articleId2: article2.id,
            titleSimilarity,
            contentSimilarity,
            overallSimilarity,
            shouldCluster: overallSimilarity >= this.SIMILARITY_THRESHOLD,
        };
    }
    /**
     * Check if two articles are within temporal window
     */
    isWithinTemporalWindow(date1, date2) {
        const time1 = new Date(date1).getTime();
        const time2 = new Date(date2).getTime();
        const diffHours = Math.abs(time1 - time2) / (1000 * 60 * 60);
        return diffHours <= this.TEMPORAL_WINDOW_HOURS;
    }
    /**
     * Cluster unprocessed articles into events
     */
    async clusterArticles() {
        const startTime = Date.now();
        let totalArticles = 0;
        let totalEvents = 0;
        let totalClustered = 0;
        try {
            // Get unprocessed articles from last 48 hours
            const cutoffTime = new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString();
            const unprocessedSnapshot = await firebase_1.db
                .collection('articles')
                .where('processed', '==', false)
                .where('publishedAt', '>=', cutoffTime)
                .orderBy('publishedAt', 'desc')
                .limit(200)
                .get();
            totalArticles = unprocessedSnapshot.size;
            if (totalArticles === 0) {
                return {
                    totalArticles: 0,
                    totalEvents: 0,
                    averageClusterSize: 0,
                    processingTime: Date.now() - startTime,
                    timestamp: new Date().toISOString(),
                };
            }
            const articles = unprocessedSnapshot.docs.map((doc) => (Object.assign({ id: doc.id }, doc.data())));
            // Cluster articles
            const processedArticleIds = new Set();
            for (let i = 0; i < articles.length; i++) {
                if (processedArticleIds.has(articles[i].id))
                    continue;
                const cluster = [articles[i].id];
                processedArticleIds.add(articles[i].id);
                // Find similar articles within temporal window
                for (let j = i + 1; j < articles.length; j++) {
                    if (processedArticleIds.has(articles[j].id))
                        continue;
                    // Check temporal proximity first (faster check)
                    const publishedAt1 = articles[i].publishedAt || '';
                    const publishedAt2 = articles[j].publishedAt || '';
                    if (!this.isWithinTemporalWindow(publishedAt1, publishedAt2)) {
                        continue;
                    }
                    const similarity = await this.calculateSimilarity(articles[i], articles[j]);
                    if (similarity.shouldCluster) {
                        cluster.push(articles[j].id);
                        processedArticleIds.add(articles[j].id);
                    }
                }
                // Create or update event
                if (cluster.length > 0) {
                    await this.createOrUpdateEvent(articles[i], cluster);
                    totalEvents++;
                    totalClustered += cluster.length;
                }
            }
            return {
                totalArticles,
                totalEvents,
                averageClusterSize: totalClustered > 0 ? totalClustered / totalEvents : 0,
                processingTime: Date.now() - startTime,
                timestamp: new Date().toISOString(),
            };
        }
        catch (error) {
            console.error('Clustering error:', error);
            throw error;
        }
    }
    /**
     * Create or update event
     */
    async createOrUpdateEvent(canonicalArticle, articleIds) {
        const eventId = `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const event = {
            id: eventId,
            canonicalArticleId: canonicalArticle.id,
            articleIds,
            title: canonicalArticle.title || '',
            description: canonicalArticle.description || '',
            publishedAt: canonicalArticle.publishedAt || new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            materialityScore: 50,
            severityScore: 50,
            impactScore: 50,
            lob: canonicalArticle.lob || [],
            perils: canonicalArticle.perils || [],
            regions: canonicalArticle.regions || [],
            companies: canonicalArticle.companies || [],
            eventType: 'other',
            riskPulse: 'MEDIUM',
            sentiment: 'NEUTRAL',
            createdAt: new Date().toISOString(),
            lastUpdated: new Date().toISOString(),
            articleCount: articleIds.length,
            sourceCount: 1,
            regulatoryFlags: [],
            trendingScore: 0,
            isHotTopic: false,
        };
        await firebase_1.db.collection('events').doc(eventId).set(event);
        // Mark articles as processed
        for (const articleId of articleIds) {
            await firebase_1.db.collection('articles').doc(articleId).update({
                processed: true,
                eventId,
            });
        }
    }
}
exports.ClusteringService = ClusteringService;
exports.default = new ClusteringService();
//# sourceMappingURL=service.js.map


================================================================================
FILE: functions/lib/clustering/types.d.ts
================================================================================

/**
 * Clustering and Event Types
 * Defines Event model and clustering interfaces
 */
export interface Event {
    id: string;
    canonicalArticleId: string;
    articleIds: string[];
    title: string;
    description: string;
    publishedAt: string;
    updatedAt: string;
    materialityScore: number;
    severityScore: number;
    impactScore: number;
    lob: string[];
    perils: string[];
    regions: string[];
    companies: string[];
    eventType: 'catastrophe' | 'regulatory' | 'market' | 'technology' | 'other';
    riskPulse: 'LOW' | 'MEDIUM' | 'HIGH';
    sentiment: 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL';
    createdAt: string;
    lastUpdated: string;
    articleCount: number;
    sourceCount: number;
    regulatoryFlags: string[];
    stormName?: string;
    trendingScore: number;
    isHotTopic: boolean;
}
export interface ClusteringResult {
    eventId: string;
    articleIds: string[];
    similarity: number;
    reason: string;
}
export interface ClusteringMetrics {
    totalArticles: number;
    totalEvents: number;
    averageClusterSize: number;
    processingTime: number;
    timestamp: string;
}
export interface SimilarityScore {
    articleId1: string;
    articleId2: string;
    titleSimilarity: number;
    contentSimilarity: number;
    overallSimilarity: number;
    shouldCluster: boolean;
}
export interface EventUpdate {
    eventId: string;
    newArticleIds: string[];
    updatedMaterialityScore: number;
    updatedSeverityScore: number;
    reason: string;
    timestamp: string;
}
//# sourceMappingURL=types.d.ts.map


================================================================================
FILE: functions/lib/clustering/types.js
================================================================================

"use strict";
/**
 * Clustering and Event Types
 * Defines Event model and clustering interfaces
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map


================================================================================
FILE: functions/lib/index.d.ts
================================================================================

export declare const refreshFeeds: import("firebase-functions/v2/scheduler").ScheduleFunction;
export declare const initializeFeeds: import("firebase-functions/v2/https").HttpsFunction;
export declare const refreshFeedsManual: import("firebase-functions/v2/https").HttpsFunction;
export declare const testSingleArticle: import("firebase-functions/v2/https").HttpsFunction;
export declare const feedHealthReport: import("firebase-functions/v2/https").HttpsFunction;
export declare const askBrief: import("firebase-functions/v2/https").HttpsFunction;
/**
 * Reader View Endpoint (B1)
 *
 * Fetches an article URL and returns sanitized HTML for display in a Quick Read modal.
 * Strips tracking, injects canonical source attribution, and returns safe HTML.
 *
 * Query Parameters:
 * - url: The article URL to fetch and sanitize
 *
 * Response:
 * {
 *   title: string,
 *   byline?: string,
 *   published?: string,
 *   mainImage?: string,
 *   html: string (sanitized)
 * }
 */
export declare const readerView: import("firebase-functions/v2/https").HttpsFunction;
//# sourceMappingURL=index.d.ts.map


================================================================================
FILE: functions/lib/index.js
================================================================================

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readerView = exports.askBrief = exports.feedHealthReport = exports.testSingleArticle = exports.refreshFeedsManual = exports.initializeFeeds = exports.refreshFeeds = void 0;
const scheduler_1 = require("firebase-functions/v2/scheduler");
const https_1 = require("firebase-functions/v2/https");
const params_1 = require("firebase-functions/params");
const app_1 = require("firebase-admin/app");
const firestore_1 = require("firebase-admin/firestore");
const openai_1 = __importDefault(require("openai"));
const rss_parser_1 = __importDefault(require("rss-parser"));
const agents_1 = require("./agents");
(0, app_1.initializeApp)();
const db = (0, firestore_1.getFirestore)();
const OPENAI_API_KEY = (0, params_1.defineSecret)("OPENAI_API_KEY");
/**
 * Firestore-backed rate limiter for askBrief endpoint
 * Tracks requests per IP with sliding window and TTL expiration
 */
const RATE_LIMIT_WINDOW_MS = 60 * 60 * 1000; // 1 hour
const RATE_LIMIT_MAX_REQUESTS = 20; // 20 requests per hour per IP
/**
 * Check rate limit using Firestore with sliding window
 * Uses hashed IP for privacy, TTL for automatic cleanup
 */
async function checkRateLimit(ip) {
    try {
        const hashedIp = (0, agents_1.hashUrl)(ip); // Hash IP for privacy
        const rateLimitRef = db.collection('rate_limits').doc(hashedIp);
        const now = Date.now();
        const windowStart = now - RATE_LIMIT_WINDOW_MS;
        // Get current rate limit record
        const doc = await rateLimitRef.get();
        let requests = [];
        if (doc.exists) {
            const data = doc.data();
            requests = ((data === null || data === void 0 ? void 0 : data.requests) || []).filter((ts) => ts > windowStart);
        }
        // Check if limit exceeded
        if (requests.length >= RATE_LIMIT_MAX_REQUESTS) {
            console.log(`[RATE LIMIT] IP ${ip} exceeded limit: ${requests.length}/${RATE_LIMIT_MAX_REQUESTS}`);
            return false;
        }
        // Add current request and update
        requests.push(now);
        await rateLimitRef.set({
            requests,
            lastRequest: new Date(),
            expiresAt: new Date(now + RATE_LIMIT_WINDOW_MS + 60 * 60 * 1000), // TTL: window + 1 hour
        });
        return true;
    }
    catch (error) {
        console.error('[RATE LIMIT ERROR]', error);
        // On error, allow request (fail open for availability)
        return true;
    }
}
/**
 * CORS configuration - centralized from environment
 * Supports comma-separated origins and wildcard for localhost
 */
function getAllowedOrigins() {
    const envOrigins = process.env.ALLOWED_ORIGINS || '';
    if (envOrigins) {
        return envOrigins.split(',').map(o => o.trim()).filter(o => o.length > 0);
    }
    // Default origins if env not set
    return [
        'https://carriersignal.web.app',
        'https://carriersignal.firebaseapp.com',
        'http://localhost:5173',
        'http://localhost:5174',
        'http://localhost:4173',
    ];
}
/**
 * Check if origin is allowed for CORS
 * Supports wildcard matching for localhost development
 */
function checkCORS(origin) {
    if (!origin)
        return false;
    const allowedOrigins = getAllowedOrigins();
    // Check for exact match or prefix match
    return allowedOrigins.some(allowed => {
        if (allowed === '*')
            return true; // Wildcard
        if (allowed.includes('localhost') && origin.includes('localhost'))
            return true; // Localhost wildcard
        return origin.startsWith(allowed);
    });
}
function createErrorResponse(error, defaultCode = 'INTERNAL_ERROR') {
    if (error instanceof Error) {
        return {
            error: error.message,
            code: defaultCode,
            timestamp: new Date().toISOString(),
        };
    }
    return {
        error: String(error),
        code: defaultCode,
        timestamp: new Date().toISOString(),
    };
}
function getHttpStatusCode(error) {
    if (error instanceof Error) {
        const msg = error.message.toLowerCase();
        if (msg.includes('invalid') || msg.includes('validation'))
            return 400;
        if (msg.includes('not found') || msg.includes('404'))
            return 404;
        if (msg.includes('unauthorized') || msg.includes('forbidden'))
            return 403;
        if (msg.includes('timeout') || msg.includes('rate limit'))
            return 429;
    }
    return 500;
}
// Default feed sources - can be overridden by Firestore configuration
// Curated catalog of P&C insurance industry sources across multiple categories
const DEFAULT_FEED_SOURCES = [
    // ============================================================================
    // NEWS FEEDS (General P&C Insurance Industry News)
    // ============================================================================
    { url: "https://www.insurancejournal.com/rss/news/national/", category: 'news', priority: 1, enabled: true },
    { url: "https://www.insurancejournal.com/rss/news/international/", category: 'news', priority: 2, enabled: true },
    { url: "https://www.claimsjournal.com/rss/", category: 'news', priority: 2, enabled: true },
    { url: "https://www.propertycasualty360.com/feed/", category: 'news', priority: 2, enabled: true },
    { url: "https://www.riskandinsurance.com/feed/", category: 'news', priority: 3, enabled: true },
    { url: "https://www.carriermanagement.com/feed/", category: 'news', priority: 3, enabled: true },
    { url: "https://www.insurancebusinessmag.com/us/rss/", category: 'news', priority: 3, enabled: true },
    { url: "https://www.insurancenewsnet.com/feed/", category: 'news', priority: 3, enabled: true },
    // ============================================================================
    // REGULATORY FEEDS (State DOI, NAIC, Regulatory Bulletins)
    // ============================================================================
    { url: "https://www.naic.org/rss/", category: 'regulatory', priority: 1, enabled: true },
    // Note: Individual state DOI feeds would be added here as they become available
    // Examples: CA DOI, FL DOI, TX DOI, NY DFS, etc.
    // ============================================================================
    // CATASTROPHE FEEDS (Named Storms, Natural Disasters, CAT Events)
    // ============================================================================
    { url: "https://www.insurancejournal.com/rss/news/catastrophes/", category: 'catastrophe', priority: 1, enabled: true },
    // NOAA NHC and NWS feeds for hurricane/severe weather tracking
    // Note: These feeds may require custom parsing due to non-standard RSS formats
    // ============================================================================
    // REINSURANCE FEEDS (Reinsurance Market News & Capacity)
    // ============================================================================
    { url: "https://www.insurancejournal.com/rss/news/reinsurance/", category: 'reinsurance', priority: 2, enabled: true },
    // Artemis/ILS, The Insurer, and other reinsurance-specific sources
    // Note: Some reinsurance sources may require authentication or have limited RSS availability
    // ============================================================================
    // TECHNOLOGY FEEDS (InsurTech, Industry Tech, Digital Transformation)
    // ============================================================================
    { url: "https://www.insurancejournal.com/rss/news/technology/", category: 'technology', priority: 3, enabled: true },
    // Additional tech-focused insurance industry blogs and publications
];
// Runtime cache for feeds (loaded from Firestore on startup)
let cachedFeeds = DEFAULT_FEED_SOURCES;
let feedsCacheTime = 0;
const FEEDS_CACHE_TTL_MS = 60 * 60 * 1000; // 1 hour
/**
 * Load feeds from Firestore, with fallback to defaults
 * Caches results for 1 hour to avoid excessive Firestore reads
 */
async function loadFeedsFromFirestore() {
    const now = Date.now();
    // Return cached feeds if still valid
    if (feedsCacheTime > 0 && now - feedsCacheTime < FEEDS_CACHE_TTL_MS) {
        console.log('[FEEDS] Using cached feeds');
        return cachedFeeds;
    }
    try {
        const snapshot = await db.collection('feeds').get();
        if (snapshot.empty) {
            console.log('[FEEDS] No feeds in Firestore, using defaults');
            cachedFeeds = DEFAULT_FEED_SOURCES;
        }
        else {
            cachedFeeds = snapshot.docs
                .map(doc => doc.data())
                .filter(f => f.enabled);
            console.log(`[FEEDS] Loaded ${cachedFeeds.length} enabled feeds from Firestore`);
        }
        feedsCacheTime = now;
        return cachedFeeds;
    }
    catch (error) {
        console.warn('[FEEDS] Error loading from Firestore, using defaults:', error);
        cachedFeeds = DEFAULT_FEED_SOURCES;
        feedsCacheTime = now;
        return cachedFeeds;
    }
}
// For backward compatibility, extract URLs from default sources
const FEEDS = DEFAULT_FEED_SOURCES.filter(f => f.enabled).map(f => f.url);
/**
 * Initialize feeds collection in Firestore (one-time setup)
 * Seeds from DEFAULT_FEED_SOURCES and can be called manually or on first deploy
 */
async function initializeFeedsCollection() {
    const batch = db.batch();
    for (const feed of DEFAULT_FEED_SOURCES) {
        const feedRef = db.collection('feeds').doc((0, agents_1.hashUrl)(feed.url));
        batch.set(feedRef, Object.assign(Object.assign({}, feed), { createdAt: new Date(), updatedAt: new Date() }), { merge: true });
    }
    await batch.commit();
    console.log(`[FEEDS] Initialized ${DEFAULT_FEED_SOURCES.length} feeds in Firestore`);
    // Clear cache to force reload
    feedsCacheTime = 0;
}
/**
 * Shared logic for refreshing feeds with batch processing
 * Processes articles in batches with retry logic and detailed logging
 */
async function refreshFeedsLogic(apiKey) {
    var _a, _b, _c, _d;
    const client = new openai_1.default({ apiKey });
    const parser = new rss_parser_1.default();
    // Generate unique batch ID for tracking
    const batchId = `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const results = { processed: 0, skipped: 0, errors: 0, feedsProcessed: 0, totalTokens: 0, totalLatencyMs: 0 };
    const batchStartTime = Date.now();
    console.log(`[BATCH ${batchId}] Starting batch refresh...`);
    // Load feeds dynamically from Firestore
    const feeds = await loadFeedsFromFirestore();
    const feedUrls = feeds.map(f => f.url);
    console.log(`[BATCH ${batchId}] Loaded ${feedUrls.length} feeds from Firestore`);
    for (const feedUrl of feedUrls) {
        const feedStartTime = Date.now();
        const feedId = (0, agents_1.hashUrl)(feedUrl);
        // Check circuit breaker before attempting feed
        if (!canAttemptFeed(feedUrl)) {
            console.warn(`[BATCH ${batchId}] [FEED ${feedId}] Skipped (circuit breaker OPEN): ${feedUrl}`);
            results.skipped++;
            continue;
        }
        try {
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] Fetching feed: ${feedUrl}`);
            const feed = await parser.parseURL(feedUrl);
            const feedLatency = Date.now() - feedStartTime;
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] Found ${feed.items.length} items in ${feedLatency}ms: ${feedUrl}`);
            results.feedsProcessed++;
            results.totalLatencyMs += feedLatency;
            recordFeedSuccess(feedUrl); // Update circuit breaker
            updateFeedHealth(feedUrl, true); // Track successful fetch
            // Process articles in batches
            const articles = feed.items.slice(0, BATCH_CONFIG.batchSize);
            for (let i = 0; i < articles.length; i++) {
                const item = articles[i];
                const itemIndex = i + 1;
                let articleStartTime = Date.now();
                try {
                    if (!item.link) {
                        console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Skipping item without link`);
                        results.skipped++;
                        continue;
                    }
                    const url = item.link;
                    const id = (0, agents_1.hashUrl)(url);
                    const docRef = db.collection("articles").doc(id);
                    // Idempotency check: use transaction to ensure atomic read-write
                    const idempotencyKey = `${batchId}_${feedId}_${id}`;
                    const idempotencyRef = db.collection("_idempotency").doc(idempotencyKey);
                    const idempotencyDoc = await idempotencyRef.get();
                    if (idempotencyDoc.exists) {
                        console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Already processed in this batch (idempotent)`);
                        results.skipped++;
                        continue;
                    }
                    // Check if article already exists in database
                    const exists = (await docRef.get()).exists;
                    if (exists) {
                        console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Article already exists`);
                        results.skipped++;
                        continue;
                    }
                    articleStartTime = Date.now();
                    console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Processing: ${url}`);
                    // Extract full content with retry logic
                    let content;
                    let extractRetries = 0;
                    while (extractRetries < BATCH_CONFIG.maxRetries) {
                        try {
                            content = await (0, agents_1.extractArticle)(url);
                            break;
                        }
                        catch (error) {
                            extractRetries++;
                            if (extractRetries < BATCH_CONFIG.maxRetries) {
                                console.log(`[ARTICLE ${itemIndex}/${articles.length}] Extract retry ${extractRetries}/${BATCH_CONFIG.maxRetries}`);
                                await new Promise(resolve => setTimeout(resolve, BATCH_CONFIG.retryDelayMs));
                            }
                            else {
                                throw error;
                            }
                        }
                    }
                    if (!content || !content.text || content.text.length < 100) {
                        console.log(`[ARTICLE ${itemIndex}/${articles.length}] Article text too short (${((_a = content === null || content === void 0 ? void 0 : content.text) === null || _a === void 0 ? void 0 : _a.length) || 0} chars): ${url}`);
                        results.skipped++;
                        continue;
                    }
                    // Summarize & classify
                    let brief = await (0, agents_1.summarizeAndTag)(client, {
                        url,
                        source: (item.creator || feed.title || content.url || "").toString(),
                        publishedAt: item.isoDate || item.pubDate || "",
                        title: content.title,
                        text: content.text,
                    });
                    // Post-parse validation: deduplicate citations, validate URLs
                    brief = (0, agents_1.validateAndCleanArticle)(brief);
                    // RAG Quality Check: Ensure article is suitable for retrieval
                    const ragQuality = (0, agents_1.checkRAGQuality)(brief);
                    if (!ragQuality.isQuality) {
                        console.warn(`[ARTICLE ${itemIndex}/${articles.length}] RAG quality check failed (score: ${ragQuality.score}/100):`, ragQuality.issues);
                        // Log but don't skip - store with quality flag for filtering
                    }
                    // Entity normalization (always set, with defaults)
                    const regionsNormalized = ((_b = brief.tags) === null || _b === void 0 ? void 0 : _b.regions) && brief.tags.regions.length > 0
                        ? (0, agents_1.normalizeRegions)(brief.tags.regions)
                        : [];
                    const companiesNormalized = ((_c = brief.tags) === null || _c === void 0 ? void 0 : _c.companies) && brief.tags.companies.length > 0
                        ? (0, agents_1.normalizeCompanies)(brief.tags.companies)
                        : [];
                    // Verify normalization is always set
                    if (!Array.isArray(regionsNormalized)) {
                        console.warn(`[ARTICLE ${itemIndex}/${articles.length}] regionsNormalized is not an array, defaulting to []`);
                    }
                    if (!Array.isArray(companiesNormalized)) {
                        console.warn(`[ARTICLE ${itemIndex}/${articles.length}] companiesNormalized is not an array, defaulting to []`);
                    }
                    // Deduplication: canonical URL and content hash
                    const canonicalUrl = (0, agents_1.getCanonicalUrl)(url, content.html);
                    const contentHash = (0, agents_1.computeContentHash)(content.text);
                    // Check for duplicates by content hash
                    const duplicateCheck = await db.collection('articles')
                        .where('contentHash', '==', contentHash)
                        .limit(1)
                        .get();
                    let clusterId = contentHash; // Use content hash as cluster ID
                    if (!duplicateCheck.empty) {
                        // Duplicate found - use existing cluster ID
                        const existingDoc = duplicateCheck.docs[0];
                        clusterId = existingDoc.data().clusterId || contentHash;
                        console.log(`[ARTICLE ${itemIndex}/${articles.length}] Duplicate detected (cluster: ${clusterId}): ${brief.title}`);
                    }
                    // Regulatory detection: check if source is DOI or has regulatory keywords
                    const regulatory = (0, agents_1.isRegulatorySource)(url, brief.source) ||
                        (((_d = brief.tags) === null || _d === void 0 ? void 0 : _d.regulations) && brief.tags.regulations.length > 0);
                    // Catastrophe detection: storm names
                    const stormName = (0, agents_1.detectStormName)(`${brief.title} ${content.text.slice(0, 1000)}`);
                    // Build an embedding for Ask‑the‑Brief
                    const emb = await (0, agents_1.embedForRAG)(client, `${brief.title}\n${brief.bullets5.join("\n")}\n${Object.values(brief.whyItMatters).join("\n")}`);
                    // Calculate SmartScore v3 (enhanced)
                    const smartScore = (0, agents_1.calculateSmartScore)({
                        publishedAt: item.isoDate || item.pubDate || "",
                        impactScore: brief.impactScore,
                        impactBreakdown: brief.impactBreakdown,
                        tags: brief.tags,
                        regulatory,
                        riskPulse: brief.riskPulse,
                        stormName,
                    });
                    // AI-driven scoring for P&C professionals (v3 enhanced)
                    const aiScore = await (0, agents_1.scoreArticleWithAI)(client, {
                        title: brief.title,
                        bullets5: brief.bullets5,
                        whyItMatters: brief.whyItMatters,
                        tags: brief.tags,
                        impactScore: brief.impactScore,
                        publishedAt: item.isoDate || item.pubDate,
                        regulatory,
                        stormName,
                        riskPulse: brief.riskPulse,
                        sentiment: brief.sentiment,
                    });
                    // Store article metadata (without embedding for performance)
                    await docRef.set(Object.assign(Object.assign({}, brief), { publishedAt: item.isoDate || item.pubDate || "", createdAt: new Date(), smartScore,
                        aiScore, ragQualityScore: ragQuality.score, ragQualityIssues: ragQuality.issues, regionsNormalized,
                        companiesNormalized,
                        canonicalUrl,
                        contentHash,
                        clusterId,
                        regulatory, stormName: stormName || null, batchProcessedAt: new Date() }));
                    // Store embedding in separate collection for performance
                    await db.collection("article_embeddings").doc(id).set({
                        embedding: emb,
                        articleId: id,
                        createdAt: new Date(),
                    });
                    // Record idempotency key to prevent reprocessing in same batch
                    // TTL: 24 hours (idempotency window)
                    await idempotencyRef.set({
                        batchId,
                        feedUrl,
                        articleUrl: url,
                        articleId: id,
                        processedAt: new Date(),
                        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
                    });
                    // Check link health (B2 - Link Health Checking)
                    // Perform lightweight HEAD check to verify article URL is accessible
                    const linkOk = await checkLinkHealth(canonicalUrl || url);
                    // Update article with link health status
                    await docRef.update({
                        linkOk,
                        lastCheckedAt: new Date(),
                    });
                    const articleLatency = Date.now() - articleStartTime;
                    results.totalLatencyMs += articleLatency;
                    console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Successfully processed in ${articleLatency}ms (linkOk: ${linkOk}): ${brief.title}`);
                    results.processed++;
                }
                catch (error) {
                    const articleLatency = Date.now() - articleStartTime;
                    results.totalLatencyMs += articleLatency;
                    console.error(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Error after ${articleLatency}ms:`, error);
                    results.errors++;
                }
            }
            const feedDuration = Date.now() - feedStartTime;
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] Completed in ${feedDuration}ms`);
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            console.error(`[BATCH ${batchId}] [FEED ${feedId}] Error fetching feed:`, errorMessage);
            recordFeedFailure(feedUrl); // Update circuit breaker
            updateFeedHealth(feedUrl, false, errorMessage); // Track failed fetch
            results.errors++;
            // Continue to next feed instead of failing entire batch
        }
    }
    const totalDuration = Date.now() - batchStartTime;
    console.log(`[BATCH ${batchId}] SUMMARY | Duration: ${totalDuration}ms | Feeds: ${results.feedsProcessed} | Processed: ${results.processed} | Skipped: ${results.skipped} | Errors: ${results.errors} | AvgLatency: ${results.processed > 0 ? Math.round(results.totalLatencyMs / results.processed) : 0}ms`);
    return results;
}
/**
 * Batch refresh configuration
 * Defines the recurring schedule for news article batch processing
 */
const BATCH_CONFIG = {
    // Primary batch: Every 60 minutes (hourly)
    interval: 60,
    timeZone: "America/New_York",
    // Batch size: Process up to 50 articles per batch
    batchSize: 50,
    // Retry configuration
    maxRetries: 3,
    retryDelayMs: 5000,
};
const circuitBreakers = new Map();
const CIRCUIT_BREAKER_THRESHOLD = 5; // Failures before opening
const CIRCUIT_BREAKER_TIMEOUT_MS = 5 * 60 * 1000; // 5 minutes before half-open
/**
 * Circuit breaker pattern for feed resilience
 * Prevents cascading failures by temporarily disabling problematic feeds
 */
function getCircuitBreakerState(feedUrl) {
    if (!circuitBreakers.has(feedUrl)) {
        circuitBreakers.set(feedUrl, {
            url: feedUrl,
            state: 'CLOSED',
            failureCount: 0,
            lastFailureTime: 0,
            successCount: 0,
        });
    }
    return circuitBreakers.get(feedUrl);
}
function canAttemptFeed(feedUrl) {
    const breaker = getCircuitBreakerState(feedUrl);
    const now = Date.now();
    if (breaker.state === 'CLOSED') {
        return true; // Normal operation
    }
    if (breaker.state === 'OPEN') {
        // Check if timeout has elapsed to transition to HALF_OPEN
        if (now - breaker.lastFailureTime > CIRCUIT_BREAKER_TIMEOUT_MS) {
            breaker.state = 'HALF_OPEN';
            breaker.failureCount = 0;
            console.log(`[CIRCUIT BREAKER] ${feedUrl} transitioning to HALF_OPEN`);
            return true;
        }
        return false; // Still open, skip this feed
    }
    // HALF_OPEN state - allow one attempt
    return true;
}
function recordFeedSuccess(feedUrl) {
    const breaker = getCircuitBreakerState(feedUrl);
    breaker.failureCount = 0;
    breaker.successCount++;
    if (breaker.state === 'HALF_OPEN') {
        breaker.state = 'CLOSED';
        console.log(`[CIRCUIT BREAKER] ${feedUrl} recovered to CLOSED`);
    }
}
function recordFeedFailure(feedUrl) {
    const breaker = getCircuitBreakerState(feedUrl);
    breaker.failureCount++;
    breaker.lastFailureTime = Date.now();
    if (breaker.failureCount >= CIRCUIT_BREAKER_THRESHOLD && breaker.state !== 'OPEN') {
        breaker.state = 'OPEN';
        console.warn(`[CIRCUIT BREAKER] ${feedUrl} opened after ${breaker.failureCount} failures`);
    }
}
/**
 * Check if a URL is accessible (B2 - Link Health Checking)
 * Performs a lightweight HEAD request to verify link availability
 * Returns true if status is 2xx or 3xx, false otherwise
 */
async function checkLinkHealth(url) {
    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
        const response = await fetch(url, {
            method: "HEAD",
            redirect: "follow",
            signal: controller.signal,
            headers: {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            },
        });
        clearTimeout(timeoutId);
        return response.ok || (response.status >= 300 && response.status < 400);
    }
    catch (error) {
        console.warn(`[LINK HEALTH] Failed to check ${url}:`, error instanceof Error ? error.message : String(error));
        return false;
    }
}
/**
 * Update feed health metrics in Firestore
 */
async function updateFeedHealth(feedUrl, success, error) {
    try {
        const healthRef = db.collection('feed_health').doc((0, agents_1.hashUrl)(feedUrl));
        const healthDoc = await healthRef.get();
        const health = healthDoc.exists
            ? healthDoc.data()
            : {
                url: feedUrl,
                successCount: 0,
                failureCount: 0,
                updatedAt: new Date(),
            };
        if (success) {
            health.successCount++;
            health.lastSuccessAt = new Date();
        }
        else {
            health.failureCount++;
            health.lastFailureAt = new Date();
            if (error)
                health.lastError = error;
        }
        health.updatedAt = new Date();
        await healthRef.set(health);
        // Log warning if failure rate > 50%
        const total = health.successCount + health.failureCount;
        if (total > 5 && health.failureCount / total > 0.5) {
            console.warn(`[FEED HEALTH WARNING] ${feedUrl} has high failure rate: ${health.failureCount}/${total}`);
        }
    }
    catch (e) {
        console.error('[FEED HEALTH ERROR] Failed to update feed health:', e);
        // Don't throw - health tracking failure shouldn't break feed processing
    }
}
/**
 * Enhanced refresh logic with batch processing and detailed logging
 */
async function refreshFeedsWithBatching(apiKey) {
    const startTime = Date.now();
    console.log(`[BATCH START] Initiating news feed batch refresh at ${new Date().toISOString()}`);
    console.log(`[BATCH CONFIG] Interval: ${BATCH_CONFIG.interval}min, BatchSize: ${BATCH_CONFIG.batchSize}, MaxRetries: ${BATCH_CONFIG.maxRetries}`);
    try {
        const results = await refreshFeedsLogic(apiKey);
        const duration = Date.now() - startTime;
        console.log(`[BATCH COMPLETE] Refresh completed in ${duration}ms`);
        console.log(`[BATCH RESULTS] Processed: ${results.processed}, Skipped: ${results.skipped}, Errors: ${results.errors}`);
        // Log batch completion to Firestore for monitoring
        await logBatchCompletion({
            timestamp: new Date(),
            duration,
            processed: results.processed,
            skipped: results.skipped,
            errors: results.errors,
            status: 'success',
        });
        return results;
    }
    catch (error) {
        const duration = Date.now() - startTime;
        console.error(`[BATCH ERROR] Batch refresh failed after ${duration}ms:`, error);
        // Log batch failure to Firestore for monitoring
        await logBatchCompletion({
            timestamp: new Date(),
            duration,
            processed: 0,
            skipped: 0,
            errors: 1,
            status: 'failed',
            errorMessage: error instanceof Error ? error.message : 'Unknown error',
        });
        throw error;
    }
}
/**
 * Log batch completion metrics to Firestore for monitoring and analytics
 */
async function logBatchCompletion(metrics) {
    try {
        await db.collection('batch_logs').add(Object.assign(Object.assign({}, metrics), { batchInterval: BATCH_CONFIG.interval, batchSize: BATCH_CONFIG.batchSize }));
    }
    catch (error) {
        console.error('[BATCH LOG ERROR] Failed to log batch metrics:', error);
        // Don't throw - logging failure shouldn't fail the batch
    }
}
// 1) Scheduled gatherer (hourly batch refresh)
exports.refreshFeeds = (0, scheduler_1.onSchedule)({ schedule: `every ${BATCH_CONFIG.interval} minutes`, timeZone: BATCH_CONFIG.timeZone, secrets: [OPENAI_API_KEY] }, async () => {
    await refreshFeedsWithBatching(OPENAI_API_KEY.value());
});
// 1a) Initialize feeds collection (one-time setup)
exports.initializeFeeds = (0, https_1.onRequest)({ cors: false }, async (req, res) => {
    try {
        // CORS check for admin endpoints
        const origin = req.headers.origin;
        if (!checkCORS(origin)) {
            res.status(403).json({ error: "Forbidden: Invalid origin" });
            return;
        }
        res.set('Access-Control-Allow-Origin', origin);
        console.log("[INIT FEEDS] Initializing feeds collection");
        await initializeFeedsCollection();
        res.json({
            success: true,
            message: "Feeds collection initialized",
            feedCount: DEFAULT_FEED_SOURCES.length,
            timestamp: new Date().toISOString(),
        });
    }
    catch (error) {
        console.error('[INIT FEEDS ERROR]', error);
        res.status(500).json({
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error',
        });
    }
});
// 1b) Manual trigger for batch refresh (HTTP callable - restricted)
exports.refreshFeedsManual = (0, https_1.onRequest)({ cors: false, secrets: [OPENAI_API_KEY], timeoutSeconds: 540 }, async (req, res) => {
    try {
        // CORS check for admin endpoints
        const origin = req.headers.origin;
        if (!checkCORS(origin)) {
            res.status(403).json({ error: "Forbidden: Invalid origin" });
            return;
        }
        res.set('Access-Control-Allow-Origin', origin);
        console.log("[MANUAL TRIGGER] Feed refresh initiated via HTTP request");
        const results = await refreshFeedsWithBatching(OPENAI_API_KEY.value());
        res.json({
            success: true,
            message: "Batch feed refresh complete",
            batchConfig: BATCH_CONFIG,
            results,
            timestamp: new Date().toISOString(),
        });
    }
    catch (error) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const err = error;
        console.error("[MANUAL TRIGGER ERROR] Error in refreshFeedsManual:", err);
        res.status(500).json({
            success: false,
            error: err.message || "Unknown error",
            stack: err.stack,
            timestamp: new Date().toISOString(),
        });
    }
});
// 1c) Test single article processing
exports.testSingleArticle = (0, https_1.onRequest)({ cors: true, secrets: [OPENAI_API_KEY] }, async (_req, res) => {
    var _a, _b;
    try {
        console.log("[TEST] Single article processing test initiated");
        const client = new openai_1.default({ apiKey: OPENAI_API_KEY.value() });
        const parser = new rss_parser_1.default();
        const feedUrl = FEEDS[0];
        console.log(`[TEST] Fetching feed: ${feedUrl}`);
        const feed = await parser.parseURL(feedUrl);
        console.log(`[TEST] Found ${feed.items.length} items`);
        if (feed.items.length === 0) {
            res.json({ error: "No items in feed", timestamp: new Date().toISOString() });
            return;
        }
        const item = feed.items[0];
        const url = item.link;
        console.log(`[TEST] Processing: ${url}`);
        // Extract
        const content = await (0, agents_1.extractArticle)(url);
        console.log(`[TEST] Extracted ${((_a = content.text) === null || _a === void 0 ? void 0 : _a.length) || 0} characters`);
        // Summarize
        let brief = await (0, agents_1.summarizeAndTag)(client, {
            url,
            source: (item.creator || feed.title || "").toString(),
            publishedAt: item.isoDate || item.pubDate || "",
            title: content.title,
            text: content.text,
        });
        // Post-parse validation: deduplicate citations, validate URLs
        brief = (0, agents_1.validateAndCleanArticle)(brief);
        console.log(`[TEST] Summarized: ${brief.title}`);
        res.json({
            success: true,
            batchConfig: BATCH_CONFIG,
            article: {
                url,
                extractedLength: ((_b = content.text) === null || _b === void 0 ? void 0 : _b.length) || 0,
                brief,
            },
            timestamp: new Date().toISOString(),
        });
    }
    catch (error) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const err = error;
        console.error("Error in testSingleArticle:", err);
        res.status(500).json({
            success: false,
            error: err.message || "Unknown error",
            stack: err.stack,
        });
    }
});
// 4) Feed Health Report (monitoring endpoint)
exports.feedHealthReport = (0, https_1.onRequest)({ cors: true }, async (_req, res) => {
    try {
        // Fetch all feed health records from Firestore
        const healthSnapshot = await db.collection('feed_health').get();
        const healthData = healthSnapshot.docs.map(doc => {
            var _a, _b, _c, _d, _e, _f;
            const health = doc.data();
            const total = health.successCount + health.failureCount;
            // Handle Firestore Timestamp or Date
            const lastSuccess = health.lastSuccessAt instanceof Date
                ? health.lastSuccessAt.toISOString()
                : (_c = (_b = (_a = health.lastSuccessAt) === null || _a === void 0 ? void 0 : _a.toDate) === null || _b === void 0 ? void 0 : _b.call(_a)) === null || _c === void 0 ? void 0 : _c.toISOString();
            const lastFailure = health.lastFailureAt instanceof Date
                ? health.lastFailureAt.toISOString()
                : (_f = (_e = (_d = health.lastFailureAt) === null || _d === void 0 ? void 0 : _d.toDate) === null || _e === void 0 ? void 0 : _e.call(_d)) === null || _f === void 0 ? void 0 : _f.toISOString();
            return {
                url: health.url,
                successCount: health.successCount,
                failureCount: health.failureCount,
                successRate: total > 0 ? (health.successCount / total * 100).toFixed(2) + '%' : 'N/A',
                lastSuccess,
                lastFailure,
                lastError: health.lastError,
                status: total === 0 ? 'UNKNOWN' : (health.failureCount / total > 0.5 ? 'UNHEALTHY' : 'HEALTHY'),
            };
        });
        res.json({
            success: true,
            timestamp: new Date().toISOString(),
            totalFeeds: FEEDS.length,
            monitoredFeeds: healthData.length,
            feeds: healthData,
        });
    }
    catch (error) {
        console.error('[FEED HEALTH ERROR]', error);
        res.status(500).json({
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error',
        });
    }
});
/**
 * Cosine similarity helper
 */
function cosineSimilarity(a, b) {
    const dot = a.reduce((s, v, i) => s + v * b[i], 0);
    const ma = Math.sqrt(a.reduce((s, v) => s + v * v, 0));
    const mb = Math.sqrt(b.reduce((s, v) => s + v * v, 0));
    return dot / (ma * mb);
}
/**
 * Maximal Marginal Relevance (MMR) re-ranking
 * Balances relevance with diversity to avoid redundant results
 */
function mmrRerank(items, topK, lambda = 0.7) {
    const selected = [];
    const remaining = [...items];
    while (selected.length < topK && remaining.length > 0) {
        let bestIdx = 0;
        let bestScore = -Infinity;
        for (let i = 0; i < remaining.length; i++) {
            const relevance = remaining[i].score;
            // Diversity: penalize items similar to already-selected items
            let diversity = 1.0;
            if (selected.length > 0) {
                const maxSimilarity = Math.max(...selected.map(s => cosineSimilarity(remaining[i].it.embedding, s.it.embedding)));
                diversity = 1.0 - maxSimilarity;
            }
            const mmrScore = lambda * relevance + (1 - lambda) * diversity;
            if (mmrScore > bestScore) {
                bestScore = mmrScore;
                bestIdx = i;
            }
        }
        const [selected_item] = remaining.splice(bestIdx, 1);
        selected.push(Object.assign(Object.assign({}, selected_item), { mmrScore: bestScore }));
    }
    return selected;
}
/**
 * Apply cluster diversity: limit to 1 article per clusterId
 */
function applyClusterDiversity(items, maxPerCluster = 1) {
    const clusterMap = new Map();
    for (const item of items) {
        const clusterId = (item.it.clusterId || item.it.id);
        if (!clusterMap.has(clusterId)) {
            clusterMap.set(clusterId, []);
        }
        clusterMap.get(clusterId).push(item);
    }
    const result = [];
    for (const cluster of clusterMap.values()) {
        // Take top N from each cluster (sorted by score)
        result.push(...cluster.sort((a, b) => { var _a, _b; return ((_a = b.mmrScore) !== null && _a !== void 0 ? _a : b.score) - ((_b = a.mmrScore) !== null && _b !== void 0 ? _b : a.score); }).slice(0, maxPerCluster));
    }
    return result;
}
/**
 * Apply recency boost: recent articles get higher scores
 */
function applyRecencyBoost(items, boostFactor = 0.1) {
    const now = Date.now();
    const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days
    return items.map(item => {
        var _a;
        let createdAt;
        const rawDate = item.it.createdAt;
        if (rawDate instanceof Date) {
            createdAt = rawDate;
        }
        else if (typeof rawDate === "object" && rawDate !== null && "toDate" in rawDate) {
            createdAt = rawDate.toDate();
        }
        else if (typeof rawDate === "number") {
            createdAt = new Date(rawDate);
        }
        else {
            createdAt = new Date();
        }
        const age = now - createdAt.getTime();
        const recencyScore = Math.max(0, 1 - age / maxAge);
        const boostedScore = ((_a = item.mmrScore) !== null && _a !== void 0 ? _a : item.score) + recencyScore * boostFactor;
        return Object.assign(Object.assign({}, item), { recencyBoostedScore: boostedScore });
    });
}
/**
 * Simple BM25-style keyword scoring for hybrid retrieval (D2)
 * Scores articles based on keyword matches in title, bullets, and tags
 */
function scoreByKeywords(query, article) {
    var _a, _b, _c;
    const queryTerms = query.toLowerCase().split(/\s+/).filter(t => t.length > 2);
    if (queryTerms.length === 0)
        return 0;
    let score = 0;
    const text = [
        article.title || "",
        (article.bullets5 || []).join(" "),
        (((_a = article.tags) === null || _a === void 0 ? void 0 : _a.trends) || []).join(" "),
        (((_b = article.tags) === null || _b === void 0 ? void 0 : _b.regulations) || []).join(" "),
        (((_c = article.tags) === null || _c === void 0 ? void 0 : _c.perils) || []).join(" "),
    ].join(" ").toLowerCase();
    for (const term of queryTerms) {
        const matches = (text.match(new RegExp(term, "g")) || []).length;
        score += matches * 10; // Weight each match
    }
    return score;
}
/**
 * Promote regulatory and CAT documents when relevant (D2)
 */
function promoteRegulatoryAndCAT(items, query) {
    const regulatoryKeywords = ["regulatory", "naic", "doi", "bulletin", "rule", "regulation", "compliance"];
    const catKeywords = ["hurricane", "storm", "catastrophe", "cat", "disaster", "wildfire", "earthquake"];
    const queryLower = query.toLowerCase();
    const isRegulatoryQuery = regulatoryKeywords.some(kw => queryLower.includes(kw));
    const isCATQuery = catKeywords.some(kw => queryLower.includes(kw));
    return items.map(item => {
        let boost = 1.0;
        if (isRegulatoryQuery && item.it.regulatory) {
            boost *= 1.5; // 50% boost for regulatory articles
        }
        if (isCATQuery && item.it.stormName) {
            boost *= 1.5; // 50% boost for CAT articles
        }
        return Object.assign(Object.assign({}, item), { score: item.score * boost });
    });
}
// 2) Ask‑the‑Brief (RAG with hybrid retrieval, MMR, and cluster diversity)
exports.askBrief = (0, https_1.onRequest)({ cors: false, secrets: [OPENAI_API_KEY] }, async (req, res) => {
    var _a, _b, _c, _d, _e;
    const startTime = Date.now();
    try {
        // CORS check
        const origin = req.headers.origin;
        if (!checkCORS(origin)) {
            res.status(403).json(createErrorResponse('Forbidden: Invalid origin', 'CORS_ERROR'));
            return;
        }
        res.set('Access-Control-Allow-Origin', origin);
        res.set('Access-Control-Allow-Methods', 'GET, POST');
        res.set('Access-Control-Allow-Headers', 'Content-Type');
        // Handle preflight
        if (req.method === 'OPTIONS') {
            res.status(204).send('');
            return;
        }
        // Rate limiting (Firestore-backed)
        const ip = ((_a = req.headers['x-forwarded-for']) === null || _a === void 0 ? void 0 : _a.toString().split(',')[0]) || req.ip || 'unknown';
        const rateLimitOk = await checkRateLimit(ip);
        if (!rateLimitOk) {
            res.status(429).json(createErrorResponse('Rate limit exceeded. Please try again later.', 'RATE_LIMIT_EXCEEDED'));
            return;
        }
        // Input validation and sanitization
        const rawQuery = (req.query.q || ((_b = req.body) === null || _b === void 0 ? void 0 : _b.q) || "").toString();
        const q = rawQuery.replace(/<[^>]*>/g, '').slice(0, 500); // Strip HTML, limit length
        if (!q || q.trim().length < 3) {
            res.status(400).json(createErrorResponse('Query required (min 3 characters)', 'INVALID_QUERY'));
            return;
        }
        const client = new openai_1.default({ apiKey: OPENAI_API_KEY.value() });
        // Fetch recent articles (keep it simple; Firestore has no native vector search)
        const snap = await db.collection("articles").orderBy("createdAt", "desc").limit(500).get();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const articles = snap.docs.map((d) => (Object.assign({ id: d.id }, d.data())));
        if (articles.length === 0) {
            res.json({
                answerText: "No articles found in context.",
                bullets: [],
                sources: [],
                related: [],
                usedArticles: [],
                highlights: [],
                latencyMs: Date.now() - startTime,
            });
            return;
        }
        // Fetch embeddings from separate collection
        const embeddingSnap = await db.collection("article_embeddings").where("articleId", "in", articles.map(a => a.id)).get();
        const embeddingMap = new Map(embeddingSnap.docs.map(d => [d.data().articleId, d.data().embedding]));
        // Merge embeddings with articles
        const items = articles
            .filter(a => embeddingMap.has(a.id)) // Only include articles with embeddings
            .map(a => (Object.assign(Object.assign({}, a), { embedding: embeddingMap.get(a.id) })));
        if (items.length === 0) {
            res.json({
                answerText: "No articles with embeddings found in context.",
                bullets: [],
                sources: [],
                related: [],
                usedArticles: [],
                highlights: [],
                latencyMs: Date.now() - startTime,
            });
            return;
        }
        // Embed the query (MUST match stored embedding dimensions: 512)
        const qEmb = (await client.embeddings.create({
            model: "text-embedding-3-small",
            input: q,
            dimensions: 512,
        })).data[0].embedding;
        // Step 1: Hybrid retrieval - combine semantic and keyword scoring (D2)
        const keywordScored = items.map((it) => ({
            it,
            semanticScore: cosineSimilarity(qEmb, it.embedding),
            keywordScore: scoreByKeywords(q, it),
        }));
        // Normalize scores to 0-1 range
        const maxKeywordScore = Math.max(...keywordScored.map(x => x.keywordScore), 1);
        const hybridScored = keywordScored.map(x => (Object.assign(Object.assign({}, x), { score: (x.semanticScore * 0.6) + ((x.keywordScore / maxKeywordScore) * 0.4) })));
        // Step 2: Promote regulatory and CAT documents (D2)
        const promoted = promoteRegulatoryAndCAT(hybridScored, q);
        // Step 3: Cosine similarity ranking (top 20 for MMR)
        const cosineSimilarityRanked = promoted
            .sort((a, b) => b.score - a.score)
            .slice(0, 20);
        // Step 4: MMR re-ranking for diversity
        const mmrRanked = mmrRerank(cosineSimilarityRanked, 12, 0.7);
        // Step 5: Apply cluster diversity (max 1 per cluster)
        const diverseRanked = applyClusterDiversity(mmrRanked, 1);
        // Step 6: Apply recency boost
        const finalRanked = applyRecencyBoost(diverseRanked, 0.1)
            .sort((a, b) => { var _a, _b, _c, _d; return ((_b = (_a = b.recencyBoostedScore) !== null && _a !== void 0 ? _a : b.mmrScore) !== null && _b !== void 0 ? _b : b.score) - ((_d = (_c = a.recencyBoostedScore) !== null && _c !== void 0 ? _c : a.mmrScore) !== null && _d !== void 0 ? _d : a.score); })
            .slice(0, 8);
        // Build context from top results
        const context = finalRanked.map((r) => {
            const title = r.it.title;
            const bullets = r.it.bullets5 || [];
            const whyItMatters = r.it.whyItMatters || {};
            const canonicalUrl = r.it.canonicalUrl;
            const url = r.it.url;
            return `TITLE: ${title}\nBULLETS:\n- ${bullets.join("\n- ")}\nWHY:\n${Object.entries(whyItMatters).map(([k, v]) => `${k.toUpperCase()}: ${v}`).join("\n")}\nURL: ${canonicalUrl || url}`;
        }).join("\n\n---\n\n");
        // Generate answer with structured output
        const answer = await client.chat.completions.create({
            model: "gpt-4o-mini",
            temperature: 0.2,
            max_tokens: 500,
            messages: [
                {
                    role: "system",
                    content: "You are a P&C insurance analyst. Answer using ONLY the provided context. " +
                        "If information is not found, respond with 'Not found in current context.' " +
                        "Provide: 1) Short answer (1-2 sentences), 2) 3 bullet-point rationale, 3) Inline citations with [URL] format.",
                },
                { role: "user", content: `Question: ${q}\n\nContext:\n${context}` },
            ],
        });
        const answerText = (_e = (_d = (_c = answer.choices[0]) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.content) !== null && _e !== void 0 ? _e : "Not found in current context.";
        // GUARDRAIL: Extract URLs from answer and validate against source articles
        // This prevents hallucinated links by only allowing URLs from the context
        const validArticleUrls = new Set(finalRanked.map(r => {
            const canonicalUrl = r.it.canonicalUrl;
            const url = r.it.url;
            return (canonicalUrl || url).toLowerCase();
        }));
        // Extract URLs from answer text (both [URL] format and plain URLs)
        const urlPattern = /\[?(https?:\/\/[^\s[\]]+)\]?/gi;
        const extractedUrls = new Set();
        let match;
        while ((match = urlPattern.exec(answerText)) !== null) {
            const url = match[1].toLowerCase();
            // Only include URLs that are in our source articles
            if (validArticleUrls.has(url)) {
                extractedUrls.add(url);
            }
            else {
                console.warn(`[ASK BRIEF GUARDRAIL] Rejected hallucinated URL: ${url}`);
            }
        }
        // Build citations from validated URLs
        const citations = finalRanked
            .filter(r => {
            const canonicalUrl = r.it.canonicalUrl;
            const url = r.it.url;
            return extractedUrls.has((canonicalUrl || url).toLowerCase());
        })
            .map(r => ({
            title: r.it.title,
            url: r.it.canonicalUrl || r.it.url,
        }));
        // If no citations were extracted, include all source articles as fallback
        if (citations.length === 0) {
            citations.push(...finalRanked.map(r => ({
                title: r.it.title,
                url: r.it.canonicalUrl || r.it.url,
            })));
        }
        const latencyMs = Date.now() - startTime;
        console.log(`[ASK BRIEF] Query: "${q}" | Results: ${finalRanked.length} | Latency: ${latencyMs}ms`);
        // D1: Structured JSON output with enhanced fields
        res.json({
            answerText,
            bullets: finalRanked.slice(0, 3).map(r => (r.it.bullets5 || [])[0] || ''),
            sources: citations,
            related: finalRanked.slice(0, 5).map(r => ({
                title: r.it.title,
                url: r.it.canonicalUrl || r.it.url,
                clusterId: r.it.clusterId,
            })),
            usedArticles: finalRanked.map(r => r.it.id),
            highlights: finalRanked.slice(0, 3).map(r => ({
                quote: r.it.leadQuote || (r.it.bullets5 || [])[0] || '',
                url: r.it.canonicalUrl || r.it.url,
            })),
            latencyMs,
        });
    }
    catch (e) {
        const statusCode = getHttpStatusCode(e);
        const errorResponse = createErrorResponse(e, 'ASK_BRIEF_ERROR');
        console.error('[ASK BRIEF ERROR]', errorResponse);
        res.status(statusCode).json(errorResponse);
    }
});
/**
 * Reader View Endpoint (B1)
 *
 * Fetches an article URL and returns sanitized HTML for display in a Quick Read modal.
 * Strips tracking, injects canonical source attribution, and returns safe HTML.
 *
 * Query Parameters:
 * - url: The article URL to fetch and sanitize
 *
 * Response:
 * {
 *   title: string,
 *   byline?: string,
 *   published?: string,
 *   mainImage?: string,
 *   html: string (sanitized)
 * }
 */
exports.readerView = (0, https_1.onRequest)({ cors: true, timeoutSeconds: 30 }, async (req, res) => {
    try {
        const startTime = Date.now();
        const url = req.query.url;
        if (!url) {
            res.status(400).json({ error: "Missing 'url' query parameter" });
            return;
        }
        // Validate URL format
        try {
            new URL(url);
        }
        catch (_a) {
            res.status(400).json({ error: "Invalid URL format" });
            return;
        }
        console.log(`[READER VIEW] Fetching: ${url}`);
        // Extract article using existing utility
        const content = await (0, agents_1.extractArticle)(url);
        if (!content || !content.html) {
            res.status(404).json({ error: "Could not extract article content" });
            return;
        }
        // Sanitize HTML: remove scripts, tracking pixels, and dangerous elements
        const sanitizedHtml = sanitizeHtml(content.html);
        // Inject canonical source attribution at the end
        const attributedHtml = `${sanitizedHtml}
<div style="margin-top: 2rem; padding-top: 1rem; border-top: 1px solid #e5e7eb; font-size: 0.875rem; color: #6b7280;">
  <p><strong>Source:</strong> <a href="${url}" target="_blank" rel="noopener noreferrer">${new URL(url).hostname}</a></p>
  <p style="margin-top: 0.5rem; font-size: 0.75rem; color: #9ca3af;">Read via CarrierSignal Quick Read</p>
</div>`;
        const latencyMs = Date.now() - startTime;
        res.json({
            title: content.title || "Article",
            byline: content.author,
            mainImage: content.mainImage,
            html: attributedHtml,
            latencyMs,
        });
    }
    catch (error) {
        console.error('[READER VIEW ERROR]', error);
        res.status(500).json({
            error: error instanceof Error ? error.message : "Failed to fetch article",
        });
    }
});
/**
 * Sanitize HTML for safe display
 * Removes scripts, tracking pixels, and dangerous elements
 * Preserves formatting and links
 */
function sanitizeHtml(html) {
    // Remove script tags and content
    let sanitized = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "");
    // Remove style tags and content
    sanitized = sanitized.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, "");
    // Remove tracking pixels and iframes
    sanitized = sanitized.replace(/<img[^>]*(?:tracking|pixel|beacon)[^>]*>/gi, "");
    sanitized = sanitized.replace(/<iframe[^>]*>/gi, "");
    // Remove event handlers
    sanitized = sanitized.replace(/\s*on\w+\s*=\s*["'][^"']*["']/gi, "");
    sanitized = sanitized.replace(/\s*on\w+\s*=\s*[^\s>]*/gi, "");
    // Remove meta tags except for basic ones
    sanitized = sanitized.replace(/<meta[^>]*(?:tracking|analytics|facebook|twitter)[^>]*>/gi, "");
    // Remove noscript tags
    sanitized = sanitized.replace(/<noscript[^>]*>[\s\S]*?<\/noscript>/gi, "");
    // Remove comments
    sanitized = sanitized.replace(/<!--[\s\S]*?-->/g, "");
    return sanitized;
}
//# sourceMappingURL=index.js.map


================================================================================
FILE: functions/lib/ingestion/deduplication.d.ts
================================================================================

/**
 * Deduplication Service
 * Detects and handles duplicate articles using multiple strategies
 */
import { DuplicateCheckResult } from './types';
export declare class DeduplicationService {
    private readonly SIMILARITY_THRESHOLD;
    private urlHashes;
    /**
     * Generate content hash for fast duplicate detection
     */
    generateContentHash(content: string): string;
    /**
     * Generate URL hash for quick lookups
     */
    generateUrlHash(url: string): string;
    /**
     * Normalize URL for comparison
     */
    normalizeUrl(url: string): string;
    /**
     * Check if URL is duplicate
     */
    isUrlDuplicate(url: string, existingUrls: string[]): DuplicateCheckResult;
    /**
     * Calculate Levenshtein distance for string similarity
     */
    private levenshteinDistance;
    /**
     * Check if titles are similar
     */
    isTitleDuplicate(title1: string, title2: string): DuplicateCheckResult;
    /**
     * Extract key phrases from content for semantic comparison
     */
    private extractKeyPhrases;
    /**
     * Calculate semantic similarity between two content pieces
     */
    private calculateSemanticSimilarity;
    /**
     * Check if content is duplicate using multiple strategies
     */
    isContentDuplicate(url: string, title: string, content: string, existingArticles: Array<{
        url: string;
        title: string;
        content?: string;
    }>): DuplicateCheckResult;
    /**
     * Clear cache
     */
    clearCache(): void;
}
declare const _default: DeduplicationService;
export default _default;
//# sourceMappingURL=deduplication.d.ts.map


================================================================================
FILE: functions/lib/ingestion/deduplication.js
================================================================================

"use strict";
/**
 * Deduplication Service
 * Detects and handles duplicate articles using multiple strategies
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeduplicationService = void 0;
const crypto = __importStar(require("crypto"));
class DeduplicationService {
    constructor() {
        this.SIMILARITY_THRESHOLD = 0.85;
        this.urlHashes = new Map();
    }
    /**
     * Generate content hash for fast duplicate detection
     */
    generateContentHash(content) {
        return crypto
            .createHash('sha256')
            .update(content.toLowerCase().trim())
            .digest('hex');
    }
    /**
     * Generate URL hash for quick lookups
     */
    generateUrlHash(url) {
        return crypto
            .createHash('md5')
            .update(url.toLowerCase().trim())
            .digest('hex');
    }
    /**
     * Normalize URL for comparison
     */
    normalizeUrl(url) {
        try {
            const parsed = new URL(url);
            // Remove tracking parameters
            const params = new URLSearchParams(parsed.search);
            params.delete('utm_source');
            params.delete('utm_medium');
            params.delete('utm_campaign');
            params.delete('utm_content');
            params.delete('utm_term');
            parsed.search = params.toString();
            return parsed.toString().toLowerCase();
        }
        catch (_a) {
            return url.toLowerCase();
        }
    }
    /**
     * Check if URL is duplicate
     */
    isUrlDuplicate(url, existingUrls) {
        const normalizedUrl = this.normalizeUrl(url);
        // Check exact match
        for (const existing of existingUrls) {
            const normalizedExisting = this.normalizeUrl(existing);
            if (normalizedUrl === normalizedExisting) {
                return {
                    isDuplicate: true,
                    similarity: 1.0,
                    matchedUrl: existing,
                    reason: 'Exact URL match',
                };
            }
        }
        return {
            isDuplicate: false,
            similarity: 0,
        };
    }
    /**
     * Calculate Levenshtein distance for string similarity
     */
    levenshteinDistance(str1, str2) {
        const len1 = str1.length;
        const len2 = str2.length;
        const matrix = Array(len2 + 1)
            .fill(null)
            .map(() => Array(len1 + 1).fill(0));
        for (let i = 0; i <= len1; i++)
            matrix[0][i] = i;
        for (let j = 0; j <= len2; j++)
            matrix[j][0] = j;
        for (let j = 1; j <= len2; j++) {
            for (let i = 1; i <= len1; i++) {
                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(matrix[j][i - 1] + 1, matrix[j - 1][i] + 1, matrix[j - 1][i - 1] + indicator);
            }
        }
        const distance = matrix[len2][len1];
        const maxLen = Math.max(len1, len2);
        return 1 - distance / maxLen;
    }
    /**
     * Check if titles are similar
     */
    isTitleDuplicate(title1, title2) {
        const normalized1 = title1.toLowerCase().trim();
        const normalized2 = title2.toLowerCase().trim();
        // Exact match
        if (normalized1 === normalized2) {
            return {
                isDuplicate: true,
                similarity: 1.0,
                reason: 'Exact title match',
            };
        }
        // Calculate similarity
        const similarity = this.levenshteinDistance(normalized1, normalized2);
        if (similarity >= this.SIMILARITY_THRESHOLD) {
            return {
                isDuplicate: true,
                similarity,
                reason: 'Similar title',
            };
        }
        return {
            isDuplicate: false,
            similarity,
        };
    }
    /**
     * Extract key phrases from content for semantic comparison
     */
    extractKeyPhrases(content) {
        // Extract 2-3 word phrases that are likely to be unique to the article
        const words = content.toLowerCase().split(/\s+/).filter(w => w.length > 4);
        const phrases = new Set();
        for (let i = 0; i < words.length - 1; i++) {
            phrases.add(`${words[i]} ${words[i + 1]}`);
            if (i < words.length - 2) {
                phrases.add(`${words[i]} ${words[i + 1]} ${words[i + 2]}`);
            }
        }
        return phrases;
    }
    /**
     * Calculate semantic similarity between two content pieces
     */
    calculateSemanticSimilarity(content1, content2) {
        const phrases1 = this.extractKeyPhrases(content1);
        const phrases2 = this.extractKeyPhrases(content2);
        if (phrases1.size === 0 || phrases2.size === 0)
            return 0;
        let matches = 0;
        for (const phrase of phrases1) {
            if (phrases2.has(phrase))
                matches++;
        }
        const totalPhrases = Math.max(phrases1.size, phrases2.size);
        return matches / totalPhrases;
    }
    /**
     * Check if content is duplicate using multiple strategies
     */
    isContentDuplicate(url, title, content, existingArticles) {
        // First check URL
        const urlCheck = this.isUrlDuplicate(url, existingArticles.map((a) => a.url));
        if (urlCheck.isDuplicate) {
            return urlCheck;
        }
        // Then check title similarity
        for (const existing of existingArticles) {
            const titleCheck = this.isTitleDuplicate(title, existing.title);
            if (titleCheck.isDuplicate) {
                return Object.assign(Object.assign({}, titleCheck), { matchedUrl: existing.url });
            }
        }
        // Finally, check semantic similarity of content
        if (content && content.length > 100) {
            for (const existing of existingArticles) {
                if (existing.content && existing.content.length > 100) {
                    const semanticSimilarity = this.calculateSemanticSimilarity(content, existing.content);
                    if (semanticSimilarity >= 0.7) {
                        return {
                            isDuplicate: true,
                            similarity: semanticSimilarity,
                            matchedUrl: existing.url,
                            reason: 'Semantic content similarity',
                        };
                    }
                }
            }
        }
        return {
            isDuplicate: false,
            similarity: 0,
        };
    }
    /**
     * Clear cache
     */
    clearCache() {
        this.urlHashes.clear();
    }
}
exports.DeduplicationService = DeduplicationService;
exports.default = new DeduplicationService();
//# sourceMappingURL=deduplication.js.map


================================================================================
FILE: functions/lib/ingestion/firebase.d.ts
================================================================================

/**
 * Firebase Configuration for Ingestion Service
 * Provides Firestore instance for ingestion operations
 */
export declare const db: FirebaseFirestore.Firestore;
//# sourceMappingURL=firebase.d.ts.map


================================================================================
FILE: functions/lib/ingestion/firebase.js
================================================================================

"use strict";
/**
 * Firebase Configuration for Ingestion Service
 * Provides Firestore instance for ingestion operations
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.db = void 0;
const firestore_1 = require("firebase-admin/firestore");
exports.db = (0, firestore_1.getFirestore)();
//# sourceMappingURL=firebase.js.map


================================================================================
FILE: functions/lib/ingestion/index.d.ts
================================================================================

/**
 * Ingestion Module Exports
 * Core ingestion functionality for CarrierSignal
 */
export { IngestionService } from './service';
export { DeduplicationService } from './deduplication';
export { RSSPlugin } from './plugins/rss';
export type { RawArticle, IngestionSource, IngestionResult, IngestionError, IngestionPlugin, ContentHash, DuplicateCheckResult, } from './types';
import { IngestionService } from './service';
export declare const ingestionService: IngestionService;
//# sourceMappingURL=index.d.ts.map


================================================================================
FILE: functions/lib/ingestion/index.js
================================================================================

"use strict";
/**
 * Ingestion Module Exports
 * Core ingestion functionality for CarrierSignal
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ingestionService = exports.RSSPlugin = exports.DeduplicationService = exports.IngestionService = void 0;
var service_1 = require("./service");
Object.defineProperty(exports, "IngestionService", { enumerable: true, get: function () { return service_1.IngestionService; } });
var deduplication_1 = require("./deduplication");
Object.defineProperty(exports, "DeduplicationService", { enumerable: true, get: function () { return deduplication_1.DeduplicationService; } });
var rss_1 = require("./plugins/rss");
Object.defineProperty(exports, "RSSPlugin", { enumerable: true, get: function () { return rss_1.RSSPlugin; } });
const service_2 = require("./service");
exports.ingestionService = new service_2.IngestionService();
//# sourceMappingURL=index.js.map


================================================================================
FILE: functions/lib/ingestion/plugins/rss.d.ts
================================================================================

/**
 * RSS/Atom Feed Ingestion Plugin
 * Fetches and parses RSS and Atom feeds using rss-parser
 * Includes timeout, error handling, and filtering for recent articles
 */
import { IngestionPlugin, RawArticle, IngestionSource } from '../types';
export declare class RSSPlugin implements IngestionPlugin {
    name: string;
    type: 'rss' | 'atom';
    private parser;
    private readonly FETCH_TIMEOUT_MS;
    private readonly MAX_ARTICLES_PER_FEED;
    private readonly ARTICLE_AGE_HOURS;
    constructor();
    fetch(source: IngestionSource): Promise<RawArticle[]>;
    private parseItem;
    validate(article: RawArticle): boolean;
}
declare const _default: RSSPlugin;
export default _default;
//# sourceMappingURL=rss.d.ts.map


================================================================================
FILE: functions/lib/ingestion/plugins/rss.js
================================================================================

"use strict";
/**
 * RSS/Atom Feed Ingestion Plugin
 * Fetches and parses RSS and Atom feeds using rss-parser
 * Includes timeout, error handling, and filtering for recent articles
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RSSPlugin = void 0;
const rss_parser_1 = __importDefault(require("rss-parser"));
class RSSPlugin {
    constructor() {
        this.name = 'RSS/Atom Feed Plugin';
        this.type = 'rss';
        this.FETCH_TIMEOUT_MS = 30000; // 30 second timeout
        this.MAX_ARTICLES_PER_FEED = 100; // Limit articles per feed
        this.ARTICLE_AGE_HOURS = 48; // Only fetch articles from last 48 hours
        this.parser = new rss_parser_1.default({
            customFields: {
                item: [
                    ['content:encoded', 'content'],
                    ['dc:creator', 'creator'],
                    ['media:content', 'mediaContent'],
                    ['media:thumbnail', 'mediaThumbnail'],
                ],
            },
            timeout: this.FETCH_TIMEOUT_MS,
        });
    }
    async fetch(source) {
        if (!source.url) {
            throw new Error('RSS source URL is required');
        }
        try {
            // Create abort controller for timeout
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.FETCH_TIMEOUT_MS);
            try {
                const feed = await this.parser.parseURL(source.url);
                clearTimeout(timeoutId);
                const articles = [];
                const now = Date.now();
                const maxAge = this.ARTICLE_AGE_HOURS * 60 * 60 * 1000;
                if (feed.items) {
                    for (const item of feed.items) {
                        // Filter articles by age
                        const pubDate = item.pubDate || item.isoDate;
                        if (pubDate) {
                            const itemTime = new Date(pubDate).getTime();
                            if (now - itemTime > maxAge) {
                                continue; // Skip old articles
                            }
                        }
                        const article = this.parseItem(item, source.name);
                        if (article) {
                            articles.push(article);
                            if (articles.length >= this.MAX_ARTICLES_PER_FEED) {
                                break; // Limit articles per feed
                            }
                        }
                    }
                }
                return articles;
            }
            catch (error) {
                clearTimeout(timeoutId);
                throw error;
            }
        }
        catch (error) {
            const errorMsg = error instanceof Error ? error.message : String(error);
            throw new Error(`Failed to fetch RSS feed from ${source.url}: ${errorMsg}`);
        }
    }
    parseItem(item, source) {
        var _a, _b, _c;
        try {
            const url = item.link || '';
            const title = item.title || '';
            if (!url || !title) {
                return null;
            }
            const itemData = item;
            // Extract image from various possible fields
            let mainImage = '';
            if (itemData.mediaThumbnail) {
                const thumb = itemData.mediaThumbnail;
                mainImage = ((_a = thumb.$) === null || _a === void 0 ? void 0 : _a.url) || '';
            }
            if (!mainImage && itemData.mediaContent) {
                const media = itemData.mediaContent;
                mainImage = ((_b = media.$) === null || _b === void 0 ? void 0 : _b.url) || '';
            }
            if (!mainImage && ((_c = item.enclosure) === null || _c === void 0 ? void 0 : _c.url)) {
                mainImage = item.enclosure.url;
            }
            return {
                url,
                source,
                title,
                publishedAt: item.pubDate || item.isoDate || new Date().toISOString(),
                description: item.contentSnippet || itemData.summary || '',
                html: itemData.content || item.content || itemData.description || '',
                text: item.contentSnippet || itemData.summary || '',
                author: itemData.creator || itemData.author || '',
                mainImage: mainImage || undefined,
            };
        }
        catch (error) {
            console.warn(`Failed to parse RSS item: ${error instanceof Error ? error.message : String(error)}`);
            return null;
        }
    }
    validate(article) {
        return !!(article.url && article.title && article.source);
    }
}
exports.RSSPlugin = RSSPlugin;
exports.default = new RSSPlugin();
//# sourceMappingURL=rss.js.map


================================================================================
FILE: functions/lib/ingestion/service.d.ts
================================================================================

/**
 * Ingestion Service
 * Orchestrates article ingestion, deduplication, and normalization
 */
import { IngestionPlugin, IngestionSource, IngestionResult } from './types';
export declare class IngestionService {
    private plugins;
    private deduplicationService;
    constructor();
    /**
     * Register an ingestion plugin
     */
    registerPlugin(plugin: IngestionPlugin): void;
    /**
     * Fetch articles from a source with retry logic
     */
    fetchFromSource(source: IngestionSource): Promise<IngestionResult>;
    /**
     * Get existing articles for deduplication
     */
    private getExistingArticles;
    /**
     * Store article in Firestore
     */
    private storeArticle;
    /**
     * Update source last fetched time
     */
    private updateSourceLastFetched;
}
declare const _default: IngestionService;
export default _default;
//# sourceMappingURL=service.d.ts.map


================================================================================
FILE: functions/lib/ingestion/service.js
================================================================================

"use strict";
/**
 * Ingestion Service
 * Orchestrates article ingestion, deduplication, and normalization
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IngestionService = void 0;
const firebase_1 = require("./firebase");
const deduplication_1 = require("./deduplication");
const rss_1 = require("./plugins/rss");
const schemas_1 = require("../schemas");
class IngestionService {
    constructor() {
        this.plugins = new Map();
        this.deduplicationService = new deduplication_1.DeduplicationService();
        this.registerPlugin(new rss_1.RSSPlugin());
    }
    /**
     * Register an ingestion plugin
     */
    registerPlugin(plugin) {
        this.plugins.set(plugin.type, plugin);
    }
    /**
     * Fetch articles from a source with retry logic
     */
    async fetchFromSource(source) {
        const startTime = Date.now();
        const errors = [];
        let articlesProcessed = 0;
        let articlesAdded = 0;
        let articlesDuplicate = 0;
        try {
            const plugin = this.plugins.get(source.type);
            if (!plugin) {
                throw new Error(`No plugin found for source type: ${source.type}`);
            }
            // Fetch articles with retry logic
            let articles = [];
            let lastError = null;
            for (let attempt = 0; attempt <= source.maxRetries; attempt++) {
                try {
                    articles = await plugin.fetch(source);
                    break;
                }
                catch (error) {
                    lastError = error;
                    if (attempt < source.maxRetries) {
                        const delay = Math.pow(source.backoffMultiplier, attempt) * 1000;
                        await new Promise((resolve) => setTimeout(resolve, delay));
                    }
                }
            }
            if (articles.length === 0 && lastError) {
                throw lastError;
            }
            // Process articles
            const existingArticles = await this.getExistingArticles();
            for (const article of articles) {
                articlesProcessed++;
                // Validate article
                const validation = schemas_1.ArticleSchema.safeParse(article);
                if (!validation.success) {
                    errors.push({
                        code: 'VALIDATION_ERROR',
                        message: `Invalid article: ${validation.error.message}`,
                        details: { url: article.url },
                        timestamp: new Date().toISOString(),
                    });
                    continue;
                }
                // Check for duplicates
                const duplicateCheck = this.deduplicationService.isContentDuplicate(article.url, article.title, article.text || article.html || '', existingArticles);
                if (duplicateCheck.isDuplicate) {
                    articlesDuplicate++;
                    continue;
                }
                // Store article
                try {
                    await this.storeArticle(article, source.id);
                    articlesAdded++;
                }
                catch (error) {
                    errors.push({
                        code: 'STORAGE_ERROR',
                        message: `Failed to store article: ${error instanceof Error ? error.message : String(error)}`,
                        details: { url: article.url },
                        timestamp: new Date().toISOString(),
                    });
                }
            }
            // Update source last fetched time
            await this.updateSourceLastFetched(source.id);
            return {
                source: source.name,
                articlesProcessed,
                articlesAdded,
                articlesDuplicate,
                errors,
                duration: Date.now() - startTime,
                timestamp: new Date().toISOString(),
            };
        }
        catch (error) {
            errors.push({
                code: 'FETCH_ERROR',
                message: error instanceof Error ? error.message : String(error),
                timestamp: new Date().toISOString(),
            });
            return {
                source: source.name,
                articlesProcessed,
                articlesAdded,
                articlesDuplicate,
                errors,
                duration: Date.now() - startTime,
                timestamp: new Date().toISOString(),
            };
        }
    }
    /**
     * Get existing articles for deduplication
     */
    async getExistingArticles() {
        try {
            const snapshot = await firebase_1.db
                .collection('articles')
                .orderBy('publishedAt', 'desc')
                .limit(1000)
                .get();
            return snapshot.docs.map((doc) => ({
                url: doc.data().url,
                title: doc.data().title,
                content: doc.data().text || doc.data().html,
            }));
        }
        catch (_a) {
            return [];
        }
    }
    /**
     * Store article in Firestore
     */
    async storeArticle(article, sourceId) {
        const contentHash = this.deduplicationService.generateContentHash(article.text || article.html || '');
        await firebase_1.db.collection('articles').add(Object.assign(Object.assign({}, article), { sourceId,
            contentHash, createdAt: new Date().toISOString(), processed: false, eventId: null }));
    }
    /**
     * Update source last fetched time
     */
    async updateSourceLastFetched(sourceId) {
        await firebase_1.db.collection('ingestionSources').doc(sourceId).update({
            lastFetched: new Date().toISOString(),
        });
    }
}
exports.IngestionService = IngestionService;
exports.default = new IngestionService();
//# sourceMappingURL=service.js.map


================================================================================
FILE: functions/lib/ingestion/types.d.ts
================================================================================

/**
 * Ingestion Layer Types
 * Defines interfaces for plugin architecture
 */
export interface RawArticle {
    url: string;
    source: string;
    title: string;
    publishedAt?: string;
    description?: string;
    html?: string;
    text?: string;
    author?: string;
    mainImage?: string;
    contentHash?: string;
}
export interface IngestionSource {
    id: string;
    name: string;
    type: 'rss' | 'atom' | 'sitemap' | 'json' | 'csv' | 'manual';
    url?: string;
    enabled: boolean;
    lastFetched?: string;
    fetchInterval: number;
    retryCount: number;
    maxRetries: number;
    backoffMultiplier: number;
}
export interface IngestionResult {
    source: string;
    articlesProcessed: number;
    articlesAdded: number;
    articlesDuplicate: number;
    errors: IngestionError[];
    duration: number;
    timestamp: string;
}
export interface IngestionError {
    code: string;
    message: string;
    details?: Record<string, unknown>;
    timestamp: string;
}
export interface IngestionPlugin {
    name: string;
    type: IngestionSource['type'];
    fetch(source: IngestionSource): Promise<RawArticle[]>;
    validate(article: RawArticle): boolean;
}
export interface ContentHash {
    url: string;
    hash: string;
    timestamp: string;
}
export interface DuplicateCheckResult {
    isDuplicate: boolean;
    similarity: number;
    matchedUrl?: string;
    reason?: string;
}
//# sourceMappingURL=types.d.ts.map


================================================================================
FILE: functions/lib/ingestion/types.js
================================================================================

"use strict";
/**
 * Ingestion Layer Types
 * Defines interfaces for plugin architecture
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map


================================================================================
FILE: functions/lib/observability/analytics.d.ts
================================================================================

/**
 * Analytics Service
 * Structured event tracking and observability
 */
export interface AnalyticsEvent {
    eventType: string;
    userId?: string;
    sessionId: string;
    timestamp: string;
    properties: Record<string, unknown>;
    context: {
        userAgent: string;
        url: string;
        referrer?: string;
    };
}
export interface UserEngagement {
    userId: string;
    sessionCount: number;
    totalTimeSpent: number;
    articlesViewed: number;
    articlesBookmarked: number;
    filtersApplied: number;
    lastActive: string;
}
export interface SourceMetrics {
    sourceId: string;
    articlesIngested: number;
    articlesProcessed: number;
    averageProcessingTime: number;
    errorRate: number;
    lastIngestionTime: string;
}
export declare class AnalyticsService {
    private sessionId;
    constructor();
    /**
     * Generate unique session ID
     */
    private generateSessionId;
    /**
     * Track analytics event
     */
    trackEvent(eventType: string, userId: string | undefined, properties: Record<string, unknown>, context: {
        userAgent: string;
        url: string;
        referrer?: string;
    }): Promise<void>;
    /**
     * Track article view
     */
    trackArticleView(userId: string, articleId: string, timeSpent: number): Promise<void>;
    /**
     * Track bookmark action
     */
    trackBookmark(userId: string, articleId: string, action: 'add' | 'remove'): Promise<void>;
    /**
     * Track filter application
     */
    trackFilterApplied(userId: string, filters: Record<string, unknown>): Promise<void>;
    /**
     * Track search query
     */
    trackSearch(userId: string, query: string, resultCount: number): Promise<void>;
    /**
     * Get user engagement metrics
     */
    getUserEngagement(userId: string): Promise<UserEngagement>;
    /**
     * Get source metrics
     */
    getSourceMetrics(sourceId: string): Promise<SourceMetrics>;
}
declare const _default: AnalyticsService;
export default _default;
//# sourceMappingURL=analytics.d.ts.map


================================================================================
FILE: functions/lib/observability/analytics.js
================================================================================

"use strict";
/**
 * Analytics Service
 * Structured event tracking and observability
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyticsService = void 0;
const firebase_1 = require("../ingestion/firebase");
class AnalyticsService {
    constructor() {
        this.sessionId = this.generateSessionId();
    }
    /**
     * Generate unique session ID
     */
    generateSessionId() {
        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * Track analytics event
     */
    async trackEvent(eventType, userId, properties, context) {
        try {
            const event = {
                eventType,
                userId,
                sessionId: this.sessionId,
                timestamp: new Date().toISOString(),
                properties,
                context,
            };
            await firebase_1.db.collection('analytics_events').add(event);
        }
        catch (error) {
            console.error('Failed to track event:', error);
        }
    }
    /**
     * Track article view
     */
    async trackArticleView(userId, articleId, timeSpent) {
        await this.trackEvent('article_view', userId, {
            articleId,
            timeSpent,
        }, {
            userAgent: navigator.userAgent,
            url: window.location.href,
        });
    }
    /**
     * Track bookmark action
     */
    async trackBookmark(userId, articleId, action) {
        await this.trackEvent('bookmark', userId, {
            articleId,
            action,
        }, {
            userAgent: navigator.userAgent,
            url: window.location.href,
        });
    }
    /**
     * Track filter application
     */
    async trackFilterApplied(userId, filters) {
        await this.trackEvent('filter_applied', userId, {
            filters,
            filterCount: Object.keys(filters).length,
        }, {
            userAgent: navigator.userAgent,
            url: window.location.href,
        });
    }
    /**
     * Track search query
     */
    async trackSearch(userId, query, resultCount) {
        await this.trackEvent('search', userId, {
            query,
            resultCount,
        }, {
            userAgent: navigator.userAgent,
            url: window.location.href,
        });
    }
    /**
     * Get user engagement metrics
     */
    async getUserEngagement(userId) {
        try {
            const snapshot = await firebase_1.db
                .collection('analytics_events')
                .where('userId', '==', userId)
                .orderBy('timestamp', 'desc')
                .limit(1000)
                .get();
            const events = snapshot.docs.map((doc) => doc.data());
            const sessionCount = new Set(events.map((e) => e.sessionId)).size;
            const articlesViewed = events.filter((e) => e.eventType === 'article_view').length;
            const articlesBookmarked = events.filter((e) => e.eventType === 'bookmark').length;
            const filtersApplied = events.filter((e) => e.eventType === 'filter_applied').length;
            const totalTimeSpent = events
                .filter((e) => e.eventType === 'article_view')
                .reduce((sum, e) => sum + (e.properties.timeSpent || 0), 0);
            const lastActive = events.length > 0 ? events[0].timestamp : new Date().toISOString();
            return {
                userId,
                sessionCount,
                totalTimeSpent,
                articlesViewed,
                articlesBookmarked,
                filtersApplied,
                lastActive,
            };
        }
        catch (error) {
            console.error('Failed to get user engagement:', error);
            return {
                userId,
                sessionCount: 0,
                totalTimeSpent: 0,
                articlesViewed: 0,
                articlesBookmarked: 0,
                filtersApplied: 0,
                lastActive: new Date().toISOString(),
            };
        }
    }
    /**
     * Get source metrics
     */
    async getSourceMetrics(sourceId) {
        try {
            const articlesSnapshot = await firebase_1.db
                .collection('articles')
                .where('sourceId', '==', sourceId)
                .get();
            const articles = articlesSnapshot.docs.map((doc) => doc.data());
            const processedArticles = articles.filter((a) => a.processed).length;
            const sourceDoc = await firebase_1.db.collection('ingestionSources').doc(sourceId).get();
            const source = sourceDoc.data();
            return {
                sourceId,
                articlesIngested: articles.length,
                articlesProcessed: processedArticles,
                averageProcessingTime: 0,
                errorRate: 0,
                lastIngestionTime: (source === null || source === void 0 ? void 0 : source.lastFetched) || new Date().toISOString(),
            };
        }
        catch (error) {
            console.error('Failed to get source metrics:', error);
            return {
                sourceId,
                articlesIngested: 0,
                articlesProcessed: 0,
                averageProcessingTime: 0,
                errorRate: 0,
                lastIngestionTime: new Date().toISOString(),
            };
        }
    }
}
exports.AnalyticsService = AnalyticsService;
exports.default = new AnalyticsService();
//# sourceMappingURL=analytics.js.map


================================================================================
FILE: functions/lib/observability/feedback.d.ts
================================================================================

/**
 * Feedback Service
 * Collects and processes user feedback for continuous improvement
 */
export interface UserFeedback {
    id: string;
    userId: string;
    type: 'bug' | 'feature_request' | 'improvement' | 'other';
    title: string;
    description: string;
    severity?: 'low' | 'medium' | 'high' | 'critical';
    context?: {
        url: string;
        userAgent: string;
        timestamp: string;
    };
    attachments?: string[];
    status: 'new' | 'acknowledged' | 'in_progress' | 'resolved' | 'wontfix';
    createdAt: string;
    updatedAt: string;
}
export interface SummaryAccuracy {
    summaryId: string;
    articleId: string;
    rating: 1 | 2 | 3 | 4 | 5;
    accuracy: number;
    completeness: number;
    clarity: number;
    comments?: string;
    createdAt: string;
}
export interface RankingFeedback {
    eventId: string;
    userId: string;
    relevance: 1 | 2 | 3 | 4 | 5;
    helpful: boolean;
    comments?: string;
    createdAt: string;
}
export declare class FeedbackService {
    /**
     * Submit user feedback
     */
    submitFeedback(userId: string, type: UserFeedback['type'], title: string, description: string, severity?: UserFeedback['severity']): Promise<string>;
    /**
     * Rate summary accuracy
     */
    rateSummaryAccuracy(summaryId: string, articleId: string, rating: 1 | 2 | 3 | 4 | 5, accuracy: number, completeness: number, clarity: number, comments?: string): Promise<void>;
    /**
     * Rate ranking relevance
     */
    rateRankingRelevance(eventId: string, userId: string, relevance: 1 | 2 | 3 | 4 | 5, helpful: boolean, comments?: string): Promise<void>;
    /**
     * Get feedback summary
     */
    getFeedbackSummary(): Promise<{
        totalFeedback: number;
        byType: Record<string, number>;
        byStatus: Record<string, number>;
        averageSeverity: number;
    }>;
}
declare const _default: FeedbackService;
export default _default;
//# sourceMappingURL=feedback.d.ts.map


================================================================================
FILE: functions/lib/observability/feedback.js
================================================================================

"use strict";
/**
 * Feedback Service
 * Collects and processes user feedback for continuous improvement
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackService = void 0;
const firebase_1 = require("../ingestion/firebase");
class FeedbackService {
    /**
     * Submit user feedback
     */
    async submitFeedback(userId, type, title, description, severity) {
        try {
            const feedback = {
                userId,
                type,
                title,
                description,
                severity,
                context: {
                    url: typeof window !== 'undefined' ? window.location.href : '',
                    userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
                    timestamp: new Date().toISOString(),
                },
                status: 'new',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
            };
            const docRef = await firebase_1.db.collection('user_feedback').add(feedback);
            return docRef.id;
        }
        catch (error) {
            throw new Error(`Failed to submit feedback: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    /**
     * Rate summary accuracy
     */
    async rateSummaryAccuracy(summaryId, articleId, rating, accuracy, completeness, clarity, comments) {
        try {
            const feedback = {
                summaryId,
                articleId,
                rating,
                accuracy,
                completeness,
                clarity,
                comments,
                createdAt: new Date().toISOString(),
            };
            await firebase_1.db.collection('summary_accuracy_feedback').add(feedback);
            // Update summary quality metrics
            await firebase_1.db.collection('summaryCache').doc(summaryId).update({
                userRating: rating,
                accuracyScore: accuracy,
                completenessScore: completeness,
                clarityScore: clarity,
            });
        }
        catch (error) {
            throw new Error(`Failed to rate summary: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    /**
     * Rate ranking relevance
     */
    async rateRankingRelevance(eventId, userId, relevance, helpful, comments) {
        try {
            const feedback = {
                eventId,
                userId,
                relevance,
                helpful,
                comments,
                createdAt: new Date().toISOString(),
            };
            await firebase_1.db.collection('ranking_feedback').add(feedback);
        }
        catch (error) {
            throw new Error(`Failed to rate ranking: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    /**
     * Get feedback summary
     */
    async getFeedbackSummary() {
        try {
            const snapshot = await firebase_1.db.collection('user_feedback').get();
            const feedback = snapshot.docs.map((doc) => doc.data());
            const byType = {};
            const byStatus = {};
            let totalSeverity = 0;
            let severityCount = 0;
            for (const item of feedback) {
                byType[item.type] = (byType[item.type] || 0) + 1;
                byStatus[item.status] = (byStatus[item.status] || 0) + 1;
                if (item.severity) {
                    const severityMap = { low: 1, medium: 2, high: 3, critical: 4 };
                    totalSeverity += severityMap[item.severity];
                    severityCount++;
                }
            }
            return {
                totalFeedback: feedback.length,
                byType,
                byStatus,
                averageSeverity: severityCount > 0 ? totalSeverity / severityCount : 0,
            };
        }
        catch (error) {
            console.error('Failed to get feedback summary:', error);
            return {
                totalFeedback: 0,
                byType: {},
                byStatus: {},
                averageSeverity: 0,
            };
        }
    }
}
exports.FeedbackService = FeedbackService;
exports.default = new FeedbackService();
//# sourceMappingURL=feedback.js.map


================================================================================
FILE: functions/lib/observability/index.d.ts
================================================================================

/**
 * Observability Module Exports
 * Analytics, feedback, and monitoring functionality
 */
export { default as AnalyticsService } from './analytics';
export type { AnalyticsEvent, UserEngagement, SourceMetrics, } from './analytics';
export { default as FeedbackService } from './feedback';
export type { UserFeedback, SummaryAccuracy, RankingFeedback, } from './feedback';
//# sourceMappingURL=index.d.ts.map


================================================================================
FILE: functions/lib/observability/index.js
================================================================================

"use strict";
/**
 * Observability Module Exports
 * Analytics, feedback, and monitoring functionality
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackService = exports.AnalyticsService = void 0;
var analytics_1 = require("./analytics");
Object.defineProperty(exports, "AnalyticsService", { enumerable: true, get: function () { return __importDefault(analytics_1).default; } });
var feedback_1 = require("./feedback");
Object.defineProperty(exports, "FeedbackService", { enumerable: true, get: function () { return __importDefault(feedback_1).default; } });
//# sourceMappingURL=index.js.map


================================================================================
FILE: functions/lib/prompts.d.ts
================================================================================

/**
 * Enhanced AI Prompts for CarrierSignal
 * Includes few-shot examples, chain-of-thought, and anti-hallucination clauses
 * Optimized for P&C insurance domain with actionable insights
 */
export declare const SUMMARIZATION_PROMPT = "You are a senior P&C insurance analyst with expertise in underwriting, claims, actuarial science, and regulatory compliance. Analyze the following article and extract key insights for insurance professionals.\n\nCRITICAL RULES:\n1. ONLY cite facts explicitly stated in the article - NO speculation or inference\n2. Focus on actionable insights for P&C professionals (underwriters, claims adjusters, actuaries, brokers, risk managers)\n3. Identify specific regulatory implications, market impacts, and operational changes\n4. Ensure all bullets are concrete, factual, and directly quoted or paraphrased from the article\n5. Prioritize information that affects underwriting decisions, claims handling, or risk assessment\n\nCHAIN-OF-THOUGHT ANALYSIS:\n- First, identify the core news event or announcement\n- Then, determine which P&C segments are affected (Auto, Property, Liability, Workers Comp, Cyber, Specialty)\n- Next, assess regulatory, market, and operational impacts\n- Finally, extract actionable insights for each professional role\n\nExtract the following in JSON format:\n{\n  \"title\": \"Original article title\",\n  \"bullets5\": [\"Bullet 1 - specific, factual, actionable\", \"Bullet 2\", \"Bullet 3\", \"Bullet 4\", \"Bullet 5\"],\n  \"whyItMatters\": {\n    \"underwriting\": \"Specific impact on underwriting decisions, risk assessment, or pricing\",\n    \"claims\": \"Impact on claims handling procedures, reserves, or litigation strategy\",\n    \"brokerage\": \"Impact on broker operations, client communication, or policy placement\",\n    \"actuarial\": \"Impact on actuarial analysis, reserving, or rate-making\"\n  },\n  \"leadQuote\": \"Most important direct quote from article (must be verbatim or clearly paraphrased)\",\n  \"citations\": [\"URL or source reference 1\", \"URL or source reference 2\"]\n}\n\nArticle to analyze:\n{article_text}";
export declare const TAGGING_PROMPT = "You are an expert P&C insurance industry classifier with deep knowledge of lines of business, perils, regulatory frameworks, and market trends. Analyze this article and assign appropriate tags.\n\nCLASSIFICATION RULES:\n1. Only assign tags that are EXPLICITLY supported by article content - no inference\n2. Be conservative: if unsure, omit the tag\n3. Use standard insurance industry terminology and ISO codes for regions\n4. Maximum tags per category as specified\n5. Prioritize accuracy over coverage\n\nTAGGING GUIDELINES:\n- LOB: Auto, Property, Homeowners, Commercial, Liability, Workers Comp, Cyber, Specialty, Umbrella\n- PERILS: Hurricane, Tornado, Wildfire, Flood, Earthquake, Hail, Winter Storm, Cyber, Terrorism, Pollution\n- REGIONS: Use ISO 3166-2 codes (US-CA, US-FL, etc.) or country codes\n- COMPANIES: Major insurers, reinsurers, MGAs mentioned in article\n- TRENDS: Climate Risk, Social Inflation, GenAI/Automation, Supply Chain, Underwriting Capacity, Rate Hardening, Reinsurance Costs, Catastrophe Bonds, Parametric Insurance\n- REGULATIONS: NAIC, State DOI, Tort Reform, Rate Regulation, Solvency Requirements, Cybersecurity Mandates\n\nArticle: {article_title}\n{article_summary}\n\nAssign tags in this JSON format:\n{\n  \"lob\": [\"Auto\", \"Property\"],\n  \"perils\": [\"Hurricane\"],\n  \"regions\": [\"US-FL\", \"US-LA\"],\n  \"companies\": [\"State Farm\"],\n  \"trends\": [\"Climate Risk\"],\n  \"regulations\": [\"NAIC\"]\n}";
export declare const SCORING_PROMPT = "You are a senior P&C insurance analyst evaluating article relevance and impact for industry professionals. Use chain-of-thought reasoning to score this article.\n\nSCORING METHODOLOGY:\n- Relevance (0-100): Direct relevance to P&C insurance professionals' decision-making\n  * 80-100: Critical for underwriting, claims, actuarial, or regulatory compliance\n  * 60-79: Important market or operational information\n  * 40-59: Tangential to insurance operations\n  * 0-39: Minimal relevance to P&C professionals\n\n- Impact (0-100): Potential business impact on insurance operations\n  * 80-100: Affects pricing, underwriting criteria, claims handling, or regulatory compliance\n  * 60-79: Affects market dynamics or competitive positioning\n  * 40-59: Affects specific segments or regions\n  * 0-39: Minimal operational impact\n\n- Confidence (0-1): Your confidence in this assessment (0.5-1.0 range)\n\nCHAIN-OF-THOUGHT ANALYSIS:\n1. Identify the core news event and affected P&C segments\n2. Assess regulatory, market, and operational implications\n3. Determine actionability for insurance professionals\n4. Evaluate confidence based on clarity and specificity of information\n\nArticle Title: {article_title}\nSummary: {article_summary}\n\nProvide JSON response:\n{\n  \"relevanceScore\": 75,\n  \"impactScore\": 80,\n  \"confidence\": 0.85,\n  \"confidenceRationale\": \"Clear regulatory implications with specific company impacts and underwriting implications\",\n  \"riskPulse\": \"HIGH\",\n  \"sentiment\": \"NEGATIVE\"\n}";
export declare const SEMANTIC_SEARCH_PROMPT = "You are an expert at understanding insurance industry queries. \nExpand this search query to include related terms and concepts that would help find relevant articles.\n\nQuery: {query}\n\nReturn a JSON object with:\n{\n  \"expanded_terms\": [\"term1\", \"term2\", \"term3\"],\n  \"related_concepts\": [\"concept1\", \"concept2\"],\n  \"industry_synonyms\": [\"synonym1\", \"synonym2\"]\n}";
export declare const DEDUPLICATION_PROMPT = "You are an expert at identifying duplicate or near-duplicate news stories.\nCompare these two article summaries and determine if they cover the same event/story.\n\nArticle 1 Title: {article1_title}\nArticle 1 Summary: {article1_summary}\n\nArticle 2 Title: {article2_title}\nArticle 2 Summary: {article2_summary}\n\nRespond with JSON:\n{\n  \"isDuplicate\": true/false,\n  \"similarity\": 0.95,\n  \"reasoning\": \"Both articles cover the same regulatory announcement from NAIC\"\n}";
export declare const ENTITY_EXTRACTION_PROMPT = "Extract key entities from this insurance news article.\n\nArticle: {article_text}\n\nReturn JSON with:\n{\n  \"companies\": [\"Company1\", \"Company2\"],\n  \"regulators\": [\"NAIC\", \"State DOI\"],\n  \"perils\": [\"Hurricane\", \"Cyber\"],\n  \"regions\": [\"Florida\", \"California\"],\n  \"people\": [\"John Doe (CEO)\"],\n  \"events\": [\"Rate Increase\", \"Merger\"]\n}";
export declare const TREND_ANALYSIS_PROMPT = "Analyze emerging trends in this batch of insurance articles.\n\nArticles: {articles_summary}\n\nIdentify:\n{\n  \"emergingTrends\": [\"Trend1\", \"Trend2\"],\n  \"riskFactors\": [\"Risk1\", \"Risk2\"],\n  \"opportunities\": [\"Opportunity1\", \"Opportunity2\"],\n  \"timeframe\": \"Q4 2024\"\n}";
//# sourceMappingURL=prompts.d.ts.map


================================================================================
FILE: functions/lib/prompts.js
================================================================================

"use strict";
/**
 * Enhanced AI Prompts for CarrierSignal
 * Includes few-shot examples, chain-of-thought, and anti-hallucination clauses
 * Optimized for P&C insurance domain with actionable insights
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TREND_ANALYSIS_PROMPT = exports.ENTITY_EXTRACTION_PROMPT = exports.DEDUPLICATION_PROMPT = exports.SEMANTIC_SEARCH_PROMPT = exports.SCORING_PROMPT = exports.TAGGING_PROMPT = exports.SUMMARIZATION_PROMPT = void 0;
exports.SUMMARIZATION_PROMPT = `You are a senior P&C insurance analyst with expertise in underwriting, claims, actuarial science, and regulatory compliance. Analyze the following article and extract key insights for insurance professionals.

CRITICAL RULES:
1. ONLY cite facts explicitly stated in the article - NO speculation or inference
2. Focus on actionable insights for P&C professionals (underwriters, claims adjusters, actuaries, brokers, risk managers)
3. Identify specific regulatory implications, market impacts, and operational changes
4. Ensure all bullets are concrete, factual, and directly quoted or paraphrased from the article
5. Prioritize information that affects underwriting decisions, claims handling, or risk assessment

CHAIN-OF-THOUGHT ANALYSIS:
- First, identify the core news event or announcement
- Then, determine which P&C segments are affected (Auto, Property, Liability, Workers Comp, Cyber, Specialty)
- Next, assess regulatory, market, and operational impacts
- Finally, extract actionable insights for each professional role

Extract the following in JSON format:
{
  "title": "Original article title",
  "bullets5": ["Bullet 1 - specific, factual, actionable", "Bullet 2", "Bullet 3", "Bullet 4", "Bullet 5"],
  "whyItMatters": {
    "underwriting": "Specific impact on underwriting decisions, risk assessment, or pricing",
    "claims": "Impact on claims handling procedures, reserves, or litigation strategy",
    "brokerage": "Impact on broker operations, client communication, or policy placement",
    "actuarial": "Impact on actuarial analysis, reserving, or rate-making"
  },
  "leadQuote": "Most important direct quote from article (must be verbatim or clearly paraphrased)",
  "citations": ["URL or source reference 1", "URL or source reference 2"]
}

Article to analyze:
{article_text}`;
exports.TAGGING_PROMPT = `You are an expert P&C insurance industry classifier with deep knowledge of lines of business, perils, regulatory frameworks, and market trends. Analyze this article and assign appropriate tags.

CLASSIFICATION RULES:
1. Only assign tags that are EXPLICITLY supported by article content - no inference
2. Be conservative: if unsure, omit the tag
3. Use standard insurance industry terminology and ISO codes for regions
4. Maximum tags per category as specified
5. Prioritize accuracy over coverage

TAGGING GUIDELINES:
- LOB: Auto, Property, Homeowners, Commercial, Liability, Workers Comp, Cyber, Specialty, Umbrella
- PERILS: Hurricane, Tornado, Wildfire, Flood, Earthquake, Hail, Winter Storm, Cyber, Terrorism, Pollution
- REGIONS: Use ISO 3166-2 codes (US-CA, US-FL, etc.) or country codes
- COMPANIES: Major insurers, reinsurers, MGAs mentioned in article
- TRENDS: Climate Risk, Social Inflation, GenAI/Automation, Supply Chain, Underwriting Capacity, Rate Hardening, Reinsurance Costs, Catastrophe Bonds, Parametric Insurance
- REGULATIONS: NAIC, State DOI, Tort Reform, Rate Regulation, Solvency Requirements, Cybersecurity Mandates

Article: {article_title}
{article_summary}

Assign tags in this JSON format:
{
  "lob": ["Auto", "Property"],
  "perils": ["Hurricane"],
  "regions": ["US-FL", "US-LA"],
  "companies": ["State Farm"],
  "trends": ["Climate Risk"],
  "regulations": ["NAIC"]
}`;
exports.SCORING_PROMPT = `You are a senior P&C insurance analyst evaluating article relevance and impact for industry professionals. Use chain-of-thought reasoning to score this article.

SCORING METHODOLOGY:
- Relevance (0-100): Direct relevance to P&C insurance professionals' decision-making
  * 80-100: Critical for underwriting, claims, actuarial, or regulatory compliance
  * 60-79: Important market or operational information
  * 40-59: Tangential to insurance operations
  * 0-39: Minimal relevance to P&C professionals

- Impact (0-100): Potential business impact on insurance operations
  * 80-100: Affects pricing, underwriting criteria, claims handling, or regulatory compliance
  * 60-79: Affects market dynamics or competitive positioning
  * 40-59: Affects specific segments or regions
  * 0-39: Minimal operational impact

- Confidence (0-1): Your confidence in this assessment (0.5-1.0 range)

CHAIN-OF-THOUGHT ANALYSIS:
1. Identify the core news event and affected P&C segments
2. Assess regulatory, market, and operational implications
3. Determine actionability for insurance professionals
4. Evaluate confidence based on clarity and specificity of information

Article Title: {article_title}
Summary: {article_summary}

Provide JSON response:
{
  "relevanceScore": 75,
  "impactScore": 80,
  "confidence": 0.85,
  "confidenceRationale": "Clear regulatory implications with specific company impacts and underwriting implications",
  "riskPulse": "HIGH",
  "sentiment": "NEGATIVE"
}`;
exports.SEMANTIC_SEARCH_PROMPT = `You are an expert at understanding insurance industry queries. 
Expand this search query to include related terms and concepts that would help find relevant articles.

Query: {query}

Return a JSON object with:
{
  "expanded_terms": ["term1", "term2", "term3"],
  "related_concepts": ["concept1", "concept2"],
  "industry_synonyms": ["synonym1", "synonym2"]
}`;
exports.DEDUPLICATION_PROMPT = `You are an expert at identifying duplicate or near-duplicate news stories.
Compare these two article summaries and determine if they cover the same event/story.

Article 1 Title: {article1_title}
Article 1 Summary: {article1_summary}

Article 2 Title: {article2_title}
Article 2 Summary: {article2_summary}

Respond with JSON:
{
  "isDuplicate": true/false,
  "similarity": 0.95,
  "reasoning": "Both articles cover the same regulatory announcement from NAIC"
}`;
exports.ENTITY_EXTRACTION_PROMPT = `Extract key entities from this insurance news article.

Article: {article_text}

Return JSON with:
{
  "companies": ["Company1", "Company2"],
  "regulators": ["NAIC", "State DOI"],
  "perils": ["Hurricane", "Cyber"],
  "regions": ["Florida", "California"],
  "people": ["John Doe (CEO)"],
  "events": ["Rate Increase", "Merger"]
}`;
exports.TREND_ANALYSIS_PROMPT = `Analyze emerging trends in this batch of insurance articles.

Articles: {articles_summary}

Identify:
{
  "emergingTrends": ["Trend1", "Trend2"],
  "riskFactors": ["Risk1", "Risk2"],
  "opportunities": ["Opportunity1", "Opportunity2"],
  "timeframe": "Q4 2024"
}`;
//# sourceMappingURL=prompts.js.map


================================================================================
FILE: functions/lib/ranking/index.d.ts
================================================================================

/**
 * Ranking Module Exports
 * Materiality scoring and event ranking functionality
 */
export { default as RankingService } from './service';
export type { MaterialityScore, RankingScore, UserInterests, SavedFilter, RankingResult, SourceQuality, } from './types';
//# sourceMappingURL=index.d.ts.map


================================================================================
FILE: functions/lib/ranking/index.js
================================================================================

"use strict";
/**
 * Ranking Module Exports
 * Materiality scoring and event ranking functionality
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RankingService = void 0;
var service_1 = require("./service");
Object.defineProperty(exports, "RankingService", { enumerable: true, get: function () { return __importDefault(service_1).default; } });
//# sourceMappingURL=index.js.map


================================================================================
FILE: functions/lib/ranking/service.d.ts
================================================================================

/**
 * Ranking Service
 * Implements materiality scoring and event ranking algorithms
 */
import { MaterialityScore, RankingResult, UserInterests } from './types';
export declare class RankingService {
    private readonly MATERIALITY_WEIGHTS;
    private readonly RANKING_WEIGHTS;
    /**
     * Calculate materiality score for an event
     */
    calculateMaterialityScore(event: Record<string, unknown>): MaterialityScore;
    /**
     * Estimate insured loss based on event characteristics
     */
    private estimateInsuredLoss;
    /**
     * Calculate novelty score
     */
    private calculateNovelty;
    /**
     * Calculate freshness score
     */
    private calculateFreshnessScore;
    /**
     * Calculate source quality score
     */
    private calculateSourceQualityScore;
    /**
     * Calculate user interest score
     */
    private calculateUserInterestScore;
    /**
     * Rank events for a user
     */
    rankEvents(events: Record<string, unknown>[], userInterests?: UserInterests): Promise<RankingResult[]>;
}
declare const _default: RankingService;
export default _default;
//# sourceMappingURL=service.d.ts.map


================================================================================
FILE: functions/lib/ranking/service.js
================================================================================

"use strict";
/**
 * Ranking Service
 * Implements materiality scoring and event ranking algorithms
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RankingService = void 0;
const firebase_1 = require("../ingestion/firebase");
class RankingService {
    constructor() {
        this.MATERIALITY_WEIGHTS = {
            severity: 0.3,
            insuredLoss: 0.25,
            regulatory: 0.2,
            lob: 0.15,
            novelty: 0.1,
        };
        this.RANKING_WEIGHTS = {
            materiality: 0.4,
            freshness: 0.25,
            sourceQuality: 0.15,
            userInterest: 0.2,
        };
    }
    /**
     * Calculate materiality score for an event
     */
    calculateMaterialityScore(event) {
        var _a, _b;
        const eventSeverity = event.severityScore || 50;
        const insuredLoss = this.estimateInsuredLoss(event);
        const regulatoryImpact = ((_a = event.regulatoryFlags) === null || _a === void 0 ? void 0 : _a.length) > 0 ? 75 : 25;
        const affectedLOB = Math.min(((_b = event.lob) === null || _b === void 0 ? void 0 : _b.length) * 20, 100);
        const novelty = this.calculateNovelty(event);
        const breakdown = {
            severity: eventSeverity,
            insuredLoss,
            regulatory: regulatoryImpact,
            lob: affectedLOB,
            novelty,
        };
        const finalScore = breakdown.severity * this.MATERIALITY_WEIGHTS.severity +
            breakdown.insuredLoss * this.MATERIALITY_WEIGHTS.insuredLoss +
            breakdown.regulatory * this.MATERIALITY_WEIGHTS.regulatory +
            breakdown.lob * this.MATERIALITY_WEIGHTS.lob +
            breakdown.novelty * this.MATERIALITY_WEIGHTS.novelty;
        return {
            eventId: event.id,
            baseScore: 50,
            eventSeverity,
            insuredLoss,
            regulatoryImpact,
            affectedLOB,
            novelty,
            finalScore: Math.round(finalScore),
            breakdown,
        };
    }
    /**
     * Estimate insured loss based on event characteristics
     */
    estimateInsuredLoss(event) {
        const eventType = event.eventType;
        const keyNumbers = event.keyNumbers || [];
        let baseScore = 25;
        if (eventType === 'catastrophe') {
            baseScore = 85;
        }
        else if (eventType === 'regulatory') {
            baseScore = 60;
        }
        else if (eventType === 'market') {
            baseScore = 45;
        }
        // Boost if large numbers mentioned
        const hasLargeNumbers = keyNumbers.some((num) => {
            const parsed = parseInt(num.replace(/[^0-9]/g, ''), 10);
            return parsed > 1000000000; // > $1B
        });
        if (hasLargeNumbers) {
            baseScore = Math.min(baseScore + 25, 100);
        }
        return baseScore;
    }
    /**
     * Calculate novelty score
     */
    calculateNovelty(event) {
        const createdAt = new Date(event.createdAt || new Date().toISOString());
        const now = new Date();
        const ageHours = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);
        // Decay novelty over time
        if (ageHours < 1)
            return 100;
        if (ageHours < 6)
            return 80;
        if (ageHours < 24)
            return 60;
        if (ageHours < 72)
            return 40;
        return 20;
    }
    /**
     * Calculate freshness score
     */
    calculateFreshnessScore(publishedAt) {
        const published = new Date(publishedAt);
        const now = new Date();
        const ageHours = (now.getTime() - published.getTime()) / (1000 * 60 * 60);
        if (ageHours < 1)
            return 100;
        if (ageHours < 6)
            return 85;
        if (ageHours < 24)
            return 70;
        if (ageHours < 72)
            return 50;
        if (ageHours < 168)
            return 30;
        return 10;
    }
    /**
     * Calculate source quality score
     */
    async calculateSourceQualityScore(sourceId) {
        try {
            const sourceDoc = await firebase_1.db.collection('ingestionSources').doc(sourceId).get();
            if (!sourceDoc.exists)
                return 50;
            const source = sourceDoc.data();
            if (!source)
                return 50;
            const isOfficialSource = ['SEC', 'NAIC', 'FEMA', 'Reuters', 'Bloomberg'].some((s) => { var _a; return (_a = source.name) === null || _a === void 0 ? void 0 : _a.includes(s); });
            return isOfficialSource ? 90 : 70;
        }
        catch (_a) {
            return 50;
        }
    }
    /**
     * Calculate user interest score
     */
    calculateUserInterestScore(event, userInterests) {
        let score = 0;
        let matchCount = 0;
        // Check LOB matches
        const eventLOBs = event.lob || [];
        const lobMatches = eventLOBs.filter((lob) => userInterests.preferredLOBs.includes(lob)).length;
        if (lobMatches > 0) {
            score += 25;
            matchCount++;
        }
        // Check peril matches
        const eventPerils = event.perils || [];
        const perilMatches = eventPerils.filter((peril) => userInterests.preferredPerils.includes(peril)).length;
        if (perilMatches > 0) {
            score += 25;
            matchCount++;
        }
        // Check region matches
        const eventRegions = event.regions || [];
        const regionMatches = eventRegions.filter((region) => userInterests.preferredRegions.includes(region)).length;
        if (regionMatches > 0) {
            score += 25;
            matchCount++;
        }
        // Check company matches
        const eventCompanies = event.companies || [];
        const companyMatches = eventCompanies.filter((company) => userInterests.preferredCompanies.includes(company))
            .length;
        if (companyMatches > 0) {
            score += 25;
            matchCount++;
        }
        return matchCount > 0 ? Math.min(score, 100) : 50;
    }
    /**
     * Rank events for a user
     */
    async rankEvents(events, userInterests) {
        const results = [];
        for (const event of events) {
            const materialityScore = this.calculateMaterialityScore(event);
            const freshnessScore = this.calculateFreshnessScore(event.publishedAt || new Date().toISOString());
            const sourceQualityScore = await this.calculateSourceQualityScore(event.sourceId || '');
            const userInterestScore = userInterests
                ? this.calculateUserInterestScore(event, userInterests)
                : 50;
            const finalScore = materialityScore.finalScore * this.RANKING_WEIGHTS.materiality +
                freshnessScore * this.RANKING_WEIGHTS.freshness +
                sourceQualityScore * this.RANKING_WEIGHTS.sourceQuality +
                userInterestScore * this.RANKING_WEIGHTS.userInterest;
            results.push({
                eventId: event.id,
                title: event.title || '',
                scores: {
                    eventId: event.id,
                    materialityScore: materialityScore.finalScore,
                    freshnessScore,
                    sourceQualityScore,
                    userInterestScore,
                    finalScore: Math.round(finalScore),
                    rank: 0,
                },
                rank: 0,
                relevanceExplanation: `Materiality: ${materialityScore.finalScore}, Freshness: ${freshnessScore}, Quality: ${sourceQualityScore}`,
            });
        }
        // Sort by final score and assign ranks
        results.sort((a, b) => b.scores.finalScore - a.scores.finalScore);
        results.forEach((result, index) => {
            result.rank = index + 1;
            result.scores.rank = index + 1;
        });
        return results;
    }
}
exports.RankingService = RankingService;
exports.default = new RankingService();
//# sourceMappingURL=service.js.map


================================================================================
FILE: functions/lib/ranking/types.d.ts
================================================================================

/**
 * Ranking and Materiality Types
 * Defines interfaces for ranking and personalization
 */
export interface MaterialityScore {
    eventId: string;
    baseScore: number;
    eventSeverity: number;
    insuredLoss: number;
    regulatoryImpact: number;
    affectedLOB: number;
    novelty: number;
    finalScore: number;
    breakdown: {
        severity: number;
        insuredLoss: number;
        regulatory: number;
        lob: number;
        novelty: number;
    };
}
export interface RankingScore {
    eventId: string;
    materialityScore: number;
    freshnessScore: number;
    sourceQualityScore: number;
    userInterestScore: number;
    finalScore: number;
    rank: number;
}
export interface UserInterests {
    userId: string;
    preferredLOBs: string[];
    preferredPerils: string[];
    preferredRegions: string[];
    preferredCompanies: string[];
    excludedTopics: string[];
    interestWeights: Record<string, number>;
}
export interface SavedFilter {
    id: string;
    userId: string;
    name: string;
    description: string;
    filters: {
        lob?: string[];
        perils?: string[];
        regions?: string[];
        companies?: string[];
        riskPulse?: string;
        dateRange?: {
            start: string;
            end: string;
        };
    };
    createdAt: string;
    updatedAt: string;
    isDefault: boolean;
}
export interface RankingResult {
    eventId: string;
    title: string;
    scores: RankingScore;
    rank: number;
    relevanceExplanation: string;
}
export interface SourceQuality {
    source: string;
    reliability: number;
    accuracy: number;
    timeliness: number;
    coverage: number;
    overallScore: number;
}
//# sourceMappingURL=types.d.ts.map


================================================================================
FILE: functions/lib/ranking/types.js
================================================================================

"use strict";
/**
 * Ranking and Materiality Types
 * Defines interfaces for ranking and personalization
 */
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=types.js.map


================================================================================
FILE: functions/lib/rss-feeds.d.ts
================================================================================

/**
 * Enhanced RSS Feed Configuration for CarrierSignal
 * Comprehensive P&C insurance news sources
 */
export interface RSSFeedConfig {
    name: string;
    url: string;
    category: 'regulatory' | 'market' | 'technology' | 'claims' | 'underwriting' | 'general';
    priority: 'high' | 'medium' | 'low';
    updateFrequency: 'hourly' | 'daily' | 'weekly';
}
export declare const RSS_FEEDS: RSSFeedConfig[];
/**
 * Get feeds by category
 */
export declare function getFeedsByCategory(category: string): RSSFeedConfig[];
/**
 * Get high-priority feeds
 */
export declare function getHighPriorityFeeds(): RSSFeedConfig[];
/**
 * Get feeds that should be updated hourly
 */
export declare function getHourlyFeeds(): RSSFeedConfig[];
//# sourceMappingURL=rss-feeds.d.ts.map


================================================================================
FILE: functions/lib/rss-feeds.js
================================================================================

"use strict";
/**
 * Enhanced RSS Feed Configuration for CarrierSignal
 * Comprehensive P&C insurance news sources
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RSS_FEEDS = void 0;
exports.getFeedsByCategory = getFeedsByCategory;
exports.getHighPriorityFeeds = getHighPriorityFeeds;
exports.getHourlyFeeds = getHourlyFeeds;
exports.RSS_FEEDS = [
    // Regulatory & Compliance
    {
        name: 'NAIC News',
        url: 'https://www.naic.org/news_feed.xml',
        category: 'regulatory',
        priority: 'high',
        updateFrequency: 'daily',
    },
    {
        name: 'Insurance Journal',
        url: 'https://www.insurancejournal.com/feed/',
        category: 'general',
        priority: 'high',
        updateFrequency: 'hourly',
    },
    {
        name: 'PropertyShark',
        url: 'https://www.propertyshark.com/feed/',
        category: 'market',
        priority: 'high',
        updateFrequency: 'daily',
    },
    // Market & Business
    {
        name: 'Insurance Thought Leadership',
        url: 'https://www.insurancethoughtleadership.com/feed/',
        category: 'market',
        priority: 'medium',
        updateFrequency: 'daily',
    },
    {
        name: 'Best\'s Insurance News',
        url: 'https://www.ambest.com/news/feed.xml',
        category: 'market',
        priority: 'high',
        updateFrequency: 'daily',
    },
    // Technology & Innovation
    {
        name: 'InsurTech Insights',
        url: 'https://www.insurtechinsights.com/feed/',
        category: 'technology',
        priority: 'medium',
        updateFrequency: 'daily',
    },
    {
        name: 'Insurtech Trends',
        url: 'https://www.insurtechtrends.com/feed/',
        category: 'technology',
        priority: 'medium',
        updateFrequency: 'daily',
    },
    // Claims & Operations
    {
        name: 'Claims Journal',
        url: 'https://www.claimsjournal.com/feed/',
        category: 'claims',
        priority: 'high',
        updateFrequency: 'daily',
    },
    {
        name: 'Risk & Insurance',
        url: 'https://www.riskandinsurance.com/feed/',
        category: 'general',
        priority: 'high',
        updateFrequency: 'daily',
    },
    // Underwriting & Actuarial
    {
        name: 'Actuarial News',
        url: 'https://www.actuarialnews.com/feed/',
        category: 'underwriting',
        priority: 'medium',
        updateFrequency: 'weekly',
    },
    {
        name: 'Underwriting News',
        url: 'https://www.underwritingnews.com/feed/',
        category: 'underwriting',
        priority: 'medium',
        updateFrequency: 'daily',
    },
    // Catastrophe & Risk
    {
        name: 'Catastrophe News',
        url: 'https://www.catastrophenews.com/feed/',
        category: 'market',
        priority: 'high',
        updateFrequency: 'hourly',
    },
    {
        name: 'Weather & Climate Risk',
        url: 'https://www.weatherclimatereport.com/feed/',
        category: 'market',
        priority: 'high',
        updateFrequency: 'daily',
    },
    // Cyber & Specialty
    {
        name: 'Cyber Insurance News',
        url: 'https://www.cyberinsurancenews.com/feed/',
        category: 'technology',
        priority: 'high',
        updateFrequency: 'daily',
    },
    {
        name: 'Specialty Insurance',
        url: 'https://www.specialtyinsurance.com/feed/',
        category: 'general',
        priority: 'medium',
        updateFrequency: 'daily',
    },
];
/**
 * Get feeds by category
 */
function getFeedsByCategory(category) {
    return exports.RSS_FEEDS.filter(feed => feed.category === category);
}
/**
 * Get high-priority feeds
 */
function getHighPriorityFeeds() {
    return exports.RSS_FEEDS.filter(feed => feed.priority === 'high');
}
/**
 * Get feeds that should be updated hourly
 */
function getHourlyFeeds() {
    return exports.RSS_FEEDS.filter(feed => feed.updateFrequency === 'hourly');
}
//# sourceMappingURL=rss-feeds.js.map


================================================================================
FILE: functions/lib/schemas.d.ts
================================================================================

/**
 * Enhanced Zod Schemas for CarrierSignal
 * Comprehensive validation with custom validators
 */
import { z } from 'zod';
/**
 * Article Processing Schema
 */
export declare const ArticleSchema: z.ZodObject<{
    url: z.ZodString;
    source: z.ZodString;
    title: z.ZodString;
    publishedAt: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    html: z.ZodOptional<z.ZodString>;
    text: z.ZodOptional<z.ZodString>;
    author: z.ZodOptional<z.ZodString>;
    mainImage: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
/**
 * Processed Article Schema (after AI processing)
 */
export declare const ProcessedArticleSchema: z.ZodObject<{
    url: z.ZodString;
    source: z.ZodString;
    title: z.ZodString;
    publishedAt: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    bullets5: z.ZodArray<z.ZodString>;
    whyItMatters: z.ZodObject<{
        underwriting: z.ZodString;
        claims: z.ZodString;
        brokerage: z.ZodString;
        actuarial: z.ZodString;
    }, z.core.$strip>;
    tags: z.ZodObject<{
        lob: z.ZodArray<z.ZodString>;
        perils: z.ZodArray<z.ZodString>;
        regions: z.ZodArray<z.ZodString>;
        companies: z.ZodArray<z.ZodString>;
        trends: z.ZodArray<z.ZodString>;
        regulations: z.ZodArray<z.ZodString>;
    }, z.core.$strip>;
    riskPulse: z.ZodEnum<{
        LOW: "LOW";
        MEDIUM: "MEDIUM";
        HIGH: "HIGH";
    }>;
    sentiment: z.ZodEnum<{
        POSITIVE: "POSITIVE";
        NEGATIVE: "NEGATIVE";
        NEUTRAL: "NEUTRAL";
    }>;
    confidence: z.ZodNumber;
    citations: z.ZodArray<z.ZodString>;
    impactScore: z.ZodNumber;
    impactBreakdown: z.ZodObject<{
        market: z.ZodNumber;
        regulatory: z.ZodNumber;
        catastrophe: z.ZodNumber;
        technology: z.ZodNumber;
    }, z.core.$strip>;
    confidenceRationale: z.ZodString;
    leadQuote: z.ZodString;
    disclosure: z.ZodString;
    smartScore: z.ZodOptional<z.ZodNumber>;
    aiScore: z.ZodOptional<z.ZodNumber>;
}, z.core.$strip>;
/**
 * Search Query Schema
 */
export declare const SearchQuerySchema: z.ZodObject<{
    query: z.ZodString;
    filters: z.ZodOptional<z.ZodObject<{
        lob: z.ZodOptional<z.ZodArray<z.ZodString>>;
        perils: z.ZodOptional<z.ZodArray<z.ZodString>>;
        regions: z.ZodOptional<z.ZodArray<z.ZodString>>;
        companies: z.ZodOptional<z.ZodArray<z.ZodString>>;
        dateRange: z.ZodOptional<z.ZodObject<{
            start: z.ZodOptional<z.ZodString>;
            end: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
        riskPulse: z.ZodOptional<z.ZodEnum<{
            LOW: "LOW";
            MEDIUM: "MEDIUM";
            HIGH: "HIGH";
        }>>;
    }, z.core.$strip>>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
}, z.core.$strip>;
/**
 * Bookmark Schema
 */
export declare const BookmarkSchema: z.ZodObject<{
    articleUrl: z.ZodString;
    userId: z.ZodString;
    createdAt: z.ZodString;
    notes: z.ZodOptional<z.ZodString>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString>>;
}, z.core.$strip>;
/**
 * User Preferences Schema
 */
export declare const UserPreferencesSchema: z.ZodObject<{
    userId: z.ZodString;
    preferredLOBs: z.ZodOptional<z.ZodArray<z.ZodString>>;
    preferredPerils: z.ZodOptional<z.ZodArray<z.ZodString>>;
    preferredRegions: z.ZodOptional<z.ZodArray<z.ZodString>>;
    notificationFrequency: z.ZodDefault<z.ZodEnum<{
        daily: "daily";
        weekly: "weekly";
        realtime: "realtime";
    }>>;
    theme: z.ZodDefault<z.ZodEnum<{
        light: "light";
        dark: "dark";
    }>>;
    sortPreference: z.ZodDefault<z.ZodEnum<{
        smart: "smart";
        recency: "recency";
    }>>;
}, z.core.$strip>;
/**
 * Validation helper functions
 */
export declare function validateArticle(data: unknown): z.ZodSafeParseResult<{
    url: string;
    source: string;
    title: string;
    publishedAt?: string | undefined;
    description?: string | undefined;
    html?: string | undefined;
    text?: string | undefined;
    author?: string | undefined;
    mainImage?: string | undefined;
}>;
export declare function validateProcessedArticle(data: unknown): z.ZodSafeParseResult<{
    url: string;
    source: string;
    title: string;
    bullets5: string[];
    whyItMatters: {
        underwriting: string;
        claims: string;
        brokerage: string;
        actuarial: string;
    };
    tags: {
        lob: string[];
        perils: string[];
        regions: string[];
        companies: string[];
        trends: string[];
        regulations: string[];
    };
    riskPulse: "LOW" | "MEDIUM" | "HIGH";
    sentiment: "POSITIVE" | "NEGATIVE" | "NEUTRAL";
    confidence: number;
    citations: string[];
    impactScore: number;
    impactBreakdown: {
        market: number;
        regulatory: number;
        catastrophe: number;
        technology: number;
    };
    confidenceRationale: string;
    leadQuote: string;
    disclosure: string;
    publishedAt?: string | undefined;
    description?: string | undefined;
    smartScore?: number | undefined;
    aiScore?: number | undefined;
}>;
export declare function validateSearchQuery(data: unknown): z.ZodSafeParseResult<{
    query: string;
    limit: number;
    offset: number;
    filters?: {
        lob?: string[] | undefined;
        perils?: string[] | undefined;
        regions?: string[] | undefined;
        companies?: string[] | undefined;
        dateRange?: {
            start?: string | undefined;
            end?: string | undefined;
        } | undefined;
        riskPulse?: "LOW" | "MEDIUM" | "HIGH" | undefined;
    } | undefined;
}>;
//# sourceMappingURL=schemas.d.ts.map


================================================================================
FILE: functions/lib/schemas.js
================================================================================

"use strict";
/**
 * Enhanced Zod Schemas for CarrierSignal
 * Comprehensive validation with custom validators
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPreferencesSchema = exports.BookmarkSchema = exports.SearchQuerySchema = exports.ProcessedArticleSchema = exports.ArticleSchema = void 0;
exports.validateArticle = validateArticle;
exports.validateProcessedArticle = validateProcessedArticle;
exports.validateSearchQuery = validateSearchQuery;
const zod_1 = require("zod");
/**
 * Custom validators
 */
const citationsMatchBullets = (data) => {
    // At least some citations should be referenced in bullets
    return data.citations.length > 0 || data.bullets5.length === 0;
};
/**
 * Article Processing Schema
 */
exports.ArticleSchema = zod_1.z.object({
    url: zod_1.z.string().url('Invalid URL format'),
    source: zod_1.z.string().min(1, 'Source is required'),
    title: zod_1.z.string().min(5, 'Title must be at least 5 characters'),
    publishedAt: zod_1.z.string().datetime().optional(),
    description: zod_1.z.string().optional(),
    html: zod_1.z.string().optional(),
    text: zod_1.z.string().optional(),
    author: zod_1.z.string().optional(),
    mainImage: zod_1.z.string().url().optional(),
});
/**
 * Processed Article Schema (after AI processing)
 */
exports.ProcessedArticleSchema = zod_1.z.object({
    url: zod_1.z.string().url(),
    source: zod_1.z.string(),
    title: zod_1.z.string(),
    publishedAt: zod_1.z.string().datetime().optional(),
    description: zod_1.z.string().optional(),
    bullets5: zod_1.z.array(zod_1.z.string()).min(3).max(5),
    whyItMatters: zod_1.z.object({
        underwriting: zod_1.z.string().min(20).max(200),
        claims: zod_1.z.string().min(20).max(200),
        brokerage: zod_1.z.string().min(20).max(200),
        actuarial: zod_1.z.string().min(20).max(200),
    }),
    tags: zod_1.z.object({
        lob: zod_1.z.array(zod_1.z.string()).max(6),
        perils: zod_1.z.array(zod_1.z.string()).max(6),
        regions: zod_1.z.array(zod_1.z.string()).max(10),
        companies: zod_1.z.array(zod_1.z.string()).max(10),
        trends: zod_1.z.array(zod_1.z.string()).max(8),
        regulations: zod_1.z.array(zod_1.z.string()).max(5),
    }),
    riskPulse: zod_1.z.enum(['LOW', 'MEDIUM', 'HIGH']),
    sentiment: zod_1.z.enum(['POSITIVE', 'NEGATIVE', 'NEUTRAL']),
    confidence: zod_1.z.number().min(0).max(1),
    citations: zod_1.z.array(zod_1.z.string().url()).max(10),
    impactScore: zod_1.z.number().min(0).max(100),
    impactBreakdown: zod_1.z.object({
        market: zod_1.z.number().min(0).max(100),
        regulatory: zod_1.z.number().min(0).max(100),
        catastrophe: zod_1.z.number().min(0).max(100),
        technology: zod_1.z.number().min(0).max(100),
    }),
    confidenceRationale: zod_1.z.string().max(200),
    leadQuote: zod_1.z.string().max(300),
    disclosure: zod_1.z.string().max(200),
    smartScore: zod_1.z.number().min(0).max(100).optional(),
    aiScore: zod_1.z.number().min(0).max(100).optional(),
}).refine(citationsMatchBullets, 'Citations should be referenced in bullets');
/**
 * Search Query Schema
 */
exports.SearchQuerySchema = zod_1.z.object({
    query: zod_1.z.string().min(1).max(500),
    filters: zod_1.z.object({
        lob: zod_1.z.array(zod_1.z.string()).optional(),
        perils: zod_1.z.array(zod_1.z.string()).optional(),
        regions: zod_1.z.array(zod_1.z.string()).optional(),
        companies: zod_1.z.array(zod_1.z.string()).optional(),
        dateRange: zod_1.z.object({
            start: zod_1.z.string().datetime().optional(),
            end: zod_1.z.string().datetime().optional(),
        }).optional(),
        riskPulse: zod_1.z.enum(['LOW', 'MEDIUM', 'HIGH']).optional(),
    }).optional(),
    limit: zod_1.z.number().min(1).max(100).default(20),
    offset: zod_1.z.number().min(0).default(0),
});
/**
 * Bookmark Schema
 */
exports.BookmarkSchema = zod_1.z.object({
    articleUrl: zod_1.z.string().url(),
    userId: zod_1.z.string(),
    createdAt: zod_1.z.string().datetime(),
    notes: zod_1.z.string().max(500).optional(),
    tags: zod_1.z.array(zod_1.z.string()).max(10).optional(),
});
/**
 * User Preferences Schema
 */
exports.UserPreferencesSchema = zod_1.z.object({
    userId: zod_1.z.string(),
    preferredLOBs: zod_1.z.array(zod_1.z.string()).optional(),
    preferredPerils: zod_1.z.array(zod_1.z.string()).optional(),
    preferredRegions: zod_1.z.array(zod_1.z.string()).optional(),
    notificationFrequency: zod_1.z.enum(['realtime', 'daily', 'weekly']).default('daily'),
    theme: zod_1.z.enum(['light', 'dark']).default('light'),
    sortPreference: zod_1.z.enum(['smart', 'recency']).default('smart'),
});
/**
 * Validation helper functions
 */
function validateArticle(data) {
    return exports.ArticleSchema.safeParse(data);
}
function validateProcessedArticle(data) {
    return exports.ProcessedArticleSchema.safeParse(data);
}
function validateSearchQuery(data) {
    return exports.SearchQuerySchema.safeParse(data);
}
//# sourceMappingURL=schemas.js.map


================================================================================
FILE: functions/lib/utils.d.ts
================================================================================

/**
 * Pure utility functions for CarrierSignal
 * These functions have no external dependencies and can be easily tested
 */
/**
 * Normalize regions to ISO 3166-2 codes
 */
export declare function normalizeRegions(regions: string[]): string[];
/**
 * Normalize company names to canonical forms
 */
export declare function normalizeCompanies(companies: string[]): string[];
/**
 * Compute content hash for deduplication
 */
export declare function computeContentHash(text: string): string;
/**
 * Detect storm/hurricane names from text
 */
export declare function detectStormName(text: string): string | undefined;
/**
 * Detect if article is from a regulatory source
 */
export declare function isRegulatorySource(url: string, source: string): boolean;
/**
 * Calculate SmartScore v3 - Enhanced for P&C Insurance Professionals
 *
 * Scoring Philosophy:
 * - Balances recency with enduring relevance (breaking news vs. structural changes)
 * - Prioritizes actionable intelligence over general news
 * - Weights catastrophe, regulatory, and market-moving events heavily
 * - Considers multi-dimensional impact (market, regulatory, catastrophe, technology)
 */
export declare function calculateSmartScore(params: {
    publishedAt?: string;
    impactScore: number;
    impactBreakdown?: {
        market?: number;
        regulatory?: number;
        catastrophe?: number;
        technology?: number;
    };
    tags?: {
        regulations?: string[];
        perils?: string[];
        lob?: string[];
        trends?: string[];
    };
    regulatory?: boolean;
    riskPulse?: 'LOW' | 'MEDIUM' | 'HIGH';
    stormName?: string;
}): number;
/**
 * Hash URL for document ID
 */
export declare function hashUrl(u: string): string;
//# sourceMappingURL=utils.d.ts.map


================================================================================
FILE: functions/lib/utils.js
================================================================================

"use strict";
/**
 * Pure utility functions for CarrierSignal
 * These functions have no external dependencies and can be easily tested
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeRegions = normalizeRegions;
exports.normalizeCompanies = normalizeCompanies;
exports.computeContentHash = computeContentHash;
exports.detectStormName = detectStormName;
exports.isRegulatorySource = isRegulatorySource;
exports.calculateSmartScore = calculateSmartScore;
exports.hashUrl = hashUrl;
const node_crypto_1 = __importDefault(require("node:crypto"));
/**
 * US State normalization map: common names/abbreviations → ISO 3166-2 codes
 */
const STATE_NORMALIZATION = {
    'alabama': 'US-AL', 'al': 'US-AL',
    'alaska': 'US-AK', 'ak': 'US-AK',
    'arizona': 'US-AZ', 'az': 'US-AZ',
    'arkansas': 'US-AR', 'ar': 'US-AR',
    'california': 'US-CA', 'ca': 'US-CA', 'calif': 'US-CA',
    'colorado': 'US-CO', 'co': 'US-CO',
    'connecticut': 'US-CT', 'ct': 'US-CT',
    'delaware': 'US-DE', 'de': 'US-DE',
    'florida': 'US-FL', 'fl': 'US-FL', 'fla': 'US-FL',
    'georgia': 'US-GA', 'ga': 'US-GA',
    'hawaii': 'US-HI', 'hi': 'US-HI',
    'idaho': 'US-ID', 'id': 'US-ID',
    'illinois': 'US-IL', 'il': 'US-IL',
    'indiana': 'US-IN', 'in': 'US-IN',
    'iowa': 'US-IA', 'ia': 'US-IA',
    'kansas': 'US-KS', 'ks': 'US-KS',
    'kentucky': 'US-KY', 'ky': 'US-KY',
    'louisiana': 'US-LA', 'la': 'US-LA',
    'maine': 'US-ME', 'me': 'US-ME',
    'maryland': 'US-MD', 'md': 'US-MD',
    'massachusetts': 'US-MA', 'ma': 'US-MA', 'mass': 'US-MA',
    'michigan': 'US-MI', 'mi': 'US-MI',
    'minnesota': 'US-MN', 'mn': 'US-MN',
    'mississippi': 'US-MS', 'ms': 'US-MS',
    'missouri': 'US-MO', 'mo': 'US-MO',
    'montana': 'US-MT', 'mt': 'US-MT',
    'nebraska': 'US-NE', 'ne': 'US-NE',
    'nevada': 'US-NV', 'nv': 'US-NV',
    'new hampshire': 'US-NH', 'nh': 'US-NH',
    'new jersey': 'US-NJ', 'nj': 'US-NJ',
    'new mexico': 'US-NM', 'nm': 'US-NM',
    'new york': 'US-NY', 'ny': 'US-NY',
    'north carolina': 'US-NC', 'nc': 'US-NC',
    'north dakota': 'US-ND', 'nd': 'US-ND',
    'ohio': 'US-OH', 'oh': 'US-OH',
    'oklahoma': 'US-OK', 'ok': 'US-OK',
    'oregon': 'US-OR', 'or': 'US-OR',
    'pennsylvania': 'US-PA', 'pa': 'US-PA',
    'rhode island': 'US-RI', 'ri': 'US-RI',
    'south carolina': 'US-SC', 'sc': 'US-SC',
    'south dakota': 'US-SD', 'sd': 'US-SD',
    'tennessee': 'US-TN', 'tn': 'US-TN',
    'texas': 'US-TX', 'tx': 'US-TX',
    'utah': 'US-UT', 'ut': 'US-UT',
    'vermont': 'US-VT', 'vt': 'US-VT',
    'virginia': 'US-VA', 'va': 'US-VA',
    'washington': 'US-WA', 'wa': 'US-WA',
    'west virginia': 'US-WV', 'wv': 'US-WV',
    'wisconsin': 'US-WI', 'wi': 'US-WI',
    'wyoming': 'US-WY', 'wy': 'US-WY',
    'district of columbia': 'US-DC', 'dc': 'US-DC', 'washington dc': 'US-DC',
};
/**
 * Company name normalization map
 */
const COMPANY_NORMALIZATION = {
    'state farm': 'State Farm',
    'statefarm': 'State Farm',
    'allstate': 'Allstate',
    'geico': 'GEICO',
    'progressive': 'Progressive',
    'usaa': 'USAA',
    'liberty mutual': 'Liberty Mutual',
    'farmers': 'Farmers Insurance',
    'nationwide': 'Nationwide',
    'travelers': 'Travelers',
    'american family': 'American Family Insurance',
    'chubb': 'Chubb',
    'hartford': 'The Hartford',
    'aig': 'AIG',
    'zurich': 'Zurich',
    'allianz': 'Allianz',
    'axa': 'AXA',
    'berkshire hathaway': 'Berkshire Hathaway',
    'markel': 'Markel',
    'fairfax': 'Fairfax Financial',
    'citizens': 'Citizens Property Insurance',
    'florida citizens': 'Citizens Property Insurance',
    'california fair plan': 'California FAIR Plan',
    'fair plan': 'California FAIR Plan',
};
/**
 * Normalize regions to ISO 3166-2 codes
 */
function normalizeRegions(regions) {
    const normalized = new Set();
    for (const region of regions) {
        const lower = region.toLowerCase().trim();
        // Already ISO format
        if (lower.startsWith('us-') && lower.length === 5) {
            normalized.add(region.toUpperCase());
            continue;
        }
        // Check normalization map
        if (STATE_NORMALIZATION[lower]) {
            normalized.add(STATE_NORMALIZATION[lower]);
        }
        else {
            // Keep original if not found
            normalized.add(region);
        }
    }
    return Array.from(normalized);
}
/**
 * Normalize company names to canonical forms
 */
function normalizeCompanies(companies) {
    const normalized = new Set();
    for (const company of companies) {
        const lower = company.toLowerCase().trim();
        if (COMPANY_NORMALIZATION[lower]) {
            normalized.add(COMPANY_NORMALIZATION[lower]);
        }
        else {
            // Keep original if not found
            normalized.add(company);
        }
    }
    return Array.from(normalized);
}
/**
 * Compute content hash for deduplication
 */
function computeContentHash(text) {
    const normalized = text.toLowerCase()
        .replace(/[^a-z0-9\s]/g, '')
        .replace(/\s+/g, ' ')
        .trim();
    const sample = normalized.slice(0, 500);
    return node_crypto_1.default.createHash("sha256").update(sample).digest("hex").slice(0, 16);
}
/**
 * Detect storm/hurricane names from text
 */
function detectStormName(text) {
    const patterns = [
        /Hurricane\s+([A-Z][a-z]+)/gi,
        /Tropical\s+Storm\s+([A-Z][a-z]+)/gi,
        /Typhoon\s+([A-Z][a-z]+)/gi,
        /Cyclone\s+([A-Z][a-z]+)/gi,
    ];
    for (const pattern of patterns) {
        const match = pattern.exec(text);
        if (match) {
            return match[0];
        }
    }
    return undefined;
}
/**
 * Detect if article is from a regulatory source
 */
function isRegulatorySource(url, source) {
    const regulatoryUrlKeywords = [
        'doi.', 'insurance.ca.gov', 'floir.com', 'tdi.texas.gov',
        'dfs.ny.gov', 'insurance.pa.gov', 'naic.org',
    ];
    const regulatorySourceKeywords = [
        'naic', 'dfs', 'doi', 'department of insurance', 'insurance commissioner',
        'state insurance', 'regulatory', 'regulator',
    ];
    const urlLower = url.toLowerCase();
    const sourceLower = source.toLowerCase();
    return regulatoryUrlKeywords.some(keyword => urlLower.includes(keyword)) ||
        regulatorySourceKeywords.some(keyword => sourceLower.includes(keyword));
}
/**
 * Calculate SmartScore v3 - Enhanced for P&C Insurance Professionals
 *
 * Scoring Philosophy:
 * - Balances recency with enduring relevance (breaking news vs. structural changes)
 * - Prioritizes actionable intelligence over general news
 * - Weights catastrophe, regulatory, and market-moving events heavily
 * - Considers multi-dimensional impact (market, regulatory, catastrophe, technology)
 */
function calculateSmartScore(params) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    const now = Date.now();
    const pubDate = params.publishedAt ? new Date(params.publishedAt).getTime() : now;
    const ageHours = Math.max(0, (now - pubDate) / (1000 * 60 * 60));
    // Enhanced recency decay with different curves for different content types
    // Catastrophe/regulatory news: slower decay (72h half-life)
    // Market news: medium decay (48h half-life)
    // General news: faster decay (24h half-life)
    // FIX: Correct boolean logic - was using truthy chain that misclassified
    const isCatastrophe = !!params.stormName || ((_b = (_a = params.impactBreakdown) === null || _a === void 0 ? void 0 : _a.catastrophe) !== null && _b !== void 0 ? _b : 0) > 50;
    const isRegulatory = params.regulatory || (((_c = params.tags) === null || _c === void 0 ? void 0 : _c.regulations) && params.tags.regulations.length > 0);
    let halfLife = 24; // Default: 24 hours
    if (isCatastrophe)
        halfLife = 72; // Catastrophe news stays relevant longer
    else if (isRegulatory)
        halfLife = 48; // Regulatory news has medium longevity
    const recencyScore = Math.exp(-ageHours / (halfLife * 1.44)) * 100; // 1.44 converts half-life to decay constant
    // Multi-dimensional impact scoring
    const impactBreakdown = params.impactBreakdown || {
        market: params.impactScore * 0.25,
        regulatory: params.impactScore * 0.25,
        catastrophe: params.impactScore * 0.25,
        technology: params.impactScore * 0.25,
    };
    // Weight different impact dimensions based on P&C industry priorities
    const weightedImpact = (impactBreakdown.market || 0) * 0.30 + // Market impact: 30% (rates, capacity, competition)
        (impactBreakdown.regulatory || 0) * 0.35 + // Regulatory: 35% (highest - directly affects operations)
        (impactBreakdown.catastrophe || 0) * 0.25 + // Catastrophe: 25% (loss events, exposure)
        (impactBreakdown.technology || 0) * 0.10; // Technology: 10% (innovation, but less immediate)
    // Risk pulse multiplier (industry disruption potential)
    const riskPulseMultiplier = params.riskPulse === 'HIGH' ? 1.25 :
        params.riskPulse === 'MEDIUM' ? 1.10 :
            1.0;
    // Regulatory boost (critical for compliance and operations)
    const regulatoryBoost = isRegulatory ? 1.20 : 1.0;
    // Catastrophe boost with graduated scale
    const catPerils = ['Hurricane', 'Wildfire', 'Earthquake', 'Flood', 'Tornado', 'Severe Weather', 'Hail', 'Winter Storm', 'Convective Storm'];
    const hasCatPeril = ((_e = (_d = params.tags) === null || _d === void 0 ? void 0 : _d.perils) === null || _e === void 0 ? void 0 : _e.some(p => catPerils.some(cat => p.toLowerCase().includes(cat.toLowerCase())))) || false;
    // Named storm gets higher boost
    const catastropheBoost = params.stormName ? 1.30 : (hasCatPeril ? 1.15 : 1.0);
    // High-value trend boost (emerging risks and opportunities)
    const highValueTrends = [
        'Climate Risk', 'Social Inflation', 'GenAI', 'Litigation Funding',
        'Tort Reform', 'Rate Adequacy', 'Reinsurance', 'Capacity Constraints',
        'Nuclear Verdicts', 'Assignment of Benefits', 'Parametric Insurance'
    ];
    const hasHighValueTrend = ((_g = (_f = params.tags) === null || _f === void 0 ? void 0 : _f.trends) === null || _g === void 0 ? void 0 : _g.some(t => highValueTrends.some(hvt => t.toLowerCase().includes(hvt.toLowerCase())))) || false;
    const trendBoost = hasHighValueTrend ? 1.10 : 1.0;
    // Multi-LOB coverage boost (broader industry relevance)
    const lobCount = ((_j = (_h = params.tags) === null || _h === void 0 ? void 0 : _h.lob) === null || _j === void 0 ? void 0 : _j.length) || 0;
    const lobBoost = lobCount >= 3 ? 1.08 : (lobCount >= 2 ? 1.04 : 1.0);
    // Calculate base score with enhanced weighting
    // Recency: 35% (down from 40% to reduce recency bias)
    // Impact: 65% (up from 60% to prioritize substance over timing)
    const baseScore = (recencyScore * 0.35) + (weightedImpact * 0.65);
    // Apply all multipliers
    const smartScore = Math.min(100, baseScore *
        riskPulseMultiplier *
        regulatoryBoost *
        catastropheBoost *
        trendBoost *
        lobBoost);
    return Math.round(smartScore * 10) / 10;
}
/**
 * Hash URL for document ID
 */
function hashUrl(u) {
    return node_crypto_1.default.createHash("sha256").update(u).digest("hex").slice(0, 24);
}
//# sourceMappingURL=utils.js.map


================================================================================
FILE: functions/package-lock.json
================================================================================

{
  "name": "functions",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "functions",
      "dependencies": {
        "@mozilla/readability": "^0.6.0",
        "cors": "^2.8.5",
        "exponential-backoff": "^3.1.3",
        "firebase-admin": "^13.0.1",
        "firebase-functions": "^6.3.0",
        "jsdom": "^27.0.1",
        "openai": "^6.7.0",
        "rss-parser": "^3.13.0",
        "zod": "^4.1.12"
      },
      "devDependencies": {
        "@types/cors": "^2.8.19",
        "@types/jest": "^30.0.0",
        "@types/jsdom": "^27.0.0",
        "@types/node": "^20.0.0",
        "@typescript-eslint/eslint-plugin": "^8.0.0",
        "@typescript-eslint/parser": "^8.0.0",
        "eslint": "^9.0.0",
        "eslint-config-google": "^0.14.0",
        "eslint-plugin-import": "^2.29.1",
        "ts-node": "^10.9.0",
        "typescript": "^5.5.0"
      },
      "engines": {
        "node": "20"
      }
    },
    "node_modules/@asamuzakjp/css-color": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@asamuzakjp/css-color/-/css-color-4.0.5.tgz",
      "integrity": "sha512-lMrXidNhPGsDjytDy11Vwlb6OIGrT3CmLg3VWNFyWkLWtijKl7xjvForlh8vuj0SHGjgl4qZEQzUmYTeQA2JFQ==",
      "license": "MIT",
      "dependencies": {
        "@csstools/css-calc": "^2.1.4",
        "@csstools/css-color-parser": "^3.1.0",
        "@csstools/css-parser-algorithms": "^3.0.5",
        "@csstools/css-tokenizer": "^3.0.4",
        "lru-cache": "^11.2.1"
      }
    },
    "node_modules/@asamuzakjp/css-color/node_modules/lru-cache": {
      "version": "11.2.2",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.2.2.tgz",
      "integrity": "sha512-F9ODfyqML2coTIsQpSkRHnLSZMtkU8Q+mSfcaIyKwy58u+8k5nvAYeiNhsyMARvzNcXJ9QfWVrcPsC9e9rAxtg==",
      "license": "ISC",
      "engines": {
        "node": "20 || >=22"
      }
    },
    "node_modules/@asamuzakjp/dom-selector": {
      "version": "6.7.3",
      "resolved": "https://registry.npmjs.org/@asamuzakjp/dom-selector/-/dom-selector-6.7.3.tgz",
      "integrity": "sha512-kiGFeY+Hxf5KbPpjRLf+ffWbkos1aGo8MBfd91oxS3O57RgU3XhZrt/6UzoVF9VMpWbC3v87SRc9jxGrc9qHtQ==",
      "license": "MIT",
      "dependencies": {
        "@asamuzakjp/nwsapi": "^2.3.9",
        "bidi-js": "^1.0.3",
        "css-tree": "^3.1.0",
        "is-potential-custom-element-name": "^1.0.1",
        "lru-cache": "^11.2.2"
      }
    },
    "node_modules/@asamuzakjp/dom-selector/node_modules/lru-cache": {
      "version": "11.2.2",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.2.2.tgz",
      "integrity": "sha512-F9ODfyqML2coTIsQpSkRHnLSZMtkU8Q+mSfcaIyKwy58u+8k5nvAYeiNhsyMARvzNcXJ9QfWVrcPsC9e9rAxtg==",
      "license": "ISC",
      "engines": {
        "node": "20 || >=22"
      }
    },
    "node_modules/@asamuzakjp/nwsapi": {
      "version": "2.3.9",
      "resolved": "https://registry.npmjs.org/@asamuzakjp/nwsapi/-/nwsapi-2.3.9.tgz",
      "integrity": "sha512-n8GuYSrI9bF7FFZ/SjhwevlHc8xaVlb/7HmHelnc/PZXBD2ZR49NnN9sMMuDdEGPeeRQ5d0hqlSlEpgCX3Wl0Q==",
      "license": "MIT"
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.28.5.tgz",
      "integrity": "sha512-qSs4ifwzKJSV39ucNjsvc6WVHs6b7S03sOh2OcHF9UHfVPqWWALUsNUVzhSBiItjRZoLHx7nIarVjqKVusUZ1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@csstools/color-helpers": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@csstools/color-helpers/-/color-helpers-5.1.0.tgz",
      "integrity": "sha512-S11EXWJyy0Mz5SYvRmY8nJYTFFd1LCNV+7cXyAgQtOOuzb4EsgfqDufL+9esx72/eLhsRdGZwaldu/h+E4t4BA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT-0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@csstools/css-calc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@csstools/css-calc/-/css-calc-2.1.4.tgz",
      "integrity": "sha512-3N8oaj+0juUw/1H3YwmDDJXCgTB1gKU6Hc/bB502u9zR0q2vd786XJH9QfrKIEgFlZmhZiq6epXl4rHqhzsIgQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@csstools/css-parser-algorithms": "^3.0.5",
        "@csstools/css-tokenizer": "^3.0.4"
      }
    },
    "node_modules/@csstools/css-color-parser": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@csstools/css-color-parser/-/css-color-parser-3.1.0.tgz",
      "integrity": "sha512-nbtKwh3a6xNVIp/VRuXV64yTKnb1IjTAEEh3irzS+HkKjAOYLTGNb9pmVNntZ8iVBHcWDA2Dof0QtPgFI1BaTA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@csstools/color-helpers": "^5.1.0",
        "@csstools/css-calc": "^2.1.4"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@csstools/css-parser-algorithms": "^3.0.5",
        "@csstools/css-tokenizer": "^3.0.4"
      }
    },
    "node_modules/@csstools/css-parser-algorithms": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/@csstools/css-parser-algorithms/-/css-parser-algorithms-3.0.5.tgz",
      "integrity": "sha512-DaDeUkXZKjdGhgYaHNJTV9pV7Y9B3b644jCLs9Upc3VeNGg6LWARAT6O+Q+/COo+2gg/bM5rhpMAtf70WqfBdQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@csstools/css-tokenizer": "^3.0.4"
      }
    },
    "node_modules/@csstools/css-syntax-patches-for-csstree": {
      "version": "1.0.14",
      "resolved": "https://registry.npmjs.org/@csstools/css-syntax-patches-for-csstree/-/css-syntax-patches-for-csstree-1.0.14.tgz",
      "integrity": "sha512-zSlIxa20WvMojjpCSy8WrNpcZ61RqfTfX3XTaOeVlGJrt/8HF3YbzgFZa01yTbT4GWQLwfTcC3EB8i3XnB647Q==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT-0",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/@csstools/css-tokenizer": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@csstools/css-tokenizer/-/css-tokenizer-3.0.4.tgz",
      "integrity": "sha512-Vd/9EVDiu6PPJt9yAh6roZP6El1xHrdvIVGjyBsHR0RYwNHgL7FJPyIIW4fANJNG6FtyZfvlRPpFI4ZM/lubvw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.2",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.2.tgz",
      "integrity": "sha512-EriSTlt5OC9/7SXkRSCAhfSxxoSUgBm33OH+IkwbdpgoqsSsUg7y3uh+IICI/Qg4BBWr3U2i39RpmycbxMq4ew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.1.tgz",
      "integrity": "sha512-aw1gNayWpdI/jSYVgzN5pL0cfzU02GT3NBpeT/DXbx1/1x7ZKxFPd9bwrzygx/qiwIQiJ1sw/zD8qY/kRvlGHA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.7",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-array/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/@eslint/config-array/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.4.1.tgz",
      "integrity": "sha512-csZAzkNhsgwb0I/UAV6/RGFTbiakPCf0ZrGmrIxQpYvGZ00PhTkSnyKNolphgIvmnJeGw6rcGVEXfTzUnFuEvw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.16.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.16.0.tgz",
      "integrity": "sha512-nmC8/totwobIiFcGkDza3GIKfAw1+hLiYVrh3I1nIomQ8PEr5cxg34jnkmGawul/ep52wGRAcyeDCNtWKSOj4Q==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.38.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.38.0.tgz",
      "integrity": "sha512-UZ1VpFvXf9J06YG9xQBdnzU+kthors6KjhMAl6f4gH4usHyh31rUf2DLGInT8RFYIReYXNSydgPY0V2LuWgl7A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.7",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.7.tgz",
      "integrity": "sha512-VtAOaymWVfZcmZbp6E2mympDIHvyjXs/12LqWYjVw6qjrfF+VK+fyG33kChz3nnK+SU5/NeHOqrTEHS8sXO3OA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.4.0.tgz",
      "integrity": "sha512-sB5uyeq+dwCWyPi31B2gQlVlo+j5brPlWx4yZBrEaRo/nhdDE8Xke1gsGgtiBdaBTxuTkceLVuVt/pclrasb0A==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.16.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@fastify/busboy": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-3.2.0.tgz",
      "integrity": "sha512-m9FVDXU3GT2ITSe0UaMA5rU3QkfC/UXtCU8y0gSN/GugTqtVldOBWIB5V6V3sbmenVZUIpU6f+mPEO2+m5iTaA==",
      "license": "MIT"
    },
    "node_modules/@firebase/app-check-interop-types": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.3.tgz",
      "integrity": "sha512-gAlxfPLT2j8bTI/qfe3ahl2I2YcBQ8cFIBdhAQA4I2f3TndcO+22YizyGYuttLHPQEpWkhmpFW60VCFEPg4g5A==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-types": {
      "version": "0.9.3",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.3.tgz",
      "integrity": "sha512-kRVpIl4vVGJ4baogMDINbyrIOtOxqhkZQg4jTq3l8Lw6WSk0xfpEYzezFu+Kl4ve4fbPl79dvwRtaFqAC/ucCw==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth-interop-types": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.4.tgz",
      "integrity": "sha512-JPgcXKCuO+CWqGDnigBtvo09HeBs5u/Ktc2GaFj2m01hLarbxthLNm7Fk8iOP1aqAtXV+fnnGj7U28xmk7IwVA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/component": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.7.0.tgz",
      "integrity": "sha512-wR9En2A+WESUHexjmRHkqtaVH94WLNKt6rmeqZhSLBybg4Wyf0Umk04SZsS6sBq4102ZsDBFwoqMqJYj2IoDSg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/database": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.1.0.tgz",
      "integrity": "sha512-gM6MJFae3pTyNLoc9VcJNuaUDej0ctdjn3cVtILo3D5lpp0dmUHHLFN/pUKe7ImyeB1KAvRlEYxvIHNF04Filg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.3",
        "@firebase/auth-interop-types": "0.2.4",
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/database-compat": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-2.1.0.tgz",
      "integrity": "sha512-8nYc43RqxScsePVd1qe1xxvWNf0OBnbwHxmXJ7MHSuuTVYFO3eLyLW3PiCKJ9fHnmIz4p4LbieXwz+qtr9PZDg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/database": "1.1.0",
        "@firebase/database-types": "1.0.16",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/database-types": {
      "version": "1.0.16",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.16.tgz",
      "integrity": "sha512-xkQLQfU5De7+SPhEGAXFBnDryUWhhlFXelEg2YeZOQMCdoe7dL64DDAd77SQsR+6uoXIZY5MB4y/inCs4GTfcw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-types": "0.9.3",
        "@firebase/util": "1.13.0"
      }
    },
    "node_modules/@firebase/logger": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.5.0.tgz",
      "integrity": "sha512-cGskaAvkrnh42b3BA3doDWeBmuHFO/Mx5A83rbRDYakPjO9bJtRL3dX7javzc2Rr/JHZf4HlterTW2lUkfeN4g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/util": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.13.0.tgz",
      "integrity": "sha512-0AZUyYUfpMNcztR5l09izHwXkZpghLgCUaAGjtMwXnCg3bj4ml5VgiwqOMOxJ+Nw4qN/zJAaOQBcJ7KGkWStqQ==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@google-cloud/firestore": {
      "version": "7.11.6",
      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-7.11.6.tgz",
      "integrity": "sha512-EW/O8ktzwLfyWBOsNuhRoMi8lrC3clHM5LVFhGvO1HCsLozCOOXRAlHrYBoE6HL42Sc8yYMuCb2XqcnJ4OOEpw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@opentelemetry/api": "^1.3.0",
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^4.3.3",
        "protobufjs": "^7.2.6"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/paginator": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-5.0.2.tgz",
      "integrity": "sha512-DJS3s0OVH4zFDB1PzjxAsHqJT6sKVbRwwML0ZBP9PbU7Yebtu/7SWMRzvO2J3nUi9pRNITCfu4LJeooM2w4pjg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/projectify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-4.0.0.tgz",
      "integrity": "sha512-MmaX6HeSvyPbWGwFq7mXdo0uQZLGBYCwziiLIGq5JVX+/bdI3SAq6bP98trV5eTWfLuvsMcIC1YJOF2vfteLFA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/promisify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-4.0.0.tgz",
      "integrity": "sha512-Orxzlfb9c67A15cq2JQEyVc7wEsmFBmHjZWZYQMUyJ1qivXyMwdyNOs9odi79hze+2zqdTtu1E19IM/FtqZ10g==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage": {
      "version": "7.17.2",
      "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-7.17.2.tgz",
      "integrity": "sha512-6xN0KNO8L/LIA5zu3CJwHkJiB6n65eykBLOb0E+RooiHYgX8CSao6lvQiKT9TBk2gL5g33LL3fmhDodZnt56rw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@google-cloud/paginator": "^5.0.0",
        "@google-cloud/projectify": "^4.0.0",
        "@google-cloud/promisify": "<4.1.0",
        "abort-controller": "^3.0.0",
        "async-retry": "^1.3.3",
        "duplexify": "^4.1.3",
        "fast-xml-parser": "^4.4.1",
        "gaxios": "^6.0.2",
        "google-auth-library": "^9.6.3",
        "html-entities": "^2.5.2",
        "mime": "^3.0.0",
        "p-limit": "^3.0.1",
        "retry-request": "^7.0.0",
        "teeny-request": "^9.0.0",
        "uuid": "^8.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.14.0",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.14.0.tgz",
      "integrity": "sha512-N8Jx6PaYzcTRNzirReJCtADVoq4z7+1KQ4E70jTg/koQiMoUSN1kbNjPOqpPbhMFhfU1/l7ixspPl8dNY+FoUg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/proto-loader": "^0.8.0",
        "@js-sdsl/ordered-map": "^4.4.2"
      },
      "engines": {
        "node": ">=12.10.0"
      }
    },
    "node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.8.0.tgz",
      "integrity": "sha512-rc1hOQtjIWGxcxpb9aHAfLpIctjEnsDehj0DAiVfBlmT84uvR0uUtN2hEi/ecvWVjXUGf5qPF4qEgiLOx1YIMQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.5.3",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.15.tgz",
      "integrity": "sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.5",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.7",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.7.tgz",
      "integrity": "sha512-/zUx+yOsIrG4Y43Eh2peDeKCxlRt/gET6aHfaKpuq267qXdYDFViVHfMaLyygZOnl0kGWxFIgsBy8QFuTLUXEQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.4.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jest/diff-sequences": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/diff-sequences/-/diff-sequences-30.0.1.tgz",
      "integrity": "sha512-n5H8QLDJ47QqbCNn5SuFjCRDrOLEZ0h8vAHCK5RL9Ls7Xa8AQLa/YxAc9UjFqoEDM48muwtBGjtMY5cr0PLDCw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-30.2.0.tgz",
      "integrity": "sha512-1JnRfhqpD8HGpOmQp180Fo9Zt69zNtC+9lR+kT7NVL05tNXIi+QC8Csz7lfidMoVLPD3FnOtcmp0CEFnxExGEA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/get-type": "30.1.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/get-type": {
      "version": "30.1.0",
      "resolved": "https://registry.npmjs.org/@jest/get-type/-/get-type-30.1.0.tgz",
      "integrity": "sha512-eMbZE2hUnx1WV0pmURZY9XoXPkUYjpc55mb0CrhtdWLtzMQPFvu/rZkTLZFTsdaVQa+Tr4eWAteqcUzoawq/uA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/pattern": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/@jest/pattern/-/pattern-30.0.1.tgz",
      "integrity": "sha512-gWp7NfQW27LaBQz3TITS8L7ZCQ0TLvtmI//4OwlQRx4rnWxcPNIYjxZpDcN4+UlGxgm3jS5QPz8IPTCkb59wZA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "jest-regex-util": "30.0.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/schemas": {
      "version": "30.0.5",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-30.0.5.tgz",
      "integrity": "sha512-DmdYgtezMkh3cpU8/1uyXakv3tJRcmcXxBOcO0tbaozPwpmh4YMsnWrQm9ZmZMfa5ocbxzbFk6O4bDPEc/iAnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.34.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-30.2.0.tgz",
      "integrity": "sha512-H9xg1/sfVvyfU7o3zMfBEjQ1gcsdeTMgqHoYdN79tuLqfTtuu7WckRA1R5whDwOzxaZAeMKTYWqP+WCAi0CHsg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/pattern": "30.0.1",
        "@jest/schemas": "30.0.5",
        "@types/istanbul-lib-coverage": "^2.0.6",
        "@types/istanbul-reports": "^3.0.4",
        "@types/node": "*",
        "@types/yargs": "^17.0.33",
        "chalk": "^4.1.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@js-sdsl/ordered-map": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
      "integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
      "license": "MIT",
      "optional": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/js-sdsl"
      }
    },
    "node_modules/@mozilla/readability": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/@mozilla/readability/-/readability-0.6.0.tgz",
      "integrity": "sha512-juG5VWh4qAivzTAeMzvY9xs9HY5rAcr2E4I7tiSSCokRFi7XIZCAu92ZkSTsIj1OPceCifL3cpfteP3pDT9/QQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@opentelemetry/api": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
      "integrity": "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@rtsao/scc": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.34.41",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.41.tgz",
      "integrity": "sha512-6gS8pZzSXdyRHTIqoqSVknxolr1kzfy4/CeDnrzsVz8TTIWUbOBr6gnzOmTYJ3eXQNh4IYHIGi5aIL7sOZ2G/g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.6",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.6.tgz",
      "integrity": "sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/caseless": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/@types/caseless/-/caseless-0.12.5.tgz",
      "integrity": "sha512-hWtVTC2q7hc7xZ/RLbxapMvDMgUnDvKvMOpKal4DrMyfGBUfB1oKaZlIRr6mJL+If3bAP6sV/QneGzF6tJjZDg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/cors": {
      "version": "2.8.19",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.19.tgz",
      "integrity": "sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/express": {
      "version": "4.17.24",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.24.tgz",
      "integrity": "sha512-Mbrt4SRlXSTWryOnHAh2d4UQ/E7n9lZyGSi6KgX+4hkuL9soYbLOVXVhnk/ODp12YsGc95f4pOvqywJ6kngUwg==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.19.7",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.7.tgz",
      "integrity": "sha512-FvPtiIf1LfhzsaIXhv/PHan/2FeQBbtBDtfX2QfvPxdUelMDEckK08SM6nqo1MIZY3RUlfA+HV8+hFUSio78qg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.5.tgz",
      "integrity": "sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==",
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/jest": {
      "version": "30.0.0",
      "resolved": "https://registry.npmjs.org/@types/jest/-/jest-30.0.0.tgz",
      "integrity": "sha512-XTYugzhuwqWjws0CVz8QpM36+T+Dz5mTEBKhNs/esGLnCIlGdRy+Dq78NRjd7ls7r8BC8ZRMOrKlkO1hU0JOwA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "expect": "^30.0.0",
        "pretty-format": "^30.0.0"
      }
    },
    "node_modules/@types/jsdom": {
      "version": "27.0.0",
      "resolved": "https://registry.npmjs.org/@types/jsdom/-/jsdom-27.0.0.tgz",
      "integrity": "sha512-NZyFl/PViwKzdEkQg96gtnB8wm+1ljhdDay9ahn4hgb+SfVtPCbm3TlmDUFXTA+MGN3CijicnMhG18SI5H3rFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/tough-cookie": "*",
        "parse5": "^7.0.0"
      }
    },
    "node_modules/@types/jsdom/node_modules/parse5": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.3.0.tgz",
      "integrity": "sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "entities": "^6.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.10",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.10.tgz",
      "integrity": "sha512-asx5hIG9Qmf/1oStypjanR7iKTv0gXQ1Ov/jfrX6kS/EO0OFni8orbmGCn0672NHR3kXHwpAwR+B368ZGN/2rA==",
      "license": "MIT",
      "dependencies": {
        "@types/ms": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/long": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.2.tgz",
      "integrity": "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "20.19.24",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.24.tgz",
      "integrity": "sha512-FE5u0ezmi6y9OZEzlJfg37mqqf6ZDSF2V/NLjUyGrR9uTZ7Sb9F7bLNZ03S4XVUNRWGA7Ck4c1kK+YnuWjl+DA==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/request": {
      "version": "2.48.13",
      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.13.tgz",
      "integrity": "sha512-FGJ6udDNUCjd19pp0Q3iTiDkwhYup7J8hpMW9c4k53NrccQFFWKRho6hvtPPEhnXWKvukfwAlB6DbDz4yhH5Gg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/caseless": "*",
        "@types/node": "*",
        "@types/tough-cookie": "*",
        "form-data": "^2.5.5"
      }
    },
    "node_modules/@types/send": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-1.2.1.tgz",
      "integrity": "sha512-arsCikDvlU99zl1g69TcAB3mzZPpxgw0UQnaHeC1Nwb015xp8bknZv5rIfri9xTOcMuaVgvabfIRA7PSZVuZIQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.10",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.10.tgz",
      "integrity": "sha512-tRs1dB+g8Itk72rlSI2ZrW6vZg0YrLI81iQSTkMmOqnqCaNr/8Ek4VwWcN5vZgCYWbg/JJSGBlUaYGAOP73qBw==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "<1"
      }
    },
    "node_modules/@types/serve-static/node_modules/@types/send": {
      "version": "0.17.6",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.6.tgz",
      "integrity": "sha512-Uqt8rPBE8SY0RK8JB1EzVOIZ32uqy8HwdxCnoCOsYrvnswqmFZ/k+9Ikidlk/ImhsdvBsloHbAlewb2IEBV/Og==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/tough-cookie": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
      "integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/@types/yargs": {
      "version": "17.0.34",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.34.tgz",
      "integrity": "sha512-KExbHVa92aJpw9WDQvzBaGVE2/Pz+pLZQloT2hjL8IqsZnV62rlPOYvNnLmf/L2dyllfVUOVBj64M0z/46eR2A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.46.2.tgz",
      "integrity": "sha512-ZGBMToy857/NIPaaCucIUQgqueOiq7HeAKkhlvqVV4lm089zUFW6ikRySx2v+cAhKeUCPuWVHeimyk6Dw1iY3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.46.2",
        "@typescript-eslint/type-utils": "8.46.2",
        "@typescript-eslint/utils": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.46.2",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.46.2.tgz",
      "integrity": "sha512-BnOroVl1SgrPLywqxyqdJ4l3S2MsKVLDVxZvjI1Eoe8ev2r3kGDo+PcMihNmDE+6/KjkTubSJnmqGZZjQSBq/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.46.2",
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/typescript-estree": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.46.2.tgz",
      "integrity": "sha512-PULOLZ9iqwI7hXcmL4fVfIsBi6AN9YxRc0frbvmg8f+4hQAjQ5GYNKK0DIArNo+rOKmR/iBYwkpBmnIwin4wBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.46.2",
        "@typescript-eslint/types": "^8.46.2",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.46.2.tgz",
      "integrity": "sha512-LF4b/NmGvdWEHD2H4MsHD8ny6JpiVNDzrSZr3CsckEgCbAGZbYM4Cqxvi9L+WqDMT+51Ozy7lt2M+d0JLEuBqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.46.2.tgz",
      "integrity": "sha512-a7QH6fw4S57+F5y2FIxxSDyi5M4UfGF+Jl1bCGd7+L4KsaUY80GsiF/t0UoRFDHAguKlBaACWJRmdrc6Xfkkag==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.46.2.tgz",
      "integrity": "sha512-HbPM4LbaAAt/DjxXaG9yiS9brOOz6fabal4uvUmaUYe6l3K1phQDMQKBRUrr06BQkxkvIZVVHttqiybM9nJsLA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/typescript-estree": "8.46.2",
        "@typescript-eslint/utils": "8.46.2",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.46.2.tgz",
      "integrity": "sha512-lNCWCbq7rpg7qDsQrd3D6NyWYu+gkTENkG5IKYhUIcxSb59SQC/hEQ+MrG4sTgBVghTonNWq42bA/d4yYumldQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.46.2.tgz",
      "integrity": "sha512-f7rW7LJ2b7Uh2EiQ+7sza6RDZnajbNbemn54Ob6fRwQbgcIn+GWfyuHDHRYgRoZu1P4AayVScrRW+YfbTvPQoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.46.2",
        "@typescript-eslint/tsconfig-utils": "8.46.2",
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.46.2.tgz",
      "integrity": "sha512-sExxzucx0Tud5tE0XqR0lT0psBQvEpnpiul9XbGUB1QwpWJJAps1O/Z7hJxLGiZLBKMCutjTzDgmd1muEhBnVg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.46.2",
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/typescript-estree": "8.46.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.46.2.tgz",
      "integrity": "sha512-tUFMXI4gxzzMXt4xpGJEsBsTox0XbNQ1y94EwlD/CuZwFcQP79xfQqMhau9HsRc/J0cAPA/HZt1dZPtGn9V/7w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.46.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys/node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-shim-unscopables": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/async-retry": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
      "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "retry": "0.13.1"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bidi-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/bidi-js/-/bidi-js-1.0.3.tgz",
      "integrity": "sha512-RKshQI1R3YQ+n9YJz2QQ147P66ELpa1FQEg20Dk8oW9t2KgLbpDLLp9aGZ7y8WHSshDknG0bknqGw5/tyCs5tw==",
      "license": "MIT",
      "dependencies": {
        "require-from-string": "^2.0.2"
      }
    },
    "node_modules/bignumber.js": {
      "version": "9.3.1",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.1.tgz",
      "integrity": "sha512-Ko0uX15oIUS7wJ3Rb30Fs6SkVbLmPBAKdlm7q9+ak9bbIeFf0MwuBsQV6z7+X768/cHsfg+WlysDWJcmthjsjQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/ci-info": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-4.3.1.tgz",
      "integrity": "sha512-Wdy2Igu8OcBpI2pZePZ5oWjPC38tmDVx5WKUXKwlLYkA0ozo85sLsLvkBbBn/sZaSCMFOGZJ14fvW9t5/d7kdA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/css-tree": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-3.1.0.tgz",
      "integrity": "sha512-0eW44TGN5SQXU1mWSkKwFstI/22X2bG1nYzZTYMAWjylYURhse752YgbE4Cx46AC+bAvI+/dYTPRk1LqSUnu6w==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.12.2",
        "source-map-js": "^1.0.1"
      },
      "engines": {
        "node": "^10 || ^12.20.0 || ^14.13.0 || >=15.0.0"
      }
    },
    "node_modules/cssstyle": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-5.3.1.tgz",
      "integrity": "sha512-g5PC9Aiph9eiczFpcgUhd9S4UUO3F+LHGRIi5NUMZ+4xtoIYbHNZwZnWA2JsFGe8OU8nl4WyaEFiZuGuxlutJQ==",
      "license": "MIT",
      "dependencies": {
        "@asamuzakjp/css-color": "^4.0.3",
        "@csstools/css-syntax-patches-for-csstree": "^1.0.14",
        "css-tree": "^3.1.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-urls": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-6.0.0.tgz",
      "integrity": "sha512-BnBS08aLUM+DKamupXs3w2tJJoqU+AkaE/+6vQxi/G/DPmIZFJJp9Dkb1kM03AZx8ADehDUZgsNxju3mPXZYIA==",
      "license": "MIT",
      "dependencies": {
        "whatwg-mimetype": "^4.0.0",
        "whatwg-url": "^15.0.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-urls/node_modules/tr46": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-6.0.0.tgz",
      "integrity": "sha512-bLVMLPtstlZ4iMQHpFHTR7GAGj2jxi8Dg0s2h2MafAE4uSWF98FC/3MomU51iQAMf8/qDUbKWf5GxuvvVcXEhw==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-urls/node_modules/webidl-conversions": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-8.0.0.tgz",
      "integrity": "sha512-n4W4YFyz5JzOfQeA8oN7dUYpR+MBP3PIUsn2jLjWXwK5ASUzt0Jc/A5sAUZoCYFJRGF0FBKJ+1JjN43rNdsQzA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-urls/node_modules/whatwg-url": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-15.1.0.tgz",
      "integrity": "sha512-2ytDk0kiEj/yu90JOAp44PVPUkO9+jVhyf+SybKlRHSDlvOOZhdPIrr7xTH64l4WixO2cP+wQIcgujkGBPPz6g==",
      "license": "MIT",
      "dependencies": {
        "tr46": "^6.0.0",
        "webidl-conversions": "^8.0.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debug": {
      "version": "4.4.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js": {
      "version": "10.6.0",
      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.6.0.tgz",
      "integrity": "sha512-YpgQiITW3JXGntzdUmyUR1V812Hn8T1YVXhCu+wO3OpS4eU9l4YdD3qjyiKdV6mvV29zapkMeD390UVEf2lkUg==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexify": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
      "integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.2"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/entities": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
      "integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.38.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.38.0.tgz",
      "integrity": "sha512-t5aPOpmtJcZcz5UJyY2GbvpDlsK5E8JqRqoKtfiKE3cNh437KIqfJr3A3AKf5k64NPx6d0G3dno6XDY05PqPtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.8.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.1",
        "@eslint/config-helpers": "^0.4.1",
        "@eslint/core": "^0.16.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.38.0",
        "@eslint/plugin-kit": "^0.4.0",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-config-google": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/eslint-config-google/-/eslint-config-google-0.14.0.tgz",
      "integrity": "sha512-WsbX4WbjuMvTdeVL6+J3rK1RGhCTqjsFjX7UMSMgZiyxxaNLkoJENbrGExzERFeoTpGw3F3FypTiWAP9ZXzkEw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "eslint": ">=5.16.0"
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-module-utils": {
      "version": "2.12.1",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.1.tgz",
      "integrity": "sha512-L8jSWTze7K2mTg0vos/RuLRS5soomksDPoJLXIslC7c8Wmut3bx7CPpJijDcBZtxQ5lrbUdM+s0OlNbz0DCDNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.32.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.32.0.tgz",
      "integrity": "sha512-whOE1HFo/qJDyX4SnXzP4N6zOWn79WhnCUY/iDR0mPfQZO8wcYE4JClzI2oZrhBnnMUCBCHZhO6VQyoBU95mZA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@rtsao/scc": "^1.1.0",
        "array-includes": "^3.1.9",
        "array.prototype.findlastindex": "^1.2.6",
        "array.prototype.flat": "^1.3.3",
        "array.prototype.flatmap": "^1.3.3",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.12.1",
        "hasown": "^2.0.2",
        "is-core-module": "^2.16.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "object.groupby": "^1.0.3",
        "object.values": "^1.2.1",
        "semver": "^6.3.1",
        "string.prototype.trimend": "^1.0.9",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/eslint/node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/eslint/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree/node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/expect": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/expect/-/expect-30.2.0.tgz",
      "integrity": "sha512-u/feCi0GPsI+988gU2FLcsHyAHTU0MX1Wg68NhAnN7z/+C5wqG+CY8J53N9ioe8RXgaoz0nBR/TYMf3AycUuPw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/expect-utils": "30.2.0",
        "@jest/get-type": "30.1.0",
        "jest-matcher-utils": "30.2.0",
        "jest-message-util": "30.2.0",
        "jest-mock": "30.2.0",
        "jest-util": "30.2.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/exponential-backoff": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/exponential-backoff/-/exponential-backoff-3.1.3.tgz",
      "integrity": "sha512-ZgEeZXj30q+I0EN+CbSSpIyPaJ5HVQD18Z1m+u1FXbAeT94mr1zw50q4q6jiiC447Nl/YTcIYSAftiGqetwXCA==",
      "license": "Apache-2.0"
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/farmhash-modern": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/farmhash-modern/-/farmhash-modern-1.1.0.tgz",
      "integrity": "sha512-6ypT4XfgqJk/F3Yuv4SX26I3doUjt0GTG4a+JgWxXQpxXzTBq8fPUeGHfcYMMDPHJHm3yPOSjaeBwBGAHWXCdA==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-xml-parser": {
      "version": "4.5.3",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.5.3.tgz",
      "integrity": "sha512-RKihhV+SHsIUGXObeVy9AXiBbFwkVk7Syp8XgwN5U3JV416+Gwp/GO9i0JYKmikykgz/UHRrrV4ROuZEo/T0ig==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "strnum": "^1.1.1"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      }
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/firebase-admin": {
      "version": "13.5.0",
      "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-13.5.0.tgz",
      "integrity": "sha512-QZOpv1DJRJpH8NcWiL1xXE10tw3L/bdPFlgjcWrqU3ufyOJDYfxB1MMtxiVTwxK16NlybQbEM6ciSich2uWEIQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@fastify/busboy": "^3.0.0",
        "@firebase/database-compat": "^2.0.0",
        "@firebase/database-types": "^1.0.6",
        "@types/node": "^22.8.7",
        "farmhash-modern": "^1.1.0",
        "fast-deep-equal": "^3.1.1",
        "google-auth-library": "^9.14.2",
        "jsonwebtoken": "^9.0.0",
        "jwks-rsa": "^3.1.0",
        "node-forge": "^1.3.1",
        "uuid": "^11.0.2"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@google-cloud/firestore": "^7.11.0",
        "@google-cloud/storage": "^7.14.0"
      }
    },
    "node_modules/firebase-admin/node_modules/@types/node": {
      "version": "22.18.13",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.18.13.tgz",
      "integrity": "sha512-Bo45YKIjnmFtv6I1TuC8AaHBbqXtIo+Om5fE4QiU1Tj8QR/qt+8O3BAtOimG5IFmwaWiPmB3Mv3jtYzBA4Us2A==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/firebase-functions": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/firebase-functions/-/firebase-functions-6.6.0.tgz",
      "integrity": "sha512-wwfo6JF+N7HUExVs5gUFgkgVGHDEog9O+qtouh7IuJWk8TBQ+KwXEgRiXbatSj7EbTu3/yYnHuzh3XExbfF6wQ==",
      "license": "MIT",
      "dependencies": {
        "@types/cors": "^2.8.5",
        "@types/express": "^4.17.21",
        "cors": "^2.8.5",
        "express": "^4.21.0",
        "protobufjs": "^7.2.2"
      },
      "bin": {
        "firebase-functions": "lib/bin/firebase-functions.js"
      },
      "engines": {
        "node": ">=14.10.0"
      },
      "peerDependencies": {
        "firebase-admin": "^11.10.0 || ^12.0.0 || ^13.0.0"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/form-data": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.5.5.tgz",
      "integrity": "sha512-jqdObeR2rxZZbPSGL+3VckHMYtu+f9//KXBsVny6JSX/pa38Fy+bGjuG8eW/H6USNQWhLi8Num++cU2yOCNz4A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.35",
        "safe-buffer": "^5.2.1"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gaxios": {
      "version": "6.7.1",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gaxios/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
      "integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
      "license": "Apache-2.0",
      "dependencies": {
        "gaxios": "^6.1.1",
        "google-logging-utils": "^0.0.2",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/generator-function": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/generator-function/-/generator-function-2.0.1.tgz",
      "integrity": "sha512-SFdFmIJi+ybC0vjlHN0ZGVGHc3lgE0DxPAT0djjVg+kjOnSqclqmj0KQ7ykTOLP6YxoqOvuAODGdcHJn+43q3g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "optional": true,
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/google-auth-library": {
      "version": "9.15.1",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
      "integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
      "license": "Apache-2.0",
      "dependencies": {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "gaxios": "^6.1.1",
        "gcp-metadata": "^6.1.0",
        "gtoken": "^7.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-gax": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-4.6.1.tgz",
      "integrity": "sha512-V6eky/xz2mcKfAd1Ioxyd6nmA61gao3n01C+YeuIwu3vzM9EDR6wcVzMSIbLMDXWeoi9SHYctXuKYC5uJUT3eQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/grpc-js": "^1.10.9",
        "@grpc/proto-loader": "^0.7.13",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "google-auth-library": "^9.3.0",
        "node-fetch": "^2.7.0",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^2.0.2",
        "protobufjs": "^7.3.2",
        "retry-request": "^7.0.0",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-gax/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/google-logging-utils": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
      "integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/gtoken": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
      "license": "MIT",
      "dependencies": {
        "gaxios": "^6.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html-encoding-sniffer": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-4.0.0.tgz",
      "integrity": "sha512-Y22oTqIU4uuPgEemfz7NDJz6OeKf12Lsu+QC+s3BVpda64lTiMYCyGwg5ki4vFxkMwQdeZDl2adZoqUgdFuTgQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-encoding": "^3.1.1"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/html-entities": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.6.0.tgz",
      "integrity": "sha512-kig+rMn/QOVRvr7c86gQ8lWXq+Hkv6CbAH1hLu+RG338StTpE8Z0b44SDVaqVu7HGKf27frdmUYEs9hTUX/cLQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/mdevils"
        },
        {
          "type": "patreon",
          "url": "https://patreon.com/mdevils"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
      "integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
      "license": "MIT"
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-agent/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.2.tgz",
      "integrity": "sha512-upqt1SkGkODW9tsGNG5mtXTXtECizwtS2kA161M+gJPc1xdb/Ax629af6YrTwcOeQHbewrPNlE5Dx7kzvXTizA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.4",
        "generator-function": "^2.0.0",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-potential-custom-element-name": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz",
      "integrity": "sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==",
      "license": "MIT"
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/jest-diff": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-30.2.0.tgz",
      "integrity": "sha512-dQHFo3Pt4/NLlG5z4PxZ/3yZTZ1C7s9hveiOj+GCN+uT109NC2QgsoVZsVOAvbJ3RgKkvyLGXZV9+piDpWbm6A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/diff-sequences": "30.0.1",
        "@jest/get-type": "30.1.0",
        "chalk": "^4.1.2",
        "pretty-format": "30.2.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-30.2.0.tgz",
      "integrity": "sha512-dQ94Nq4dbzmUWkQ0ANAWS9tBRfqCrn0bV9AMYdOi/MHW726xn7eQmMeRTpX2ViC00bpNaWXq+7o4lIQ3AX13Hg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/get-type": "30.1.0",
        "chalk": "^4.1.2",
        "jest-diff": "30.2.0",
        "pretty-format": "30.2.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-30.2.0.tgz",
      "integrity": "sha512-y4DKFLZ2y6DxTWD4cDe07RglV88ZiNEdlRfGtqahfbIjfsw1nMCPx49Uev4IA/hWn3sDKyAnSPwoYSsAEdcimw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@jest/types": "30.2.0",
        "@types/stack-utils": "^2.0.3",
        "chalk": "^4.1.2",
        "graceful-fs": "^4.2.11",
        "micromatch": "^4.0.8",
        "pretty-format": "30.2.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-30.2.0.tgz",
      "integrity": "sha512-JNNNl2rj4b5ICpmAcq+WbLH83XswjPbjH4T7yvGzfAGCPh1rw+xVNbtk+FnRslvt9lkCcdn9i1oAoKUuFsOxRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "30.2.0",
        "@types/node": "*",
        "jest-util": "30.2.0"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-regex-util": {
      "version": "30.0.1",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-30.0.1.tgz",
      "integrity": "sha512-jHEQgBXAgc+Gh4g0p3bCevgRCVRkB4VB70zhoAE48gxeSr1hfUOsM/C2WoJgVL7Eyg//hudYENbm3Ne+/dRVVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-util": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-30.2.0.tgz",
      "integrity": "sha512-QKNsM0o3Xe6ISQU869e+DhG+4CK/48aHYdJZGlFQVTjnbvgpcKyxpzk29fGiO7i/J8VENZ+d2iGnSsvmuHywlA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "30.2.0",
        "@types/node": "*",
        "chalk": "^4.1.2",
        "ci-info": "^4.2.0",
        "graceful-fs": "^4.2.11",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/jest-util/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/jose": {
      "version": "4.15.9",
      "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
      "integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsdom": {
      "version": "27.0.1",
      "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-27.0.1.tgz",
      "integrity": "sha512-SNSQteBL1IlV2zqhwwolaG9CwhIhTvVHWg3kTss/cLE7H/X4644mtPQqYvCfsSrGQWt9hSZcgOXX8bOZaMN+kA==",
      "license": "MIT",
      "dependencies": {
        "@asamuzakjp/dom-selector": "^6.7.2",
        "cssstyle": "^5.3.1",
        "data-urls": "^6.0.0",
        "decimal.js": "^10.6.0",
        "html-encoding-sniffer": "^4.0.0",
        "http-proxy-agent": "^7.0.2",
        "https-proxy-agent": "^7.0.6",
        "is-potential-custom-element-name": "^1.0.1",
        "parse5": "^8.0.0",
        "rrweb-cssom": "^0.8.0",
        "saxes": "^6.0.0",
        "symbol-tree": "^3.2.4",
        "tough-cookie": "^6.0.0",
        "w3c-xmlserializer": "^5.0.0",
        "webidl-conversions": "^8.0.0",
        "whatwg-encoding": "^3.1.1",
        "whatwg-mimetype": "^4.0.0",
        "whatwg-url": "^15.1.0",
        "ws": "^8.18.3",
        "xml-name-validator": "^5.0.0"
      },
      "engines": {
        "node": ">=20"
      },
      "peerDependencies": {
        "canvas": "^3.0.0"
      },
      "peerDependenciesMeta": {
        "canvas": {
          "optional": true
        }
      }
    },
    "node_modules/jsdom/node_modules/http-proxy-agent": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/jsdom/node_modules/tr46": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-6.0.0.tgz",
      "integrity": "sha512-bLVMLPtstlZ4iMQHpFHTR7GAGj2jxi8Dg0s2h2MafAE4uSWF98FC/3MomU51iQAMf8/qDUbKWf5GxuvvVcXEhw==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/jsdom/node_modules/webidl-conversions": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-8.0.0.tgz",
      "integrity": "sha512-n4W4YFyz5JzOfQeA8oN7dUYpR+MBP3PIUsn2jLjWXwK5ASUzt0Jc/A5sAUZoCYFJRGF0FBKJ+1JjN43rNdsQzA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/jsdom/node_modules/whatwg-url": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-15.1.0.tgz",
      "integrity": "sha512-2ytDk0kiEj/yu90JOAp44PVPUkO9+jVhyf+SybKlRHSDlvOOZhdPIrr7xTH64l4WixO2cP+wQIcgujkGBPPz6g==",
      "license": "MIT",
      "dependencies": {
        "tr46": "^6.0.0",
        "webidl-conversions": "^8.0.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.1.tgz",
      "integrity": "sha512-hRF04fqJIP8Abbkq5NKGN0Bbr3JxlQ+qhZufXVr0DvujKy93ZCbXZMHDL4EOtodSbCWxOqR8MS1tXA5hwqCXDg==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwks-rsa": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-3.2.0.tgz",
      "integrity": "sha512-PwchfHcQK/5PSydeKCs1ylNym0w/SSv8a62DgHJ//7x2ZclCoinlsjAfDxAAbpoTPybOum/Jgy+vkvMmKz89Ww==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "^4.17.20",
        "@types/jsonwebtoken": "^9.0.4",
        "debug": "^4.3.4",
        "jose": "^4.15.4",
        "limiter": "^1.1.5",
        "lru-memoizer": "^2.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/limiter": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
      "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lru-memoizer": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.3.0.tgz",
      "integrity": "sha512-GXn7gyHAMhO13WSKrIiNfztwxodVsP8IoZ3XfrJV4yH2x0/OeTO/FIaAHTY5YekdGgW94njfuKmyyt1E0mR6Ug==",
      "license": "MIT",
      "dependencies": {
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "6.0.0"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mdn-data": {
      "version": "2.12.2",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.12.2.tgz",
      "integrity": "sha512-IEn+pegP1aManZuckezWCO+XZQDplx1366JoVhTpMpBB1sPey/SbveZQUosKiKiGYjg1wH4pMlNgXbCiYgihQA==",
      "license": "CC0-1.0"
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "peer": true,
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/openai": {
      "version": "6.7.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-6.7.0.tgz",
      "integrity": "sha512-mgSQXa3O/UXTbA8qFzoa7aydbXBJR5dbLQXCRapAOtoNT+v69sLdKMZzgiakpqhclRnhPggPAXoniVGn2kMY2A==",
      "license": "Apache-2.0",
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.25 || ^4.0"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse5": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-8.0.0.tgz",
      "integrity": "sha512-9m4m5GSgXjL4AjumKzq1Fgfp3Z8rsvjRNbnkVwfu2ImRqE5D0LnY2QfDen18FSY9C573YU5XxSapdHZTZ2WolA==",
      "license": "MIT",
      "dependencies": {
        "entities": "^6.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "30.2.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-30.2.0.tgz",
      "integrity": "sha512-9uBdv/B4EefsuAL+pWqueZyZS2Ba+LxfFeQ9DN14HU4bN8bhaxKdkpjpB6fs9+pSjIBu+FXQHImEg8j/Lw0+vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "30.0.5",
        "ansi-styles": "^5.2.0",
        "react-is": "^18.3.1"
      },
      "engines": {
        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/proto3-json-serializer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-2.0.2.tgz",
      "integrity": "sha512-SAzp/O4Yh02jGdRc+uIrGoe87dkN/XtwxfZ4ZyafJHymd79ozp5VG5nyZ7ygqPM5+cpLDjjGnYFUkngonyDPOQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "protobufjs": "^7.2.5"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/protobufjs": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.4.tgz",
      "integrity": "sha512-CvexbZtbov6jW2eXAvLukXjXUW1TzFaivC46BpWc/3BpcCysb5Vffu+B3XHMm8lVEuy2Mm4XGex8hBSg1yapPg==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.11",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.11.tgz",
      "integrity": "sha512-RfqAvLnMl313r7c9oclB1HhUEAezcpLjz95wFH4LVuhk9JF/r22qmVP9AMmOU4vMX7Q8pN8jwNg/CSpdFnMjTQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-7.0.2.tgz",
      "integrity": "sha512-dUOvLMJ0/JJYEn8NrpOaGNE7X3vpI5XlZS/u0ANjqtcZVKnIxP7IgCFwrKTxENw29emmwug53awKtaMm4i9g5w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/request": "^2.48.8",
        "extend": "^3.0.2",
        "teeny-request": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rrweb-cssom": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/rrweb-cssom/-/rrweb-cssom-0.8.0.tgz",
      "integrity": "sha512-guoltQEx+9aMf2gDZ0s62EcV8lsXR+0w8915TC3ITdn2YueuNjdAYh/levpU9nFaoChh9RUS5ZdQMrKfVEN9tw==",
      "license": "MIT"
    },
    "node_modules/rss-parser": {
      "version": "3.13.0",
      "resolved": "https://registry.npmjs.org/rss-parser/-/rss-parser-3.13.0.tgz",
      "integrity": "sha512-7jWUBV5yGN3rqMMj7CZufl/291QAhvrrGpDNE4k/02ZchL0npisiYYqULF71jCEKoIiHvK/Q2e6IkDwPziT7+w==",
      "license": "MIT",
      "dependencies": {
        "entities": "^2.0.3",
        "xml2js": "^0.5.0"
      }
    },
    "node_modules/rss-parser/node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "license": "BSD-2-Clause",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/sax": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
      "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==",
      "license": "ISC"
    },
    "node_modules/saxes": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-6.0.0.tgz",
      "integrity": "sha512-xAg7SOnEhrm5zI3puOOKyy1OMcMlIJZYNJY7xLBwSze0UjhPLnWfj2GF2EpT0jmzaJKIWKHLsaSSajf35bcYnA==",
      "license": "ISC",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=v12.22.7"
      }
    },
    "node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "stubs": "^3.0.0"
      }
    },
    "node_modules/stream-shift": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.3.tgz",
      "integrity": "sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strnum": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.1.2.tgz",
      "integrity": "sha512-vrN+B7DBIoTTZjnPNewwhx6cBA/H+IS7rfW68n7XxC1y7uoiGQBxaKzqucGUgavX15dJgiGztLJ8vxuEzwqBdA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/symbol-tree": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.4.tgz",
      "integrity": "sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
      "license": "MIT"
    },
    "node_modules/teeny-request": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-9.0.0.tgz",
      "integrity": "sha512-resvxdc6Mgb7YEThw6G6bExlXKkv6+YbuzGg9xuXxSgxJF7Ozs+o8Y9+2R3sArdWdW8nOokoQb1yrpFB0pQK2g==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.9",
        "stream-events": "^1.0.5",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/teeny-request/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/teeny-request/node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/teeny-request/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/tldts": {
      "version": "7.0.17",
      "resolved": "https://registry.npmjs.org/tldts/-/tldts-7.0.17.tgz",
      "integrity": "sha512-Y1KQBgDd/NUc+LfOtKS6mNsC9CCaH+m2P1RoIZy7RAPo3C3/t8X45+zgut31cRZtZ3xKPjfn3TkGTrctC2TQIQ==",
      "license": "MIT",
      "dependencies": {
        "tldts-core": "^7.0.17"
      },
      "bin": {
        "tldts": "bin/cli.js"
      }
    },
    "node_modules/tldts-core": {
      "version": "7.0.17",
      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-7.0.17.tgz",
      "integrity": "sha512-DieYoGrP78PWKsrXr8MZwtQ7GLCUeLxihtjC1jZsW1DnvSMdKPitJSe8OSYDM2u5H6g3kWJZpePqkp43TfLh0g==",
      "license": "MIT"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tough-cookie": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-6.0.0.tgz",
      "integrity": "sha512-kXuRi1mtaKMrsLUxz3sQYvVl37B0Ns6MzfrtV5DvJceE9bPyspOqk9xxv7XbZWcfLWbFmm997vl83qUWVJA64w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tldts": "^7.0.5"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.3.tgz",
      "integrity": "sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-11.1.0.tgz",
      "integrity": "sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/esm/bin/uuid"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/w3c-xmlserializer": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-5.0.0.tgz",
      "integrity": "sha512-o8qghlI8NZHU1lLPrpi2+Uq7abh4GGPpYANlalzWxyWteJOCsr/P+oPBA49TOLu5FTZO4d3F9MnWJfiMo4BkmA==",
      "license": "MIT",
      "dependencies": {
        "xml-name-validator": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-encoding": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-3.1.1.tgz",
      "integrity": "sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==",
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "0.6.3"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/whatwg-encoding/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/whatwg-mimetype": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
      "integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xml-name-validator": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-5.0.0.tgz",
      "integrity": "sha512-EvGK8EJ3DhaHfbRlETOWAS5pO9MZITeauHKJyb8wyajUfQUenkIg2MvLDTZ4T/TgIcm3HU0TFBgWWboAZ30UHg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/xml2js": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.5.0.tgz",
      "integrity": "sha512-drPFnkQJik/O+uPKpqSgr22mpuFHqKdbS835iAQrUC73L2F5WkboIRd63ai/2Yg6I1jzifPFKH2NTK+cfglkIA==",
      "license": "MIT",
      "dependencies": {
        "sax": ">=0.6.0",
        "xmlbuilder": "~11.0.0"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/xmlbuilder": {
      "version": "11.0.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
      "license": "MIT"
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "optional": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "optional": true,
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zod": {
      "version": "4.1.12",
      "resolved": "https://registry.npmjs.org/zod/-/zod-4.1.12.tgz",
      "integrity": "sha512-JInaHOamG8pt5+Ey8kGmdcAcg3OL9reK8ltczgHTAwNhMys/6ThXHityHxVV2p3fkw/c+MAvBHFVYHFZDmjMCQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    }
  }
}



================================================================================
FILE: functions/package.json
================================================================================

{
  "name": "functions",
  "scripts": {
    "lint": "eslint --ext .js,.ts src",
    "build": "tsc",
    "build:watch": "tsc --watch",
    "serve": "npm run build && firebase emulators:start --only functions",
    "shell": "npm run build && firebase functions:shell",
    "start": "npm run shell",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log",
    "seed": "ts-node scripts/seed-articles.ts",
    "seed:mock": "ts-node scripts/seed-articles-mock.ts",
    "verify": "ts-node scripts/verify-articles.ts",
    "test:pagination": "ts-node scripts/test-pagination.ts"
  },
  "engines": {
    "node": "20"
  },
  "main": "lib/index.js",
  "dependencies": {
    "@mozilla/readability": "^0.6.0",
    "cors": "^2.8.5",
    "exponential-backoff": "^3.1.3",
    "firebase-admin": "^13.0.1",
    "firebase-functions": "^6.3.0",
    "jsdom": "^27.0.1",
    "openai": "^6.7.0",
    "rss-parser": "^3.13.0",
    "zod": "^4.1.12"
  },
  "devDependencies": {
    "@types/cors": "^2.8.19",
    "@types/jest": "^30.0.0",
    "@types/jsdom": "^27.0.0",
    "@types/node": "^20.0.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "eslint": "^9.0.0",
    "eslint-config-google": "^0.14.0",
    "eslint-plugin-import": "^2.29.1",
    "ts-node": "^10.9.0",
    "typescript": "^5.5.0"
  },
  "private": true
}



================================================================================
FILE: functions/scripts/SEED_README.md
================================================================================

# CarrierSignal Seed Script

This script populates the CarrierSignal database with insurance news articles from the past 2 days.

## Prerequisites

1. **Firebase Service Account Key**: Place your `serviceAccountKey.json` in the `functions/` directory
   - Download from Firebase Console → Project Settings → Service Accounts → Generate New Private Key

2. **OpenAI API Key**: Set the `OPENAI_API_KEY` environment variable
   ```bash
   export OPENAI_API_KEY=sk-...
   ```

3. **Dependencies**: Install dependencies in the functions directory
   ```bash
   cd functions
   npm install
   ```

## What the Script Does

1. **Clears the Database**: Deletes all existing articles and embeddings
2. **Fetches Articles**: Retrieves articles from the past 2 days from:
   - Insurance Journal (National)
   - Claims Journal
3. **Processes with AI**: Uses OpenAI GPT-4o-mini to generate:
   - 3-5 key bullet points
   - Impact analysis (underwriting, claims, brokerage, actuarial)
   - Tags (LOB, perils, regions, companies, trends, regulations)
   - Risk pulse (LOW/MEDIUM/HIGH)
   - Sentiment analysis
   - Impact scores and breakdowns
4. **Stores in Firestore**: Saves processed articles to the database

## Usage

### Run the Seed Script

```bash
cd functions
npm run seed
```

### With Custom OpenAI Key

```bash
cd functions
OPENAI_API_KEY=sk-... npm run seed
```

## Article Data Structure

Each article stored in Firestore contains:

```typescript
{
  title: string;
  url: string;
  source: string;
  publishedAt: string;
  description?: string;
  bullets5: string[];
  whyItMatters: {
    underwriting: string;
    claims: string;
    brokerage: string;
    actuarial: string;
  };
  tags: {
    lob: string[];
    perils: string[];
    regions: string[];
    companies: string[];
    trends: string[];
    regulations: string[];
  };
  riskPulse: 'LOW' | 'MEDIUM' | 'HIGH';
  sentiment: 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL';
  confidence: number; // 0-1
  impactScore: number; // 0-100
  impactBreakdown: {
    market: number;
    regulatory: number;
    catastrophe: number;
    technology: number;
  };
  confidenceRationale: string;
  leadQuote: string;
  disclosure: string;
  createdAt: Date;
}
```

## Feed Sources

The script fetches from these RSS feeds:

1. **Insurance Journal - National**
   - URL: https://www.insurancejournal.com/rss/news/national/
   - Category: General P&C insurance news

2. **Claims Journal**
   - URL: https://www.claimsjournal.com/rss/
   - Category: Claims and litigation news

## Troubleshooting

### "serviceAccountKey.json not found"
- Download your Firebase service account key from Firebase Console
- Place it in the `functions/` directory

### "OPENAI_API_KEY not set"
- Set the environment variable: `export OPENAI_API_KEY=sk-...`
- Or pass it inline: `OPENAI_API_KEY=sk-... npm run seed`

### "No articles found to seed"
- The RSS feeds may not have recent articles
- Check that the feeds are accessible
- Verify your internet connection

### "Error processing article"
- OpenAI API may be rate limited
- Check your API key and quota
- Verify you have sufficient credits

## Performance Notes

- Processing ~10-20 articles typically takes 2-5 minutes
- Each article requires an OpenAI API call (~0.01-0.05 per article)
- Firestore write operations are batched for efficiency

## Next Steps

After seeding:

1. Start the development server: `npm run dev` (from root)
2. Open http://localhost:5173 to view the articles
3. Articles will be ranked and displayed in the feed

## Customization

To modify the script:

1. **Change feed sources**: Edit `FEED_SOURCES` in `seed-articles.ts`
2. **Adjust time window**: Modify the `twoDaysAgo` calculation
3. **Customize AI processing**: Update the prompt in `processArticleWithAI()`
4. **Change article fields**: Modify the Firestore document structure in `storeArticles()`




================================================================================
FILE: functions/scripts/seed-articles-mock.ts
================================================================================

/**
 * Mock Seed Script for CarrierSignal
 * Populates the database with sample insurance news articles
 * Useful for testing without OpenAI API key
 * 
 * Usage: npx ts-node scripts/seed-articles-mock.ts
 */

import * as admin from 'firebase-admin';

// Initialize Firebase Admin
function initializeFirebase() {
  admin.initializeApp({
    projectId: process.env.FIREBASE_PROJECT_ID || 'carriersignal-app',
  });
}

initializeFirebase();
const db = admin.firestore();

// Sample articles data
const SAMPLE_ARTICLES = [
  {
    title: 'NAIC Proposes New Cybersecurity Standards for Insurance Industry',
    url: 'https://example.com/naic-cybersecurity-standards',
    source: 'Insurance Journal - National',
    publishedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
    description: 'The National Association of Insurance Commissioners has proposed comprehensive cybersecurity standards...',
    bullets5: [
      'NAIC introduces mandatory cybersecurity framework for all insurers',
      'New standards require annual security audits and incident reporting',
      'Implementation deadline set for Q2 2025',
      'Compliance violations may result in fines up to $500,000',
      'Framework aligns with NIST Cybersecurity Framework 2.0',
    ],
    whyItMatters: {
      underwriting: 'Cyber insurance underwriting will need to incorporate NAIC compliance verification into risk assessment processes',
      claims: 'Claims teams must be prepared for increased cyber incident reporting and documentation requirements',
      brokerage: 'Brokers need to educate clients on compliance requirements and help them meet new standards',
      actuarial: 'Actuaries must recalibrate cyber risk models based on new regulatory requirements and incident data',
    },
    tags: {
      lob: ['Cyber', 'E&O'],
      perils: ['Cyber Attack', 'Data Breach'],
      regions: ['US-National'],
      companies: ['NAIC'],
      trends: ['Regulatory', 'Cybersecurity'],
      regulations: ['NAIC Bulletin', 'Cybersecurity Standards'],
    },
    riskPulse: 'HIGH',
    sentiment: 'NEUTRAL',
    confidence: 0.92,
    impactScore: 85,
    impactBreakdown: {
      market: 75,
      regulatory: 95,
      catastrophe: 20,
      technology: 90,
    },
    confidenceRationale: 'Official NAIC announcement with clear implementation timeline and compliance requirements',
    leadQuote: 'The NAIC cybersecurity standards represent a significant step forward in protecting consumer data and industry stability.',
    disclosure: 'This is regulatory guidance from the NAIC',
  },
  {
    title: 'Hurricane Season Outlook: Above-Average Activity Expected',
    url: 'https://example.com/hurricane-season-outlook',
    source: 'Insurance Journal - National',
    publishedAt: new Date(Date.now() - 0.5 * 24 * 60 * 60 * 1000).toISOString(),
    description: 'NOAA forecasts above-average hurricane activity for the 2025 Atlantic season...',
    bullets5: [
      'NOAA predicts 17-25 named storms for 2025 Atlantic hurricane season',
      '8-13 hurricanes expected, with 4-7 major hurricanes (Category 3+)',
      'Above-average activity driven by warm ocean temperatures and weak El Niño',
      'Insurers should prepare for increased claims volume and potential catastrophic losses',
      'Reinsurance market likely to see significant rate increases',
    ],
    whyItMatters: {
      underwriting: 'Property underwriters must adjust rates and limits for coastal exposures based on elevated hurricane risk',
      claims: 'Claims departments should prepare for surge in hurricane-related claims and establish disaster response protocols',
      brokerage: 'Brokers need to communicate elevated risk to clients and review coverage adequacy',
      actuarial: 'Actuaries must update catastrophe models and reserve estimates for increased hurricane activity',
    },
    tags: {
      lob: ['Property', 'Homeowners'],
      perils: ['Hurricane', 'Wind', 'Storm Surge'],
      regions: ['US-FL', 'US-LA', 'US-TX', 'US-NC'],
      companies: [],
      trends: ['Climate Risk', 'Catastrophe'],
      regulations: [],
    },
    riskPulse: 'HIGH',
    sentiment: 'NEGATIVE',
    confidence: 0.88,
    impactScore: 92,
    impactBreakdown: {
      market: 95,
      regulatory: 30,
      catastrophe: 98,
      technology: 10,
    },
    confidenceRationale: 'NOAA official forecast with historical accuracy and detailed methodology',
    leadQuote: 'The 2025 Atlantic hurricane season is expected to be significantly more active than average.',
    disclosure: 'NOAA official forecast',
  },
  {
    title: 'Social Inflation Continues to Drive Up Insurance Claims Costs',
    url: 'https://example.com/social-inflation-claims',
    source: 'Claims Journal',
    publishedAt: new Date(Date.now() - 1.5 * 24 * 60 * 60 * 1000).toISOString(),
    description: 'Industry experts warn that social inflation is accelerating claims costs across multiple lines...',
    bullets5: [
      'Social inflation driving 8-12% annual increases in claims costs',
      'Jury awards and settlement amounts significantly exceeding historical trends',
      'Medical cost inflation and litigation expenses contributing to trend',
      'Affects auto, workers comp, and general liability lines most severely',
      'Insurers implementing stricter underwriting and claims management strategies',
    ],
    whyItMatters: {
      underwriting: 'Underwriters must apply social inflation factors to rate calculations and increase loss reserves',
      claims: 'Claims adjusters need training on managing inflated settlement expectations and litigation risks',
      brokerage: 'Brokers should educate clients on social inflation impact and recommend adequate coverage limits',
      actuarial: 'Actuaries must incorporate social inflation trends into loss projections and pricing models',
    },
    tags: {
      lob: ['Auto', 'Workers Comp', 'General Liability'],
      perils: ['Litigation', 'Medical Inflation'],
      regions: ['US-National'],
      companies: [],
      trends: ['Social Inflation', 'Claims Cost'],
      regulations: [],
    },
    riskPulse: 'MEDIUM',
    sentiment: 'NEGATIVE',
    confidence: 0.85,
    impactScore: 78,
    impactBreakdown: {
      market: 85,
      regulatory: 40,
      catastrophe: 5,
      technology: 15,
    },
    confidenceRationale: 'Multiple industry sources and historical data support social inflation trend',
    leadQuote: 'Social inflation is one of the most significant challenges facing the insurance industry today.',
    disclosure: 'Industry analysis based on claims data trends',
  },
];

/**
 * Clear all articles and embeddings from the database
 */
async function clearDatabase() {
  console.log('🗑️  Clearing database...');

  try {
    // Delete articles
    const articlesSnapshot = await db.collection('articles').get();
    let deletedCount = 0;
    for (const doc of articlesSnapshot.docs) {
      await doc.ref.delete();
      deletedCount++;
    }
    console.log(`✅ Deleted ${deletedCount} articles`);

    // Delete embeddings
    const embeddingsSnapshot = await db.collection('article_embeddings').get();
    let embeddingsDeleted = 0;
    for (const doc of embeddingsSnapshot.docs) {
      await doc.ref.delete();
      embeddingsDeleted++;
    }
    console.log(`✅ Deleted ${embeddingsDeleted} embeddings`);
  } catch (error) {
    console.error('❌ Error clearing database:', error);
    throw error;
  }
}

/**
 * Store sample articles in Firestore
 */
async function storeArticles() {
  console.log('💾 Storing sample articles in Firestore...');

  let stored = 0;
  for (const article of SAMPLE_ARTICLES) {
    try {
      const docId = Buffer.from(article.url).toString('base64').substring(0, 20);
      await db.collection('articles').doc(docId).set({
        ...article,
        createdAt: new Date(),
      });
      stored++;
      console.log(`  ✅ Stored: ${article.title.substring(0, 50)}...`);
    } catch (error) {
      console.error(`  ❌ Error storing article: ${article.title}`, error);
    }
  }

  console.log(`✅ Stored ${stored} articles`);
}

/**
 * Main seed function
 */
async function main() {
  try {
    console.log('🌱 Starting CarrierSignal mock seed script...\n');

    // Step 1: Clear database
    await clearDatabase();
    console.log();

    // Step 2: Store sample articles
    await storeArticles();
    console.log();

    console.log('✅ Mock seed script completed successfully!');
    console.log('\n📊 Sample data loaded:');
    console.log(`   - ${SAMPLE_ARTICLES.length} articles`);
    console.log('   - Ready for testing and development');
    process.exit(0);
  } catch (error) {
    console.error('❌ Seed script failed:', error);
    process.exit(1);
  }
}

main();




================================================================================
FILE: functions/scripts/seed-articles.ts
================================================================================

/**
 * Seed Script for CarrierSignal
 * Fetches insurance news from the past 2 days and populates the database
 * 
 * Usage: npx ts-node scripts/seed-articles.ts
 */

import * as admin from 'firebase-admin';
import Parser from 'rss-parser';
import OpenAI from 'openai';
import * as fs from 'fs';
import * as path from 'path';
import * as crypto from 'crypto';

// Initialize Firebase Admin
function initializeFirebase() {
  const serviceAccountPath = path.join(__dirname, '../serviceAccountKey.json');

  if (fs.existsSync(serviceAccountPath)) {
    // Use service account key if available
    const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf-8'));
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
    console.log('✅ Using service account key for Firebase authentication');
  } else {
    // Use default credentials (works with Firebase CLI authentication)
    admin.initializeApp({
      projectId: process.env.FIREBASE_PROJECT_ID || 'carriersignal-app',
    });
    console.log('✅ Using default credentials for Firebase authentication');
  }
}

initializeFirebase();

const db = admin.firestore();
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Feed sources to seed from (imported from rss-feeds.ts)
const FEED_SOURCES = [
  {
    name: 'Insurance Journal - National',
    url: 'https://www.insurancejournal.com/rss/news/national/',
  },
  {
    name: 'Claims Journal',
    url: 'https://www.claimsjournal.com/rss/',
  },
  {
    name: 'PropertyShark',
    url: 'https://www.propertyshark.com/rss/',
  },
  {
    name: 'Risk & Insurance',
    url: 'https://www.riskandinsurance.com/feed/',
  },
  {
    name: 'Insurance News Net',
    url: 'https://www.insurancenewsnet.com/rss/',
  },
];

interface RawArticle {
  title: string;
  url: string;
  source: string;
  publishedAt: string;
  description?: string;
  html?: string;
  text?: string;
}

/**
 * Clear all articles, events, and embeddings from the database
 */
async function clearDatabase() {
  console.log('🗑️  Clearing database...');

  try {
    // Delete articles
    const articlesSnapshot = await db.collection('articles').get();
    let deletedCount = 0;
    for (const doc of articlesSnapshot.docs) {
      await doc.ref.delete();
      deletedCount++;
    }
    console.log(`✅ Deleted ${deletedCount} articles`);

    // Delete events
    const eventsSnapshot = await db.collection('events').get();
    let eventsDeleted = 0;
    for (const doc of eventsSnapshot.docs) {
      await doc.ref.delete();
      eventsDeleted++;
    }
    console.log(`✅ Deleted ${eventsDeleted} events`);

    // Delete embeddings
    const embeddingsSnapshot = await db.collection('article_embeddings').get();
    let embeddingsDeleted = 0;
    for (const doc of embeddingsSnapshot.docs) {
      await doc.ref.delete();
      embeddingsDeleted++;
    }
    console.log(`✅ Deleted ${embeddingsDeleted} embeddings`);
  } catch (error) {
    console.error('❌ Error clearing database:', error);
    throw error;
  }
}

/**
 * Fetch articles from RSS feeds published in the past 2 days
 */
async function fetchArticles(): Promise<RawArticle[]> {
  console.log('📰 Fetching articles from RSS feeds...');
  
  const parser = new Parser({
    customFields: {
      item: [
        ['content:encoded', 'content'],
        ['dc:creator', 'creator'],
      ],
    },
  });

  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

  const allArticles: RawArticle[] = [];

  for (const feed of FEED_SOURCES) {
    try {
      console.log(`  Fetching from ${feed.name}...`);
      const parsedFeed = await parser.parseURL(feed.url);
      
      if (parsedFeed.items) {
        for (const item of parsedFeed.items) {
          const pubDate = new Date(item.pubDate || item.isoDate || new Date());
          
          // Only include articles from the past 2 days
          if (pubDate >= twoDaysAgo) {
            const itemData = item as any;
            const article: RawArticle = {
              title: item.title || '',
              url: item.link || '',
              source: feed.name,
              publishedAt: item.isoDate || item.pubDate || new Date().toISOString(),
              description: item.contentSnippet || '',
              html: itemData.content || item.content || itemData.description || '',
              text: item.contentSnippet || '',
            };

            if (article.title && article.url) {
              allArticles.push(article);
            }
          }
        }
      }
      console.log(`  ✅ Found ${allArticles.length} articles so far`);
    } catch (error) {
      console.error(`  ❌ Error fetching from ${feed.name}:`, error);
    }
  }

  console.log(`✅ Total articles fetched: ${allArticles.length}`);
  return allArticles;
}



/**
 * Process articles with AI to generate summaries and tags
 */
async function processArticleWithAI(article: RawArticle): Promise<any> {
  try {
    const prompt = `Analyze this insurance news article and provide structured insights:

Title: ${article.title}
Source: ${article.source}
Published: ${article.publishedAt}
Content: ${article.text?.substring(0, 2000) || article.description}

Provide a JSON response with:
- bullets5: Array of 3-5 key bullet points
- whyItMatters: Object with underwriting, claims, brokerage, actuarial impacts (20-200 chars each)
- tags: Object with lob, perils, regions, companies, trends, regulations arrays
- riskPulse: LOW, MEDIUM, or HIGH
- sentiment: POSITIVE, NEGATIVE, or NEUTRAL
- confidence: 0-1 score
- impactScore: 0-100 overall impact
- impactBreakdown: Object with market, regulatory, catastrophe, technology scores (0-100 each)
- confidenceRationale: Why this confidence level (max 200 chars)
- leadQuote: Key factual excerpt (max 300 chars)
- disclosure: Any promotional/opinionated content (max 200 chars)`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 1500,
    });

    const content = response.choices[0]?.message?.content || '{}';
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    const parsed = jsonMatch ? JSON.parse(jsonMatch[0]) : {};

    return {
      ...article,
      ...parsed,
      impactScore: parsed.impactScore || 50,
      confidence: parsed.confidence || 0.7,
    };
  } catch (error) {
    console.error(`  ❌ Error processing article: ${article.title}`, error);
    return null;
  }
}

/**
 * Calculate composite smart score using improved ranking algorithm
 */
function calculateSmartScore(article: any): number {
  // Weights: AI Relevance 40%, Newsworthiness 30%, Recency 15%, RAG Quality 10%, User Feedback 5%
  const aiRelevanceWeight = 0.40;
  const newsworthinessWeight = 0.30;
  const recencyWeight = 0.15;
  const ragQualityWeight = 0.10;
  const userFeedbackWeight = 0.05;

  // AI Relevance Score (0-100)
  const aiScore = Math.min(100, (article.impactScore || 50) * (article.confidence || 0.7) * 100);

  // Newsworthiness Score (0-100) - based on impact breakdown
  let newsworthinessScore = 50;
  if (article.impactBreakdown) {
    const { regulatory = 0, catastrophe = 0, market = 0, technology = 0 } = article.impactBreakdown;
    newsworthinessScore = (regulatory + catastrophe + market + technology) / 4;
  }

  // Recency Score (0-100) - articles from today get 100, older articles decay
  const publishedDate = new Date(article.publishedAt);
  const now = new Date();
  const hoursOld = (now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60);
  const recencyScore = Math.max(0, 100 - (hoursOld * 2)); // Decay 2 points per hour

  // RAG Quality Score (0-100) - default to 85 for seeded articles
  const ragQualityScore = 85;

  // User Feedback Score (0-100) - default to 50 for new articles
  const userFeedbackScore = 50;

  // Calculate composite score
  const smartScore =
    (aiScore * aiRelevanceWeight) +
    (newsworthinessScore * newsworthinessWeight) +
    (recencyScore * recencyWeight) +
    (ragQualityScore * ragQualityWeight) +
    (userFeedbackScore * userFeedbackWeight);

  return Math.round(smartScore);
}

/**
 * Store processed articles in Firestore with improved ranking
 */
async function storeArticles(articles: any[]) {
  console.log('💾 Storing articles in Firestore with improved ranking...');

  let stored = 0;
  for (const article of articles) {
    if (!article) continue;

    try {
      // Calculate improved smart score
      const smartScore = calculateSmartScore(article);

      // Generate unique ID using hash of URL + title to avoid collisions
      const hash = crypto.createHash('md5').update(article.url + article.title).digest('hex').substring(0, 20);
      const docId = `${hash}_${Date.now()}`;

      await db.collection('articles').doc(docId).set({
        title: article.title,
        url: article.url,
        source: article.source,
        publishedAt: article.publishedAt,
        description: article.description,
        bullets5: article.bullets5 || [],
        whyItMatters: article.whyItMatters || {},
        tags: article.tags || {},
        riskPulse: article.riskPulse || 'MEDIUM',
        sentiment: article.sentiment || 'NEUTRAL',
        confidence: article.confidence || 0.5,
        impactScore: article.impactScore || 50,
        impactBreakdown: article.impactBreakdown || {},
        confidenceRationale: article.confidenceRationale || '',
        leadQuote: article.leadQuote || '',
        disclosure: article.disclosure || '',
        aiScore: article.impactScore || 50,
        smartScore: smartScore, // Improved composite score
        ragQualityScore: 85, // High quality for seeded articles
        createdAt: new Date(),
        processed: false, // Mark for clustering
      });
      stored++;
    } catch (error) {
      console.error(`  ❌ Error storing article: ${article.title}`, error);
    }
  }

  console.log(`✅ Stored ${stored} articles with improved ranking`);
}

/**
 * Main seed function
 */
async function main() {
  try {
    console.log('🌱 Starting CarrierSignal seed script...\n');

    // Step 1: Clear database
    await clearDatabase();
    console.log();

    // Step 2: Fetch articles from past 2 days
    const rawArticles = await fetchArticles();
    console.log();

    if (rawArticles.length === 0) {
      console.log('⚠️  No articles found to seed.');
      process.exit(0);
    }

    // Step 3: Process articles with AI
    console.log('🤖 Processing articles with AI...');
    const processedArticles = [];
    for (let i = 0; i < rawArticles.length; i++) {
      const article = rawArticles[i];
      console.log(`  Processing ${i + 1}/${rawArticles.length}: ${article.title.substring(0, 50)}...`);
      const processed = await processArticleWithAI(article);
      if (processed) {
        processedArticles.push(processed);
      }
    }
    console.log();

    // Step 4: Store articles with improved ranking
    await storeArticles(processedArticles);
    console.log();

    // Step 5: Trigger clustering (optional - can be done via cloud function)
    console.log('📊 Seed script completed successfully!');
    console.log(`✅ Seeded ${processedArticles.length} articles with improved ranking and metadata`);
    console.log('💡 Tip: Run clustering via cloud function to group similar articles into events');
    process.exit(0);
  } catch (error) {
    console.error('❌ Seed script failed:', error);
    process.exit(1);
  }
}

main();




================================================================================
FILE: functions/scripts/test-pagination.ts
================================================================================

/**
 * Test Pagination Logic
 * Simulates the frontend pagination to debug infinite scroll
 */

import * as admin from 'firebase-admin';
import * as fs from 'fs';
import * as path from 'path';

// Initialize Firebase Admin
function initializeFirebase() {
  const serviceAccountPath = path.join(__dirname, '../serviceAccountKey.json');

  if (fs.existsSync(serviceAccountPath)) {
    const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf-8'));
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
    console.log('✅ Using service account key for Firebase authentication');
  } else {
    admin.initializeApp({
      projectId: process.env.FIREBASE_PROJECT_ID || 'carriersignal-app',
    });
    console.log('✅ Using default credentials for Firebase authentication');
  }
}

initializeFirebase();

const db = admin.firestore();

async function testPagination() {
  try {
    console.log('🧪 Testing Pagination Logic\n');

    const pageSize = 20;

    // First load
    console.log(`📄 First Load (limit: ${pageSize})`);
    const q1 = db.collection('articles')
      .orderBy('createdAt', 'desc')
      .limit(pageSize);
    
    const snapshot1 = await q1.get();
    console.log(`  ✓ Returned: ${snapshot1.docs.length} articles`);
    console.log(`  ✓ hasMore: ${snapshot1.docs.length === pageSize}`);
    
    if (snapshot1.docs.length === 0) {
      console.log('  ❌ No articles found!');
      process.exit(1);
    }

    const lastDoc = snapshot1.docs[snapshot1.docs.length - 1];
    console.log(`  ✓ Last document ID: ${lastDoc.id}`);
    console.log(`  ✓ Last document title: ${lastDoc.data().title.substring(0, 50)}...`);

    // Second load (pagination)
    console.log(`\n📄 Second Load (startAfter + limit: ${pageSize})`);
    const q2 = db.collection('articles')
      .orderBy('createdAt', 'desc')
      .startAfter(lastDoc)
      .limit(pageSize);
    
    const snapshot2 = await q2.get();
    console.log(`  ✓ Returned: ${snapshot2.docs.length} articles`);
    console.log(`  ✓ hasMore: ${snapshot2.docs.length === pageSize}`);

    if (snapshot2.docs.length > 0) {
      const firstDoc2 = snapshot2.docs[0];
      console.log(`  ✓ First document ID: ${firstDoc2.id}`);
      console.log(`  ✓ First document title: ${firstDoc2.data().title.substring(0, 50)}...`);
    } else {
      console.log('  ⚠️  No more articles to load');
    }

    // Summary
    console.log(`\n📊 Summary`);
    console.log(`  Total loaded: ${snapshot1.docs.length + snapshot2.docs.length} articles`);
    console.log(`  First batch: ${snapshot1.docs.length}`);
    console.log(`  Second batch: ${snapshot2.docs.length}`);
    console.log(`  Expected total: 30`);

    if (snapshot1.docs.length + snapshot2.docs.length === 30) {
      console.log(`  ✅ Pagination working correctly!`);
    } else {
      console.log(`  ⚠️  Pagination may have issues`);
    }

    // Check for duplicates
    const allIds = new Set();
    let duplicates = 0;
    for (const doc of [...snapshot1.docs, ...snapshot2.docs]) {
      if (allIds.has(doc.id)) {
        duplicates++;
      }
      allIds.add(doc.id);
    }
    console.log(`  Duplicates: ${duplicates}`);

    process.exit(0);
  } catch (error) {
    console.error('❌ Test failed:', error);
    process.exit(1);
  }
}

testPagination();




================================================================================
FILE: functions/scripts/verify-articles.ts
================================================================================

/**
 * Verification Script for CarrierSignal Articles
 * Checks if articles are properly stored in Firestore
 */

import * as admin from 'firebase-admin';
import * as fs from 'fs';
import * as path from 'path';

// Initialize Firebase Admin
function initializeFirebase() {
  const serviceAccountPath = path.join(__dirname, '../serviceAccountKey.json');

  if (fs.existsSync(serviceAccountPath)) {
    const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf-8'));
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
    });
    console.log('✅ Using service account key for Firebase authentication');
  } else {
    admin.initializeApp({
      projectId: process.env.FIREBASE_PROJECT_ID || 'carriersignal-app',
    });
    console.log('✅ Using default credentials for Firebase authentication');
  }
}

initializeFirebase();

const db = admin.firestore();

async function verifyArticles() {
  try {
    console.log('🔍 Verifying articles in Firestore...\n');

    // Get all articles
    const articlesSnapshot = await db.collection('articles').get();
    console.log(`📊 Total articles: ${articlesSnapshot.size}\n`);

    if (articlesSnapshot.size === 0) {
      console.log('⚠️  No articles found in Firestore!');
      process.exit(1);
    }

    // Show first 5 articles
    console.log('📰 First 5 articles:\n');
    let count = 0;
    for (const doc of articlesSnapshot.docs) {
      if (count >= 5) break;
      const data = doc.data();
      console.log(`${count + 1}. ${data.title}`);
      console.log(`   URL: ${data.url}`);
      console.log(`   Source: ${data.source}`);
      console.log(`   Impact Score: ${data.impactScore}`);
      console.log(`   Smart Score: ${data.smartScore}`);
      console.log(`   Created At: ${data.createdAt?.toDate?.() || data.createdAt}`);
      console.log(`   Has bullets5: ${!!data.bullets5 && data.bullets5.length > 0}`);
      console.log(`   Has tags: ${!!data.tags && Object.keys(data.tags).length > 0}`);
      console.log();
      count++;
    }

    // Check for required fields
    console.log('✅ Field verification:\n');
    let missingCreatedAt = 0;
    let missingSmartScore = 0;
    let missingImpactScore = 0;

    for (const doc of articlesSnapshot.docs) {
      const data = doc.data();
      if (!data.createdAt) missingCreatedAt++;
      if (!data.smartScore) missingSmartScore++;
      if (!data.impactScore) missingImpactScore++;
    }

    console.log(`  • createdAt: ${articlesSnapshot.size - missingCreatedAt}/${articlesSnapshot.size} ✓`);
    console.log(`  • smartScore: ${articlesSnapshot.size - missingSmartScore}/${articlesSnapshot.size} ✓`);
    console.log(`  • impactScore: ${articlesSnapshot.size - missingImpactScore}/${articlesSnapshot.size} ✓`);

    // Test query with orderBy
    console.log('\n🔍 Testing Firestore queries:\n');
    
    try {
      const q1 = await db.collection('articles')
        .orderBy('createdAt', 'desc')
        .limit(5)
        .get();
      console.log(`  ✓ Query with orderBy('createdAt', 'desc'): ${q1.size} articles`);
    } catch (err) {
      console.log(`  ✗ Query with orderBy('createdAt', 'desc'): ${err instanceof Error ? err.message : 'Unknown error'}`);
    }

    try {
      const q2 = await db.collection('articles')
        .orderBy('smartScore', 'desc')
        .limit(5)
        .get();
      console.log(`  ✓ Query with orderBy('smartScore', 'desc'): ${q2.size} articles`);
    } catch (err) {
      console.log(`  ✗ Query with orderBy('smartScore', 'desc'): ${err instanceof Error ? err.message : 'Unknown error'}`);
    }

    console.log('\n✅ Verification complete!');
    process.exit(0);
  } catch (error) {
    console.error('❌ Verification failed:', error);
    process.exit(1);
  }
}

verifyArticles();




================================================================================
FILE: functions/src/agents.ts
================================================================================

import OpenAI from "openai";
import { JSDOM } from "jsdom";
import { Readability } from "@mozilla/readability";
import { z } from "zod";
import { backOff } from "exponential-backoff"; // Import for retry logic
import {
  normalizeRegions as normalizeRegionsUtil,
  normalizeCompanies as normalizeCompaniesUtil,
  computeContentHash as computeContentHashUtil,
  detectStormName as detectStormNameUtil,
  isRegulatorySource as isRegulatorySourceUtil,
  calculateSmartScore as calculateSmartScoreUtil,
  hashUrl as hashUrlUtil,
} from "./utils";

export type Article = {
  url: string;
  source: string;
  publishedAt?: string;
  title?: string;
  html?: string;
  text?: string;
  author?: string;
  mainImage?: string;
};

const schema = z.object({
  title: z.string(),
  url: z.string(),
  source: z.string(),
  bullets5: z.array(z.string()).min(3).max(5),
  whyItMatters: z.object({
    underwriting: z.string().min(20).max(200), // Ensure meaningful length
    claims: z.string().min(20).max(200),
    brokerage: z.string().min(20).max(200),
    actuarial: z.string().min(20).max(200),
  }),
  tags: z.object({
    lob: z.array(z.string()).max(6), // Lines of Business, e.g., "Auto", "Property"
    perils: z.array(z.string()).max(6), // Perils, e.g., "Hurricane", "Cyber"
    regions: z.array(z.string()).max(10), // ISO codes or names, e.g., "US-FL", "California"
    companies: z.array(z.string()).max(10), // Company names, e.g., "State Farm"
    trends: z.array(z.string()).max(8), // Trends like "GenAI", "Climate Risk", "Social Inflation", etc.
    regulations: z.array(z.string()).max(5), // Regulatory aspects, e.g., "NAIC Bulletin", "Tort Reform"
  }),
  riskPulse: z.enum(["LOW", "MEDIUM", "HIGH"]),
  sentiment: z.enum(["POSITIVE", "NEGATIVE", "NEUTRAL"]),
  confidence: z.number().min(0).max(1),
  // v2 additions
  citations: z.array(z.string()).max(10), // URLs cited in bullets
  impactScore: z.number().min(0).max(100), // Overall impact score
  impactBreakdown: z.object({
    market: z.number().min(0).max(100),
    regulatory: z.number().min(0).max(100),
    catastrophe: z.number().min(0).max(100),
    technology: z.number().min(0).max(100),
  }),
  confidenceRationale: z.string().max(200), // Why this confidence level
  leadQuote: z.string().max(300), // Key factual excerpt (required for OpenAI structured output)
  disclosure: z.string().max(200), // If promotional/opinionated (required for OpenAI structured output)
});

export function hashUrl(u: string) {
  return hashUrlUtil(u);
}

export async function extractArticle(url: string) {
  // Validate URL format before attempting fetch
  try {
    new URL(url);
  } catch {
    throw new Error(`Invalid URL format: ${url}`);
  }

  try {
    // Enhanced fetch with user-agent to mimic browser and avoid blocks
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout

    const res = await fetch(url, {
      redirect: "follow",
      signal: controller.signal,
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
      },
    });

    clearTimeout(timeoutId);

    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }

    const html = await res.text();

    // Validate HTML content
    if (!html || html.length < 100) {
      throw new Error(`Article content too short (${html.length} bytes)`);
    }

    const dom = new JSDOM(html, { url });
    const reader = new Readability(dom.window.document);
    const parsed = reader.parse();

    // Extract main image: Look for og:image or first relevant img
    let mainImage: string | undefined;
    const metaImage = dom.window.document.querySelector('meta[property="og:image"]')?.getAttribute("content");
    if (metaImage) {
      mainImage = metaImage.startsWith("http") ? metaImage : new URL(metaImage, url).href;
    } else {
      const images = dom.window.document.querySelectorAll("img");
      if (images.length > 0) {
        mainImage = images[0].src.startsWith("http") ? images[0].src : new URL(images[0].src, url).href;
      }
    }

    // Extract author: From meta or byline
    let author: string | undefined;
    const metaAuthor = dom.window.document.querySelector('meta[name="author"]')?.getAttribute("content");
    if (metaAuthor) {
      author = metaAuthor;
    } else {
      const byline = dom.window.document.querySelector(".byline, .author")?.textContent?.trim();
      if (byline) author = byline;
    }

    const extractedText = (parsed?.textContent ?? "").trim();

    return {
      url,
      title: parsed?.title ?? dom.window.document.title ?? "",
      html,
      text: extractedText,
      mainImage,
      author,
    };
  } catch (error) {
    console.error(`Error extracting article from ${url}:`, error);
    throw error; // Let caller handle fallback
  }
}

export async function summarizeAndTag(
  client: OpenAI,
  art: Article & { text?: string; mainImage?: string; author?: string }
) {
  const jsonSchema = {
    name: "InsuranceBrief",
    schema: {
      type: "object",
      additionalProperties: false,
      properties: {
        title: { type: "string" },
        url: { type: "string" },
        source: { type: "string" },
        bullets5: { type: "array", items: { type: "string" }, minItems: 3, maxItems: 5 },
        whyItMatters: {
          type: "object",
          properties: {
            underwriting: { type: "string", minLength: 20, maxLength: 200 },
            claims: { type: "string", minLength: 20, maxLength: 200 },
            brokerage: { type: "string", minLength: 20, maxLength: 200 },
            actuarial: { type: "string", minLength: 20, maxLength: 200 },
          },
          required: ["underwriting", "claims", "brokerage", "actuarial"],
          additionalProperties: false,
        },
        tags: {
          type: "object",
          properties: {
            lob: { type: "array", items: { type: "string" } },
            perils: { type: "array", items: { type: "string" } },
            regions: { type: "array", items: { type: "string" } },
            companies: { type: "array", items: { type: "string" } },
            trends: { type: "array", items: { type: "string" } },
            regulations: { type: "array", items: { type: "string" } },
          },
          required: ["lob", "perils", "regions", "companies", "trends", "regulations"],
          additionalProperties: false,
        },
        riskPulse: { type: "string", enum: ["LOW", "MEDIUM", "HIGH"] },
        sentiment: { type: "string", enum: ["POSITIVE", "NEGATIVE", "NEUTRAL"] },
        confidence: { type: "number", minimum: 0, maximum: 1 },
        citations: { type: "array", items: { type: "string" }, maxItems: 10 },
        impactScore: { type: "number", minimum: 0, maximum: 100 },
        impactBreakdown: {
          type: "object",
          properties: {
            market: { type: "number", minimum: 0, maximum: 100 },
            regulatory: { type: "number", minimum: 0, maximum: 100 },
            catastrophe: { type: "number", minimum: 0, maximum: 100 },
            technology: { type: "number", minimum: 0, maximum: 100 },
          },
          required: ["market", "regulatory", "catastrophe", "technology"],
          additionalProperties: false,
        },
        confidenceRationale: { type: "string", maxLength: 200 },
        leadQuote: { type: "string", maxLength: 300 },
        disclosure: { type: "string", maxLength: 200 },
      },
      required: ["title", "url", "source", "bullets5", "whyItMatters", "tags", "riskPulse", "sentiment", "confidence", "citations", "impactScore", "impactBreakdown", "confidenceRationale", "leadQuote", "disclosure"],
    },
    strict: true,
  } as const;

  const currentDate = new Date().toISOString().split('T')[0]; // Use current date for timeliness

  const system = [
    "# ROLE & EXPERTISE",
    "You are a senior P&C insurance analyst with 20+ years experience across underwriting, claims, actuarial science, and risk management.",
    "You specialize in translating complex insurance news into actionable intelligence for industry professionals.",
    "",
    "# ANALYSIS FRAMEWORK",
    "Analyze articles through the P&C insurance lens focusing on:",
    "- Lines of Business: Personal Auto, Commercial Auto, Homeowners, Commercial Property, General Liability, Workers Comp, Professional Liability, Cyber, Umbrella/Excess",
    "- Perils: Hurricane, Wildfire, Earthquake, Flood, Tornado, Hail, Severe Weather, Cyber Attack, Litigation",
    "- Regions: Use ISO 3166-2 for US states (US-FL, US-CA, US-TX, etc.); spell out full country names (Canada, Mexico, etc.). NEVER use city names.",
    "- Companies: Use exact legal names (State Farm, Allstate, Chubb, The Hanover, Cincinnati Insurance, Erie Insurance, Selective, Hiscox, etc.). Normalize variations.",
    "- Key Trends (CONTROLLED LIST): Climate Risk, Social Inflation, GenAI, Litigation Funding, Tort Reform, Rate Adequacy, Reinsurance, Capacity Constraints, Nuclear Verdicts, AOB, Parametric Insurance, Telematics, ESG, Wildfire Mitigation",
    "- Regulations: Name the specific rule/bulletin if explicit (e.g., 'Florida HB 221', 'NAIC Model Law'); otherwise use 'State DOI Bulletin', 'NAIC', etc.",
    "",
    "# BULLET WRITING EXCELLENCE & FACTS & CITATIONS",
    "Create 3-5 executive summary bullets that tell a complete story:",
    "",
    "STRUCTURE:",
    "• Bullet 1 (HEADLINE): Lead with the most critical finding - what happened and why it matters (max 40 words)",
    "• Bullet 2 (DATA/CONTEXT): Provide quantitative evidence and key context (max 35 words)",
    "• Bullet 3 (IMPLICATIONS): Explain market/industry implications (max 35 words)",
    "• Bullet 4 (TRENDS/DRIVERS): Connect to broader trends or root causes (max 35 words, optional)",
    "• Bullet 5 (OUTLOOK/ACTION): Forward-looking implications or recommended actions (max 35 words, optional)",
    "",
    "FACTS & CITATIONS REQUIREMENTS:",
    "✓ EVERY quantitative claim (numbers, percentages, dollar amounts) MUST have a [n] citation marker",
    "✓ EVERY specific data point MUST map to an item in the citations[] array",
    "✓ If a specific number is not in the source, write 'no quantified data in source' instead of inventing",
    "✓ Citations array must contain ONLY absolute URLs that actually support the bracketed claims",
    "✓ Maximum 5 citations per article; prioritize sources that directly support key facts",
    "✓ Do NOT cite the main article URL unless it contains external links to supporting sources",
    "",
    "QUALITY STANDARDS:",
    "✓ Lead with impact, not background",
    "✓ Use specific numbers, percentages, dollar amounts when available (with citations)",
    "✓ Avoid jargon unless industry-standard (combined ratio, loss ratio, CAT losses, etc.)",
    "✓ Each bullet should stand alone but flow sequentially",
    "✓ Use active voice and strong verbs",
    "✓ Include [1], [2] citation markers for key facts (REQUIRED for all quantitative claims)",
    "",
    "EXAMPLES OF EXCELLENT BULLETS:",
    "✓ \"Florida's tort reforms reduced homeowners defense costs by 23% in Q3 2024, driving the state's combined ratio down to 94.2% from 108.5% in 2023, marking the first underwriting profit in three years.\"",
    "✓ \"California FAIR Plan exposure surged 29.8% to $458 billion as major carriers non-renewed 2.1 million policies in wildfire-prone areas, creating a residual market crisis that threatens state solvency.\"",
    "✓ \"Third-party litigation funding in auto injury claims increased average settlement costs by 47% across 12 states, with Florida, Louisiana, and California seeing the highest impact on loss ratios.\"",
    "",
    "# WHY IT MATTERS (Role-Specific Insights)",
    "Provide crisp, actionable insights for each role (20-120 chars, MUST be actionable):",
    "• Underwriting: What should underwriters watch/change/ask? Impact on risk selection, pricing, appetite, capacity, or underwriting guidelines",
    "• Claims: What should claims teams prepare for? Impact on loss costs, settlement strategies, litigation trends, fraud patterns, or reserve adequacy",
    "• Brokerage: What should brokers advise clients? Impact on market conditions, placement strategies, client risk profiles, or advisory opportunities",
    "• Actuarial: What should actuaries model/adjust? Impact on loss projections, reserving, pricing models, capital requirements, or assumption changes",
    "",
    "ROLE-SPECIFIC EXAMPLES:",
    "✓ Underwriting: 'Tighten underwriting for Florida homeowners; tort reforms reduce defense costs but exposure remains elevated.'",
    "✓ Claims: 'Prepare for higher litigation costs in California; FAIR Plan claims surge 29.8% YoY, requiring enhanced reserve strategies.'",
    "✓ Brokerage: 'Advise clients on residual market growth; placement challenges in FL/CA may require alternative risk transfer solutions.'",
    "✓ Actuarial: 'Update loss projections for CA FAIR Plan; 29.8% exposure growth and $2.7B claims require revised catastrophe models.'",
    "",
    "# SCORING METHODOLOGY",
    "",
    "IMPACT SCORE (0-100): Overall significance to P&C industry",
    "• 90-100: Industry-transforming (major CAT, regulatory overhaul, market crisis)",
    "• 70-89: Highly significant (large carrier action, state-level reform, emerging trend)",
    "• 50-69: Notable (regional impact, specific LOB changes, tactical shifts)",
    "• 30-49: Moderate (company news, incremental changes, niche topics)",
    "• 0-29: Low (tangential relevance, minor updates)",
    "",
    "IMPACT BREAKDOWN (each 0-100, MUST sum conceptually to overall impactScore):",
    "• Market: Effect on rates, capacity, competition, M&A, financial results (0-100)",
    "• Regulatory: Effect on compliance, rate filings, solvency, market conduct (0-100)",
    "• Catastrophe: Effect on loss exposure, reinsurance, accumulation risk (0-100)",
    "• Technology: Effect on operations, underwriting, claims, distribution (0-100)",
    "NOTE: impactBreakdown values reflect emphasis areas, NOT a sum. Each is independent 0-100.",
    "",
    "RISK PULSE (Industry Disruption Potential):",
    "• HIGH: Severe disruption - immediate action required (major CAT, market exit, regulatory emergency)",
    "• MEDIUM: Notable impact - strategic response needed (rate changes, capacity shifts, new regulations)",
    "• LOW: Minor impact - monitoring sufficient (incremental changes, niche developments)",
    "",
    "SENTIMENT:",
    "• POSITIVE: Favorable for industry profitability, stability, or growth",
    "• NEGATIVE: Challenges to profitability, capacity, or operations",
    "• NEUTRAL: Informational without clear directional impact",
    "",
    "CONFIDENCE (0-1): Based on article quality, data specificity, source credibility",
    "• 0.9-1.0: Authoritative source (NAIC, DOI, major carrier), specific quantified data, direct P&C relevance",
    "• 0.7-0.89: Credible source (industry publication), some quantified data, clear industry connection",
    "• 0.5-0.69: General source (news outlet), limited data, indirect relevance",
    "• 0-0.49: Questionable source, vague claims, tangential connection",
    "CONFIDENCE RATIONALE (≤200 chars): Explain WHY this confidence level (e.g., 'NAIC official source with specific loss data' or 'Industry blog with limited quantification')",
    "",
    "# OUTPUT REQUIREMENTS",
    "Return ONLY valid JSON matching the schema. Current date: " + currentDate,
    "Include all required fields: citations array, impactScore, impactBreakdown, confidenceRationale, leadQuote, disclosure.",
    "",
    "LEAD QUOTE (≤300 chars): Extract an exact, short factual excerpt from the article (with quotation marks if direct quote). No opinions or synthesis.",
    "DISCLOSURE (≤200 chars): Set to 'Vendor/Opinionated' if source is promotional or opinion-based; otherwise leave empty string ''.",
    "CITATIONS: Array of absolute URLs that directly support bracketed claims in bullets. Maximum 5 items.",
    "Use citation markers [1], [2] in bullets for ALL quantitative claims.",
    "URL: https://agencychecklists.com/2025/10/20/federal-report-2025-pc-sectors-decade-best-underwriting-profit-77765/",
    "SOURCE: Agency Checklists",
    "PUBLISHED: 2025-10-20",
    "TITLE: Federal Report 2025: P&C Sector’s Decade-Best Underwriting Profit",
    "CONTENT: [truncated content from the article...]",
    "",
    "Example Output:",
    '{"title":"Federal Report 2025: P&C Sector’s Decade-Best Underwriting Profit","url":"https://agencychecklists.com/2025/10/20/federal-report-2025-pc-sectors-decade-best-underwriting-profit-77765/","source":"Agency Checklists","bullets5":["The U.S. P&C sector achieved its best underwriting profit in a decade in 2024, with a combined ratio of 96.7% (down from 101.8% in 2023), net income of $171 billion (more than doubled), and record premiums of $1.06 trillion.","Investment income surged 28% to $88 billion, driven by a high-yield environment, while policyholder surplus grew 7% to $1.1 trillion, reflecting strong financial resilience despite high catastrophe losses.","Litigation costs declined in Florida due to tort reforms, reducing defense costs in homeowners multi-peril lines, while Third-Party Litigation Funding remains a concern.","Residential insurance markets face challenges: Florida Citizens reduced policies from 1.25 million to 924,732, but California’s FAIR Plan saw a 29.8% increase in dwelling policies and paid $2.7 billion in claims after major fires.","AI is transforming underwriting, claims, and fraud detection, with NAIC guidelines in place, while a new market for insuring digital assets is emerging, prompting regulatory discussions."],"whyItMatters":{"underwriting":"Improved combined ratio and premium growth indicate rate adequacy, but residential market pressures and litigation trends require careful risk selection and pricing adjustments.","claims":"Declining litigation costs in Florida signal potential cost savings, but rising claims in California’s FAIR Plan highlight the need for robust claims handling and reinsurance strategies.","brokerage":"Strong premium growth and investment income suggest a favorable market for brokers, but residual market growth and digital asset insurance present new opportunities and challenges.","actuarial":"Record catastrophe losses and litigation trends necessitate refined loss projections, while AI adoption and digital asset risks require updated modeling and regulatory compliance."},"tags":{"lob":["Property","Casualty","Personal Lines","Commercial Lines"],"perils":["Catastrophes","Litigation","Fire","Digital Asset Theft"],"regions":["US","US-FL","US-CA"],"companies":["Florida Citizens","California FAIR Plan"],"trends":["AI Adoption","Tort Reform","Digital Assets"],"regulations":["NAIC Bulletin","Florida Reforms"]},"riskPulse":"MEDIUM","sentiment":"POSITIVE","confidence":0.95}',
  ].join("\n");

  const input = [
    `URL: ${art.url}`,
    `SOURCE: ${art.source}`,
    `PUBLISHED: ${art.publishedAt ?? ""}`,
    `TITLE: ${art.title ?? ""}`,
    `AUTHOR: ${art.author ?? ""}`,
    "CONTENT:",
    (art.text ?? "").slice(0, 14000), // Truncate to avoid token limits
  ].join("\n");

  async function run(model: string) {
    const resp = await client.chat.completions.create({
      model,
      temperature: 0.2,
      max_tokens: 1200, // Increased for expanded schema
      response_format: { type: "json_schema", json_schema: jsonSchema },
      messages: [
        { role: "system", content: system },
        { role: "user", content: input },
      ],
    });
    const outText = resp.choices[0]?.message?.content ?? "{}";
    return schema.parse(JSON.parse(outText));
  }

  // Model routing strategy: try primary model first, fallback to secondary
  const models = ["gpt-4o-mini", "gpt-4-turbo"]; // Primary, then fallback
  let lastError: Error | null = null;

  for (const model of models) {
    try {
      console.log(`[SUMMARIZE] Attempting with model: ${model}`);
      const result = await backOff(() => run(model), {
        numOfAttempts: 3, // Reduced retries per model
        startingDelay: 1000,
        timeMultiple: 2,
        retry: (e) => {
          console.warn(`[SUMMARIZE] ${model} call failed, retrying:`, e);
          return true;
        },
      });

      // Final validation of result
      const validation = schema.safeParse(result);
      if (!validation.success) {
        console.error(`[SUMMARIZE] ${model} response failed validation:`, validation.error);
        lastError = new Error(`Invalid response from ${model}: ${validation.error.message}`);
        continue; // Try next model
      }

      console.log(`[SUMMARIZE] Successfully processed with ${model}`);
      return result;
    } catch (error) {
      console.warn(`[SUMMARIZE] Model ${model} failed:`, error);
      lastError = error instanceof Error ? error : new Error(String(error));
      // Continue to next model
    }
  }

  // All models failed
  console.error("[SUMMARIZE] All models failed:", lastError);
  throw lastError || new Error("Failed to summarize article with all available models");
}

/**
 * Ensure impactScore and impactBreakdown are coherent
 * - impactScore should be 0-100
 * - impactBreakdown fields should be 0-100
 * - impactBreakdown should sum to approximately impactScore (within tolerance)
 */
function ensureImpactCoherence(article: z.infer<typeof schema>): z.infer<typeof schema> {
  const impactScore = Math.max(0, Math.min(100, article.impactScore || 0));

  let impactBreakdown = article.impactBreakdown || {
    market: 0,
    regulatory: 0,
    catastrophe: 0,
    technology: 0,
  };

  // Ensure all breakdown fields are 0-100
  impactBreakdown = {
    market: Math.max(0, Math.min(100, impactBreakdown.market || 0)),
    regulatory: Math.max(0, Math.min(100, impactBreakdown.regulatory || 0)),
    catastrophe: Math.max(0, Math.min(100, impactBreakdown.catastrophe || 0)),
    technology: Math.max(0, Math.min(100, impactBreakdown.technology || 0)),
  };

  // Check coherence: breakdown sum should be close to impactScore
  const breakdownSum = (impactBreakdown.market + impactBreakdown.regulatory +
                        impactBreakdown.catastrophe + impactBreakdown.technology) / 4;

  if (Math.abs(breakdownSum - impactScore) > 20) {
    console.warn(`[IMPACT COHERENCE] Breakdown average (${Math.round(breakdownSum)}) differs from impactScore (${impactScore}) by >20 points`);
  }

  return {
    ...article,
    impactScore,
    impactBreakdown,
  };
}

/**
 * Post-parse validation for article data
 * - Deduplicates citations (case-insensitive)
 * - Validates all citations are proper URLs
 * - Ensures bullets only use [1],[2] markers if citations exist
 * - Removes citation markers from bullets if no valid citations
 * - Ensures impactScore and impactBreakdown are coherent
 * - Validates all required fields are present and non-empty
 */
export function validateAndCleanArticle(article: z.infer<typeof schema>): z.infer<typeof schema> {
  // Validate required fields are present
  if (!article.title || article.title.trim().length === 0) {
    throw new Error('Article title is required and cannot be empty');
  }
  if (!article.url || article.url.trim().length === 0) {
    throw new Error('Article URL is required and cannot be empty');
  }
  if (!article.bullets5 || article.bullets5.length < 3) {
    throw new Error('Article must have at least 3 bullets');
  }

  // Deduplicate citations (case-insensitive), filtering out undefined/null values
  const citationsToProcess = (article.citations || []).filter((c): c is string => c != null);
  const uniqueLowercase = Array.from(new Set(citationsToProcess.map(c => c.toLowerCase())));
  const uniqueCitations = uniqueLowercase
    .map(lower => citationsToProcess.find(orig => orig.toLowerCase() === lower))
    .filter((c): c is string => c != null);

  // Validate all citations are proper URLs
  const validCitations = uniqueCitations.filter(c => {
    if (!c) return false;
    try {
      new URL(c);
      return true;
    } catch {
      console.warn(`Invalid citation URL: ${c}`);
      return false;
    }
  });

  // Clean bullets: remove citation markers if no valid citations exist
  let cleanedBullets = article.bullets5;
  if (validCitations.length === 0) {
    cleanedBullets = article.bullets5.map(b => {
      const hasMarkers = /\[\d+\]/.test(b);
      if (hasMarkers) {
        console.warn(`Removing citation markers from bullet: "${b}"`);
        return b.replace(/\s*\[\d+\]\s*/g, ' ').trim();
      }
      return b;
    });
  } else {
    // Validate that citation markers only reference valid citations
    cleanedBullets = article.bullets5.map(b => {
      const markers = b.match(/\[\d+\]/g) || [];
      const validMarkers = markers.filter(m => {
        const idx = parseInt(m.slice(1, -1), 10);
        return idx > 0 && idx <= validCitations.length;
      });

      if (validMarkers.length < markers.length) {
        console.warn(`Removing invalid citation markers from bullet: "${b}"`);
        let cleaned = b;
        markers.forEach(m => {
          const idx = parseInt(m.slice(1, -1), 10);
          if (idx < 1 || idx > validCitations.length) {
            cleaned = cleaned.replace(m, '');
          }
        });
        return cleaned.replace(/\s+/g, ' ').trim();
      }
      return b;
    });
  }

  let result = {
    ...article,
    bullets5: cleanedBullets,
    citations: validCitations,
  };

  // Ensure impactScore and impactBreakdown are coherent
  result = ensureImpactCoherence(result);

  return result;
}

/**
 * RAG Quality Check: Validates article quality for retrieval-augmented generation
 * Ensures articles are suitable for use in Ask-the-Brief context
 */
export function checkRAGQuality(article: z.infer<typeof schema>): {
  isQuality: boolean;
  score: number;
  issues: string[];
} {
  const issues: string[] = [];
  let score = 100;

  // Check 1: Bullet quality
  if (!article.bullets5 || article.bullets5.length < 3) {
    issues.push('Insufficient bullets (need at least 3)');
    score -= 20;
  }

  for (const bullet of article.bullets5 || []) {
    if (bullet.length < 20) {
      issues.push(`Bullet too short: "${bullet}"`);
      score -= 5;
    }
    if (bullet.length > 200) {
      issues.push(`Bullet too long: "${bullet.slice(0, 50)}..."`);
      score -= 5;
    }
  }

  // Check 2: Citation discipline
  const citationMarkers = (article.bullets5 || [])
    .join(' ')
    .match(/\[\d+\]/g) || [];

  if (citationMarkers.length > 0 && (!article.citations || article.citations.length === 0)) {
    issues.push('Citation markers present but no citations provided');
    score -= 15;
  }

  if (article.citations && article.citations.length > 5) {
    issues.push(`Too many citations (${article.citations.length}, max 5)`);
    score -= 10;
  }

  // Check 3: Why It Matters quality
  const whyItMatters = article.whyItMatters || {};
  const roles: Array<keyof typeof whyItMatters> = ['underwriting', 'claims', 'brokerage', 'actuarial'];
  for (const role of roles) {
    const text = (whyItMatters[role] as string) || '';
    if (text.length < 20) {
      issues.push(`${role} impact too brief`);
      score -= 5;
    }
    if (text.length > 200) {
      issues.push(`${role} impact too long`);
      score -= 5;
    }
  }

  // Check 4: Confidence level
  if (article.confidence < 0.5) {
    issues.push(`Low confidence score (${article.confidence})`);
    score -= 10;
  }

  // Check 5: Impact score validity
  if (article.impactScore < 30) {
    issues.push(`Low impact score (${article.impactScore})`);
    score -= 5;
  }

  // Check 6: Lead quote presence
  if (!article.leadQuote || article.leadQuote.length < 10) {
    issues.push('Missing or too-short lead quote');
    score -= 10;
  }

  return {
    isQuality: score >= 70,
    score: Math.max(0, score),
    issues,
  };
}

export async function embedForRAG(client: OpenAI, text: string): Promise<number[]> {
  // Validate input
  if (!text || text.trim().length === 0) {
    throw new Error('Cannot embed empty text');
  }

  // Truncate text to avoid token limits (embeddings have limits)
  const maxChars = 8000;
  const truncatedText = text.length > maxChars ? text.slice(0, maxChars) : text;

  // Enhanced text for better semantic capture: Prefix with P&C context
  const enhancedText = `P&C Insurance Article: ${truncatedText}`;

  try {
    const e = await client.embeddings.create({
      model: "text-embedding-3-small",
      input: enhancedText,
      dimensions: 512, // Increased dimensions for better similarity
    });

    if (!e.data || e.data.length === 0) {
      throw new Error('No embedding returned from API');
    }

    const embedding = e.data[0].embedding;
    if (!embedding || embedding.length === 0) {
      throw new Error('Empty embedding vector returned');
    }

    return embedding;
  } catch (error) {
    console.error('[EMBED] Failed to generate embedding:', error);
    // Fallback: return zero vector with correct dimensions
    // This allows processing to continue without breaking the pipeline
    console.warn('[EMBED] Using fallback zero vector for embedding');
    return new Array(512).fill(0);
  }
}

/**
 * Calculate SmartScore v3: Enhanced multi-dimensional scoring for P&C insurance
 * Returns a score 0-100 for ranking articles
 */
export function calculateSmartScore(params: {
  publishedAt?: string;
  impactScore: number;
  impactBreakdown?: {
    market?: number;
    regulatory?: number;
    catastrophe?: number;
    technology?: number;
  };
  tags?: {
    regulations?: string[];
    perils?: string[];
    lob?: string[];
    trends?: string[];
  };
  regulatory?: boolean;
  riskPulse?: 'LOW' | 'MEDIUM' | 'HIGH';
  stormName?: string;
}): number {
  return calculateSmartScoreUtil(params);
}



/**
 * Normalize regions to ISO 3166-2 codes
 */
export function normalizeRegions(regions: string[]): string[] {
  return normalizeRegionsUtil(regions);
}

/**
 * Normalize company names to canonical forms
 */
export function normalizeCompanies(companies: string[]): string[] {
  return normalizeCompaniesUtil(companies);
}

/**
 * Generate canonical URL (respect og:url if present)
 */
export function getCanonicalUrl(url: string, html?: string): string {
  if (!html) return url;

  try {
    const dom = new JSDOM(html);
    const ogUrl = dom.window.document.querySelector('meta[property="og:url"]')?.getAttribute("content");
    if (ogUrl) return ogUrl;

    const canonical = dom.window.document.querySelector('link[rel="canonical"]')?.getAttribute("href");
    if (canonical) {
      return canonical.startsWith('http') ? canonical : new URL(canonical, url).href;
    }
  } catch {
    // Ignore parsing errors
  }

  return url;
}

/**
 * Compute content hash for deduplication (simhash-style)
 */
export function computeContentHash(text: string): string {
  return computeContentHashUtil(text);
}

/**
 * Detect storm/hurricane names from text
 * Returns storm name if found (e.g., "Hurricane Milton", "Tropical Storm Debby")
 */
export function detectStormName(text: string): string | undefined {
  return detectStormNameUtil(text);
}

/**
 * Detect if article is from a regulatory source (DOI bulletin, etc.)
 */
export function isRegulatorySource(url: string, source: string): boolean {
  return isRegulatorySourceUtil(url, source);
}

/**
 * AI-driven article scoring for P&C insurance professionals (v3 Enhanced)
 * Uses LLM to evaluate relevance, impact, and professional interest
 * Focuses on actionability and decision-making value
 * Includes timeout, retry, and fallback logic
 */
export async function scoreArticleWithAI(
  client: OpenAI,
  article: {
    title: string;
    bullets5?: string[];
    whyItMatters?: Record<string, string>;
    tags?: Record<string, unknown>;
    impactScore?: number;
    publishedAt?: string;
    regulatory?: boolean;
    stormName?: string;
    riskPulse?: string;
    sentiment?: string;
  }
): Promise<number> {
  const TIMEOUT_MS = 10000; // 10 second timeout
  const MAX_RETRIES = 2;

  const scoreWithTimeout = async (): Promise<number> => {
    const prompt = `You are a senior P&C insurance analyst evaluating article relevance for industry professionals (underwriters, claims adjusters, actuaries, brokers, risk managers).

ARTICLE ANALYSIS:
Title: ${article.title}

Executive Summary:
${(article.bullets5 || []).map((b, i) => `${i + 1}. ${b}`).join('\n')}

Professional Impact:
${Object.entries(article.whyItMatters || {})
  .map(([role, impact]) => `• ${role.toUpperCase()}: ${impact}`)
  .join('\n')}

Metadata:
• Tags: ${JSON.stringify(article.tags || {})}
• Impact Score: ${article.impactScore || 0}/100
• Risk Pulse: ${article.riskPulse || 'UNKNOWN'}
• Sentiment: ${article.sentiment || 'NEUTRAL'}
• Regulatory: ${article.regulatory ? 'Yes' : 'No'}
• Named Storm: ${article.stormName || 'None'}
• Published: ${article.publishedAt || 'Unknown'}

SCORING CRITERIA (0-100):

Rate this article's value to P&C insurance professionals based on:

1. PROFESSIONAL RELEVANCE (35 points):
   - Direct impact on underwriting decisions, pricing, or risk selection
   - Affects claims handling, settlement strategies, or loss costs
   - Influences actuarial models, reserving, or capital requirements
   - Impacts brokerage placement, client advisory, or market access

2. ACTIONABILITY (25 points):
   - Provides specific data, metrics, or quantitative insights
   - Enables immediate decision-making or strategic planning
   - Offers competitive intelligence or market positioning insights
   - Contains regulatory guidance or compliance requirements

3. MARKET SIGNIFICANCE (25 points):
   - Affects rates, capacity, or market availability
   - Involves major carriers, significant market share, or systemic risk
   - Represents emerging trends or structural market changes
   - Impacts reinsurance, capital markets, or industry economics

4. TIMELINESS & URGENCY (15 points):
   - Breaking news requiring immediate attention
   - Time-sensitive regulatory or catastrophe developments
   - Evolving situations with ongoing implications
   - Enduring relevance beyond immediate news cycle

SCORING GUIDELINES:
• 90-100: CRITICAL - Industry-transforming events (major CAT, regulatory overhaul, market crisis, carrier insolvency)
• 75-89: HIGH VALUE - Significant developments (state reforms, large carrier actions, emerging trends, material rate changes)
• 60-74: VALUABLE - Notable industry news (regional impacts, specific LOB changes, tactical intelligence)
• 45-59: MODERATE - Relevant updates (company news, incremental changes, niche topics)
• 30-44: LIMITED - Tangential relevance (peripheral topics, minor updates, low actionability)
• 0-29: LOW - Minimal P&C relevance (general business news, unrelated topics)

PRIORITIZE:
✓ Catastrophe loss events and accumulation risk
✓ Regulatory changes affecting rates, forms, or solvency
✓ Litigation trends and nuclear verdicts
✓ Market capacity shifts and carrier exits/entries
✓ Rate adequacy and combined ratio impacts
✓ Reinsurance market developments
✓ Technology disruption (AI, telematics, parametric)
✓ Climate risk and secondary perils
✓ Social inflation and claims cost trends

DEPRIORITIZE:
✗ Generic business news without P&C angle
✗ Promotional content or vendor marketing
✗ Life/health insurance topics
✗ International news without U.S. market impact
✗ Tangential technology without insurance application

Respond with ONLY a single integer 0-100, no explanation or additional text.`;

    // Create abort controller for timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);

    try {
      const response = await client.chat.completions.create({
        model: "gpt-4o-mini",
        temperature: 0.1, // Low temperature for consistent scoring
        max_tokens: 10,
        messages: [{ role: "user", content: prompt }],
      });

      clearTimeout(timeoutId);

      const scoreText = (response.choices[0].message.content || "50").trim();
      const score = parseInt(scoreText, 10);

      if (isNaN(score) || score < 0 || score > 100) {
        console.warn(`[AI SCORE] Invalid score "${scoreText}", defaulting to 50`);
        return 50;
      }

      console.log(`[AI SCORE] "${article.title}" → ${score}/100`);
      return score;
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  };

  // Retry logic with exponential backoff
  for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {
    try {
      return await scoreWithTimeout();
    } catch (error) {
      if (attempt === MAX_RETRIES) {
        console.error(`[AI SCORE] Failed after ${MAX_RETRIES + 1} attempts:`, error);
        return 50; // Final fallback
      }
      const delay = Math.pow(2, attempt) * 1000; // 1s, 2s, 4s
      console.warn(`[AI SCORE] Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  return 50; // Should not reach here, but safety fallback
}


================================================================================
FILE: functions/src/ai/index.ts
================================================================================

/**
 * AI Module Exports
 * AI-powered summarization and tagging functionality
 */

export { default as SummarizationService } from './summarization';
export type {
  ArticleSummary,
  AIProcessingResult,
  SummaryCache,
  AIPromptConfig,
  TagInferenceResult,
  QuoteExtractionResult,
} from './types';




================================================================================
FILE: functions/src/ai/summarization.ts
================================================================================

/**
 * AI Summarization Service
 * Generates deterministic JSON summaries with schema validation
 */

import OpenAI from 'openai';
import { z } from 'zod';
import { db } from '../ingestion/firebase';
import { ArticleSummary, AIProcessingResult, SummaryCache } from './types';
import * as crypto from 'crypto';

const SummarySchema = z.object({
  url: z.string().url(),
  headline: z.string().min(10).max(200),
  briefBullets: z.array(z.string()).min(3).max(5),
  keyNumbers: z.array(z.string()).max(10),
  materiality: z.number().min(0).max(100),
  impacts: z.object({
    underwriting: z.string().min(20).max(200),
    claims: z.string().min(20).max(200),
    brokerage: z.string().min(20).max(200),
    actuarial: z.string().min(20).max(200),
  }),
  geos: z.array(z.string()).max(10),
  perils: z.array(z.string()).max(10),
  regulatoryFlags: z.array(z.string()).max(5),
  riskNotes: z.string().max(500),
  confidence: z.number().min(0).max(1),
  citations: z.array(z.string().url()).max(10),
  leadQuote: z.string().max(300),
  disclosure: z.string().max(200),
});

export class SummarizationService {
  private openai: OpenAI;
  private readonly CACHE_TTL_DAYS = 30;
  private readonly PROMPT_VERSION = '1.0';

  constructor(apiKey: string) {
    this.openai = new OpenAI({ apiKey });
  }

  /**
   * Generate content hash for caching
   */
  private generateContentHash(content: string): string {
    return crypto
      .createHash('sha256')
      .update(content.toLowerCase().trim())
      .digest('hex');
  }

  /**
   * Check cache for existing summary
   */
  private async checkCache(url: string, contentHash: string): Promise<ArticleSummary | null> {
    try {
      const cacheKey = `${url}|${contentHash}|${this.PROMPT_VERSION}`;
      const cacheHash = crypto.createHash('md5').update(cacheKey).digest('hex');

      const doc = await db.collection('summaryCache').doc(cacheHash).get();

      if (doc.exists) {
        const cache = doc.data() as SummaryCache;
        if (new Date(cache.expiresAt) > new Date()) {
          return cache.summary;
        }
      }
    } catch (error) {
      console.error('Cache check error:', error);
    }

    return null;
  }

  /**
   * Store summary in cache
   */
  private async storeInCache(url: string, contentHash: string, summary: ArticleSummary): Promise<void> {
    try {
      const cacheKey = `${url}|${contentHash}|${this.PROMPT_VERSION}`;
      const cacheHash = crypto.createHash('md5').update(cacheKey).digest('hex');
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + this.CACHE_TTL_DAYS);

      const cache: SummaryCache = {
        url,
        contentHash,
        promptVersion: this.PROMPT_VERSION,
        summary,
        createdAt: new Date().toISOString(),
        expiresAt: expiresAt.toISOString(),
        ttlDays: this.CACHE_TTL_DAYS,
      };

      await db.collection('summaryCache').doc(cacheHash).set(cache);
    } catch (error) {
      console.error('Cache storage error:', error);
    }
  }

  /**
   * Summarize article using OpenAI
   */
  async summarizeArticle(
    articleId: string,
    url: string,
    title: string,
    content: string
  ): Promise<AIProcessingResult> {
    const startTime = Date.now();
    const contentHash = this.generateContentHash(content);

    try {
      // Check cache
      const cached = await this.checkCache(url, contentHash);
      if (cached) {
        return {
          articleId,
          summary: cached,
          processingTime: Date.now() - startTime,
          model: 'gpt-4-turbo',
          tokensUsed: 0,
          cached: true,
          timestamp: new Date().toISOString(),
        };
      }

      // Generate summary
      const systemPrompt = `You are an expert P&C insurance analyst. Analyze the provided article and output ONLY valid JSON matching the required schema. Be deterministic and precise.`;

      const userPrompt = `Analyze this insurance article and provide a comprehensive summary:

Title: ${title}
URL: ${url}
Content: ${content.substring(0, 2000)}

Provide output as valid JSON with these fields:
- headline: concise headline (10-200 chars)
- briefBullets: 3-5 key points
- keyNumbers: any important numbers mentioned
- materiality: 0-100 score
- impacts: object with underwriting, claims, brokerage, actuarial impacts
- geos: affected geographies
- perils: relevant perils
- regulatoryFlags: regulatory implications
- riskNotes: risk assessment
- confidence: 0-1 confidence score
- citations: relevant URLs
- leadQuote: key quote from article
- disclosure: any important disclosures`;

      const response = await this.openai.chat.completions.create({
        model: 'gpt-4-turbo',
        temperature: 0,
        max_tokens: 1500,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt },
        ],
      });

      const content_text = response.choices[0]?.message?.content || '';
      const jsonMatch = content_text.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in response');
      }

      const summaryData = JSON.parse(jsonMatch[0]);
      const parsedSummary = SummarySchema.parse({ url, ...summaryData });
      const summary: ArticleSummary = parsedSummary;

      // Store in cache
      await this.storeInCache(url, contentHash, summary);

      return {
        articleId,
        summary,
        processingTime: Date.now() - startTime,
        model: 'gpt-4-turbo',
        tokensUsed: response.usage?.total_tokens || 0,
        cached: false,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      throw new Error(
        `Summarization failed: ${error instanceof Error ? error.message : String(error)}`
      );
    }
  }
}

export default SummarizationService;




================================================================================
FILE: functions/src/ai/types.ts
================================================================================

/**
 * AI Processing Types
 * Defines interfaces for AI summarization and tagging
 */

export interface ArticleSummary {
  url: string;
  headline: string;
  briefBullets: string[];
  keyNumbers: string[];
  materiality: number; // 0-100
  impacts: {
    underwriting: string;
    claims: string;
    brokerage: string;
    actuarial: string;
  };
  geos: string[];
  perils: string[];
  regulatoryFlags: string[];
  riskNotes: string;
  confidence: number; // 0-1
  citations: string[];
  leadQuote: string;
  disclosure: string;
}

export interface AIProcessingResult {
  articleId: string;
  summary: ArticleSummary;
  processingTime: number; // milliseconds
  model: string;
  tokensUsed: number;
  cached: boolean;
  timestamp: string;
}

export interface SummaryCache {
  url: string;
  contentHash: string;
  promptVersion: string;
  summary: ArticleSummary;
  createdAt: string;
  expiresAt: string;
  ttlDays: number;
}

export interface AIPromptConfig {
  version: string;
  model: string;
  temperature: number;
  maxTokens: number;
  systemPrompt: string;
  examples: Array<{
    input: string;
    output: ArticleSummary;
  }>;
}

export interface TagInferenceResult {
  lob: string[];
  perils: string[];
  regions: string[];
  companies: string[];
  trends: string[];
  regulations: string[];
  confidence: number;
}

export interface QuoteExtractionResult {
  quotes: string[];
  sources: string[];
  confidence: number;
}




================================================================================
FILE: functions/src/clustering/index.ts
================================================================================

/**
 * Clustering Module Exports
 * Event clustering and deduplication functionality
 */

export { ClusteringService } from './service';
export type {
  Event,
  ClusteringResult,
  ClusteringMetrics,
  SimilarityScore,
  EventUpdate,
} from './types';

import { ClusteringService } from './service';

export const clusteringService = new ClusteringService();




================================================================================
FILE: functions/src/clustering/service.ts
================================================================================

/**
 * Clustering Service
 * Groups similar articles into events using similarity metrics
 */

import { db } from '../ingestion/firebase';
import { Event, SimilarityScore, ClusteringMetrics } from './types';

export class ClusteringService {
  private readonly SIMILARITY_THRESHOLD = 0.75;
  private readonly TITLE_WEIGHT = 0.4;
  private readonly CONTENT_WEIGHT = 0.6;
  private readonly TAG_WEIGHT = 0.3; // Weight for tag-based similarity
  private readonly TEMPORAL_WINDOW_HOURS = 24; // Cluster articles within 24 hours

  /**
   * Calculate Levenshtein distance for string similarity
   */
  private levenshteinDistance(str1: string, str2: string): number {
    const len1 = str1.length;
    const len2 = str2.length;
    const matrix: number[][] = Array(len2 + 1)
      .fill(null)
      .map(() => Array(len1 + 1).fill(0));

    for (let i = 0; i <= len1; i++) matrix[0][i] = i;
    for (let j = 0; j <= len2; j++) matrix[j][0] = j;

    for (let j = 1; j <= len2; j++) {
      for (let i = 1; i <= len1; i++) {
        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,
          matrix[j - 1][i] + 1,
          matrix[j - 1][i - 1] + indicator
        );
      }
    }

    const distance = matrix[len2][len1];
    const maxLen = Math.max(len1, len2);
    return 1 - distance / maxLen;
  }

  /**
   * Calculate tag-based similarity (P&C-specific)
   */
  private calculateTagSimilarity(
    tags1: Record<string, string[]> | undefined,
    tags2: Record<string, string[]> | undefined
  ): number {
    if (!tags1 || !tags2) return 0;

    let matchCount = 0;
    let totalTags = 0;

    // Check LOB matches
    const lob1 = tags1.lob || [];
    const lob2 = tags2.lob || [];
    totalTags += Math.max(lob1.length, lob2.length);
    matchCount += lob1.filter(l => lob2.includes(l)).length;

    // Check peril matches
    const perils1 = tags1.perils || [];
    const perils2 = tags2.perils || [];
    totalTags += Math.max(perils1.length, perils2.length);
    matchCount += perils1.filter(p => perils2.includes(p)).length;

    // Check region matches
    const regions1 = tags1.regions || [];
    const regions2 = tags2.regions || [];
    totalTags += Math.max(regions1.length, regions2.length);
    matchCount += regions1.filter(r => regions2.includes(r)).length;

    return totalTags > 0 ? matchCount / totalTags : 0;
  }

  /**
   * Calculate similarity between two articles
   */
  async calculateSimilarity(
    article1: Record<string, unknown>,
    article2: Record<string, unknown>
  ): Promise<SimilarityScore> {
    const title1 = (article1.title as string) || '';
    const title2 = (article2.title as string) || '';
    const content1 = ((article1.text as string) || (article1.html as string) || '').substring(0, 500);
    const content2 = ((article2.text as string) || (article2.html as string) || '').substring(0, 500);

    const titleSimilarity = this.levenshteinDistance(title1.toLowerCase(), title2.toLowerCase());
    const contentSimilarity = this.levenshteinDistance(content1.toLowerCase(), content2.toLowerCase());
    const tagSimilarity = this.calculateTagSimilarity(
      article1.tags as Record<string, string[]> | undefined,
      article2.tags as Record<string, string[]> | undefined
    );

    // Weighted combination: title 40%, content 40%, tags 20%
    const overallSimilarity =
      (this.TITLE_WEIGHT * titleSimilarity) +
      (this.CONTENT_WEIGHT * contentSimilarity) +
      (this.TAG_WEIGHT * tagSimilarity);

    return {
      articleId1: article1.id as string,
      articleId2: article2.id as string,
      titleSimilarity,
      contentSimilarity,
      overallSimilarity,
      shouldCluster: overallSimilarity >= this.SIMILARITY_THRESHOLD,
    };
  }

  /**
   * Check if two articles are within temporal window
   */
  private isWithinTemporalWindow(date1: string, date2: string): boolean {
    const time1 = new Date(date1).getTime();
    const time2 = new Date(date2).getTime();
    const diffHours = Math.abs(time1 - time2) / (1000 * 60 * 60);
    return diffHours <= this.TEMPORAL_WINDOW_HOURS;
  }

  /**
   * Cluster unprocessed articles into events
   */
  async clusterArticles(): Promise<ClusteringMetrics> {
    const startTime = Date.now();
    let totalArticles = 0;
    let totalEvents = 0;
    let totalClustered = 0;

    try {
      // Get unprocessed articles from last 48 hours
      const cutoffTime = new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString();
      const unprocessedSnapshot = await db
        .collection('articles')
        .where('processed', '==', false)
        .where('publishedAt', '>=', cutoffTime)
        .orderBy('publishedAt', 'desc')
        .limit(200)
        .get();

      totalArticles = unprocessedSnapshot.size;

      if (totalArticles === 0) {
        return {
          totalArticles: 0,
          totalEvents: 0,
          averageClusterSize: 0,
          processingTime: Date.now() - startTime,
          timestamp: new Date().toISOString(),
        };
      }

      const articles = unprocessedSnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      // Cluster articles
      const processedArticleIds = new Set<string>();

      for (let i = 0; i < articles.length; i++) {
        if (processedArticleIds.has(articles[i].id)) continue;

        const cluster: string[] = [articles[i].id];
        processedArticleIds.add(articles[i].id);

        // Find similar articles within temporal window
        for (let j = i + 1; j < articles.length; j++) {
          if (processedArticleIds.has(articles[j].id)) continue;

          // Check temporal proximity first (faster check)
          const publishedAt1 = ((articles[i] as Record<string, unknown>).publishedAt as string) || '';
          const publishedAt2 = ((articles[j] as Record<string, unknown>).publishedAt as string) || '';
          if (!this.isWithinTemporalWindow(publishedAt1, publishedAt2)) {
            continue;
          }

          const similarity = await this.calculateSimilarity(articles[i], articles[j]);
          if (similarity.shouldCluster) {
            cluster.push(articles[j].id);
            processedArticleIds.add(articles[j].id);
          }
        }

        // Create or update event
        if (cluster.length > 0) {
          await this.createOrUpdateEvent(articles[i], cluster);
          totalEvents++;
          totalClustered += cluster.length;
        }
      }

      return {
        totalArticles,
        totalEvents,
        averageClusterSize: totalClustered > 0 ? totalClustered / totalEvents : 0,
        processingTime: Date.now() - startTime,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error('Clustering error:', error);
      throw error;
    }
  }

  /**
   * Create or update event
   */
  private async createOrUpdateEvent(
    canonicalArticle: Record<string, unknown>,
    articleIds: string[]
  ): Promise<void> {
    const eventId = `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    const event: Event = {
      id: eventId,
      canonicalArticleId: canonicalArticle.id as string,
      articleIds,
      title: (canonicalArticle.title as string) || '',
      description: (canonicalArticle.description as string) || '',
      publishedAt: (canonicalArticle.publishedAt as string) || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      materialityScore: 50,
      severityScore: 50,
      impactScore: 50,
      lob: (canonicalArticle.lob as string[]) || [],
      perils: (canonicalArticle.perils as string[]) || [],
      regions: (canonicalArticle.regions as string[]) || [],
      companies: (canonicalArticle.companies as string[]) || [],
      eventType: 'other',
      riskPulse: 'MEDIUM',
      sentiment: 'NEUTRAL',
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      articleCount: articleIds.length,
      sourceCount: 1,
      regulatoryFlags: [],
      trendingScore: 0,
      isHotTopic: false,
    };

    await db.collection('events').doc(eventId).set(event);

    // Mark articles as processed
    for (const articleId of articleIds) {
      await db.collection('articles').doc(articleId).update({
        processed: true,
        eventId,
      });
    }
  }
}

export default new ClusteringService();




================================================================================
FILE: functions/src/clustering/types.ts
================================================================================

/**
 * Clustering and Event Types
 * Defines Event model and clustering interfaces
 */

export interface Event {
  id: string;
  canonicalArticleId: string;
  articleIds: string[];
  title: string;
  description: string;
  publishedAt: string;
  updatedAt: string;
  
  // Materiality scoring
  materialityScore: number; // 0-100
  severityScore: number; // 0-100
  impactScore: number; // 0-100
  
  // Categorization
  lob: string[]; // Lines of business
  perils: string[]; // Peril types
  regions: string[]; // Geographic regions
  companies: string[]; // Affected companies
  
  // Metadata
  eventType: 'catastrophe' | 'regulatory' | 'market' | 'technology' | 'other';
  riskPulse: 'LOW' | 'MEDIUM' | 'HIGH';
  sentiment: 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL';
  
  // Tracking
  createdAt: string;
  lastUpdated: string;
  articleCount: number;
  sourceCount: number;
  
  // Regulatory flags
  regulatoryFlags: string[];
  stormName?: string;
  
  // Trending
  trendingScore: number; // 0-100
  isHotTopic: boolean;
}

export interface ClusteringResult {
  eventId: string;
  articleIds: string[];
  similarity: number;
  reason: string;
}

export interface ClusteringMetrics {
  totalArticles: number;
  totalEvents: number;
  averageClusterSize: number;
  processingTime: number; // milliseconds
  timestamp: string;
}

export interface SimilarityScore {
  articleId1: string;
  articleId2: string;
  titleSimilarity: number;
  contentSimilarity: number;
  overallSimilarity: number;
  shouldCluster: boolean;
}

export interface EventUpdate {
  eventId: string;
  newArticleIds: string[];
  updatedMaterialityScore: number;
  updatedSeverityScore: number;
  reason: string;
  timestamp: string;
}




================================================================================
FILE: functions/src/index.ts
================================================================================

import {onSchedule} from "firebase-functions/v2/scheduler";
import {onRequest} from "firebase-functions/v2/https";
import {defineSecret} from "firebase-functions/params";
import {initializeApp} from "firebase-admin/app";
import {getFirestore} from "firebase-admin/firestore";
import OpenAI from "openai";
import Parser from "rss-parser";
import {extractArticle, summarizeAndTag, embedForRAG, hashUrl, calculateSmartScore, normalizeRegions, normalizeCompanies, getCanonicalUrl, computeContentHash, detectStormName, isRegulatorySource, scoreArticleWithAI, validateAndCleanArticle, checkRAGQuality} from "./agents";

initializeApp();
const db = getFirestore();
const OPENAI_API_KEY = defineSecret("OPENAI_API_KEY");

/**
 * Firestore-backed rate limiter for askBrief endpoint
 * Tracks requests per IP with sliding window and TTL expiration
 */
const RATE_LIMIT_WINDOW_MS = 60 * 60 * 1000; // 1 hour
const RATE_LIMIT_MAX_REQUESTS = 20; // 20 requests per hour per IP

/**
 * Check rate limit using Firestore with sliding window
 * Uses hashed IP for privacy, TTL for automatic cleanup
 */
async function checkRateLimit(ip: string): Promise<boolean> {
  try {
    const hashedIp = hashUrl(ip); // Hash IP for privacy
    const rateLimitRef = db.collection('rate_limits').doc(hashedIp);
    const now = Date.now();
    const windowStart = now - RATE_LIMIT_WINDOW_MS;

    // Get current rate limit record
    const doc = await rateLimitRef.get();
    let requests: number[] = [];

    if (doc.exists) {
      const data = doc.data();
      requests = (data?.requests || []).filter((ts: number) => ts > windowStart);
    }

    // Check if limit exceeded
    if (requests.length >= RATE_LIMIT_MAX_REQUESTS) {
      console.log(`[RATE LIMIT] IP ${ip} exceeded limit: ${requests.length}/${RATE_LIMIT_MAX_REQUESTS}`);
      return false;
    }

    // Add current request and update
    requests.push(now);
    await rateLimitRef.set({
      requests,
      lastRequest: new Date(),
      expiresAt: new Date(now + RATE_LIMIT_WINDOW_MS + 60 * 60 * 1000), // TTL: window + 1 hour
    });

    return true;
  } catch (error) {
    console.error('[RATE LIMIT ERROR]', error);
    // On error, allow request (fail open for availability)
    return true;
  }
}

/**
 * CORS configuration - centralized from environment
 * Supports comma-separated origins and wildcard for localhost
 */
function getAllowedOrigins(): string[] {
  const envOrigins = process.env.ALLOWED_ORIGINS || '';

  if (envOrigins) {
    return envOrigins.split(',').map(o => o.trim()).filter(o => o.length > 0);
  }

  // Default origins if env not set
  return [
    'https://carriersignal.web.app',
    'https://carriersignal.firebaseapp.com',
    'http://localhost:5173',
    'http://localhost:5174',
    'http://localhost:4173',
  ];
}

/**
 * Check if origin is allowed for CORS
 * Supports wildcard matching for localhost development
 */
function checkCORS(origin: string | undefined): boolean {
  if (!origin) return false;

  const allowedOrigins = getAllowedOrigins();

  // Check for exact match or prefix match
  return allowedOrigins.some(allowed => {
    if (allowed === '*') return true; // Wildcard
    if (allowed.includes('localhost') && origin.includes('localhost')) return true; // Localhost wildcard
    return origin.startsWith(allowed);
  });
}

/**
 * Comprehensive error handler for API endpoints
 * Provides consistent error responses with proper HTTP status codes
 */
interface ErrorResponse {
  error: string;
  code?: string;
  details?: Record<string, unknown>;
  timestamp: string;
}

function createErrorResponse(error: unknown, defaultCode: string = 'INTERNAL_ERROR'): ErrorResponse {
  if (error instanceof Error) {
    return {
      error: error.message,
      code: defaultCode,
      timestamp: new Date().toISOString(),
    };
  }

  return {
    error: String(error),
    code: defaultCode,
    timestamp: new Date().toISOString(),
  };
}

function getHttpStatusCode(error: unknown): number {
  if (error instanceof Error) {
    const msg = error.message.toLowerCase();
    if (msg.includes('invalid') || msg.includes('validation')) return 400;
    if (msg.includes('not found') || msg.includes('404')) return 404;
    if (msg.includes('unauthorized') || msg.includes('forbidden')) return 403;
    if (msg.includes('timeout') || msg.includes('rate limit')) return 429;
  }
  return 500;
}

/**
 * RSS Feed sources for batch processing
 * Configurable feed registry with categories, priority, and enabled flags
 */
interface FeedSource {
  url: string;
  category: 'news' | 'regulatory' | 'catastrophe' | 'reinsurance' | 'technology';
  priority: number; // 1 = highest
  enabled: boolean;
}

// Default feed sources - can be overridden by Firestore configuration
// Curated catalog of P&C insurance industry sources across multiple categories
const DEFAULT_FEED_SOURCES: FeedSource[] = [
  // ============================================================================
  // NEWS FEEDS (General P&C Insurance Industry News)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/national/", category: 'news', priority: 1, enabled: true },
  { url: "https://www.insurancejournal.com/rss/news/international/", category: 'news', priority: 2, enabled: true },
  { url: "https://www.claimsjournal.com/rss/", category: 'news', priority: 2, enabled: true },
  { url: "https://www.propertycasualty360.com/feed/", category: 'news', priority: 2, enabled: true },
  { url: "https://www.riskandinsurance.com/feed/", category: 'news', priority: 3, enabled: true },
  { url: "https://www.carriermanagement.com/feed/", category: 'news', priority: 3, enabled: true },
  { url: "https://www.insurancebusinessmag.com/us/rss/", category: 'news', priority: 3, enabled: true },
  { url: "https://www.insurancenewsnet.com/feed/", category: 'news', priority: 3, enabled: true },

  // ============================================================================
  // REGULATORY FEEDS (State DOI, NAIC, Regulatory Bulletins)
  // ============================================================================
  { url: "https://www.naic.org/rss/", category: 'regulatory', priority: 1, enabled: true },
  // Note: Individual state DOI feeds would be added here as they become available
  // Examples: CA DOI, FL DOI, TX DOI, NY DFS, etc.

  // ============================================================================
  // CATASTROPHE FEEDS (Named Storms, Natural Disasters, CAT Events)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/catastrophes/", category: 'catastrophe', priority: 1, enabled: true },
  // NOAA NHC and NWS feeds for hurricane/severe weather tracking
  // Note: These feeds may require custom parsing due to non-standard RSS formats

  // ============================================================================
  // REINSURANCE FEEDS (Reinsurance Market News & Capacity)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/reinsurance/", category: 'reinsurance', priority: 2, enabled: true },
  // Artemis/ILS, The Insurer, and other reinsurance-specific sources
  // Note: Some reinsurance sources may require authentication or have limited RSS availability

  // ============================================================================
  // TECHNOLOGY FEEDS (InsurTech, Industry Tech, Digital Transformation)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/technology/", category: 'technology', priority: 3, enabled: true },
  // Additional tech-focused insurance industry blogs and publications
];

// Runtime cache for feeds (loaded from Firestore on startup)
let cachedFeeds: FeedSource[] = DEFAULT_FEED_SOURCES;
let feedsCacheTime = 0;
const FEEDS_CACHE_TTL_MS = 60 * 60 * 1000; // 1 hour

/**
 * Load feeds from Firestore, with fallback to defaults
 * Caches results for 1 hour to avoid excessive Firestore reads
 */
async function loadFeedsFromFirestore(): Promise<FeedSource[]> {
  const now = Date.now();

  // Return cached feeds if still valid
  if (feedsCacheTime > 0 && now - feedsCacheTime < FEEDS_CACHE_TTL_MS) {
    console.log('[FEEDS] Using cached feeds');
    return cachedFeeds;
  }

  try {
    const snapshot = await db.collection('feeds').get();
    if (snapshot.empty) {
      console.log('[FEEDS] No feeds in Firestore, using defaults');
      cachedFeeds = DEFAULT_FEED_SOURCES;
    } else {
      cachedFeeds = snapshot.docs
        .map(doc => doc.data() as FeedSource)
        .filter(f => f.enabled);
      console.log(`[FEEDS] Loaded ${cachedFeeds.length} enabled feeds from Firestore`);
    }
    feedsCacheTime = now;
    return cachedFeeds;
  } catch (error) {
    console.warn('[FEEDS] Error loading from Firestore, using defaults:', error);
    cachedFeeds = DEFAULT_FEED_SOURCES;
    feedsCacheTime = now;
    return cachedFeeds;
  }
}

// For backward compatibility, extract URLs from default sources
const FEEDS = DEFAULT_FEED_SOURCES.filter(f => f.enabled).map(f => f.url);

/**
 * Initialize feeds collection in Firestore (one-time setup)
 * Seeds from DEFAULT_FEED_SOURCES and can be called manually or on first deploy
 */
async function initializeFeedsCollection() {
  const batch = db.batch();

  for (const feed of DEFAULT_FEED_SOURCES) {
    const feedRef = db.collection('feeds').doc(hashUrl(feed.url));
    batch.set(feedRef, {
      ...feed,
      createdAt: new Date(),
      updatedAt: new Date(),
    }, { merge: true });
  }

  await batch.commit();
  console.log(`[FEEDS] Initialized ${DEFAULT_FEED_SOURCES.length} feeds in Firestore`);

  // Clear cache to force reload
  feedsCacheTime = 0;
}



/**
 * Shared logic for refreshing feeds with batch processing
 * Processes articles in batches with retry logic and detailed logging
 */
async function refreshFeedsLogic(apiKey: string) {
  const client = new OpenAI({apiKey});
  const parser = new Parser();

  // Generate unique batch ID for tracking
  const batchId = `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const results = {processed: 0, skipped: 0, errors: 0, feedsProcessed: 0, totalTokens: 0, totalLatencyMs: 0};
  const batchStartTime = Date.now();

  console.log(`[BATCH ${batchId}] Starting batch refresh...`);

  // Load feeds dynamically from Firestore
  const feeds = await loadFeedsFromFirestore();
  const feedUrls = feeds.map(f => f.url);
  console.log(`[BATCH ${batchId}] Loaded ${feedUrls.length} feeds from Firestore`);

  for (const feedUrl of feedUrls) {
    const feedStartTime = Date.now();
    const feedId = hashUrl(feedUrl);

    // Check circuit breaker before attempting feed
    if (!canAttemptFeed(feedUrl)) {
      console.warn(`[BATCH ${batchId}] [FEED ${feedId}] Skipped (circuit breaker OPEN): ${feedUrl}`);
      results.skipped++;
      continue;
    }

    try {
      console.log(`[BATCH ${batchId}] [FEED ${feedId}] Fetching feed: ${feedUrl}`);
      const feed = await parser.parseURL(feedUrl);
      const feedLatency = Date.now() - feedStartTime;
      console.log(`[BATCH ${batchId}] [FEED ${feedId}] Found ${feed.items.length} items in ${feedLatency}ms: ${feedUrl}`);
      results.feedsProcessed++;
      results.totalLatencyMs += feedLatency;
      recordFeedSuccess(feedUrl); // Update circuit breaker
      updateFeedHealth(feedUrl, true); // Track successful fetch

      // Process articles in batches
      const articles = feed.items.slice(0, BATCH_CONFIG.batchSize);

      for (let i = 0; i < articles.length; i++) {
        const item = articles[i];
        const itemIndex = i + 1;
        let articleStartTime = Date.now();

        try {
          if (!item.link) {
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Skipping item without link`);
            results.skipped++;
            continue;
          }

          const url = item.link;
          const id = hashUrl(url);
          const docRef = db.collection("articles").doc(id);

          // Idempotency check: use transaction to ensure atomic read-write
          const idempotencyKey = `${batchId}_${feedId}_${id}`;
          const idempotencyRef = db.collection("_idempotency").doc(idempotencyKey);
          const idempotencyDoc = await idempotencyRef.get();

          if (idempotencyDoc.exists) {
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Already processed in this batch (idempotent)`);
            results.skipped++;
            continue;
          }

          // Check if article already exists in database
          const exists = (await docRef.get()).exists;
          if (exists) {
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Article already exists`);
            results.skipped++;
            continue;
          }

          articleStartTime = Date.now();
          console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Processing: ${url}`);

          // Extract full content with retry logic
          let content: Awaited<ReturnType<typeof extractArticle>> | undefined;
          let extractRetries = 0;
          while (extractRetries < BATCH_CONFIG.maxRetries) {
            try {
              content = await extractArticle(url);
              break;
            } catch (error) {
              extractRetries++;
              if (extractRetries < BATCH_CONFIG.maxRetries) {
                console.log(`[ARTICLE ${itemIndex}/${articles.length}] Extract retry ${extractRetries}/${BATCH_CONFIG.maxRetries}`);
                await new Promise(resolve => setTimeout(resolve, BATCH_CONFIG.retryDelayMs));
              } else {
                throw error;
              }
            }
          }

          if (!content || !content.text || content.text.length < 100) {
            console.log(`[ARTICLE ${itemIndex}/${articles.length}] Article text too short (${content?.text?.length || 0} chars): ${url}`);
            results.skipped++;
            continue;
          }

          // Summarize & classify
          let brief = await summarizeAndTag(client, {
            url,
            source: (item.creator || feed.title || content.url || "").toString(),
            publishedAt: item.isoDate || item.pubDate || "",
            title: content.title,
            text: content.text,
          });

          // Post-parse validation: deduplicate citations, validate URLs
          brief = validateAndCleanArticle(brief);

          // RAG Quality Check: Ensure article is suitable for retrieval
          const ragQuality = checkRAGQuality(brief);
          if (!ragQuality.isQuality) {
            console.warn(`[ARTICLE ${itemIndex}/${articles.length}] RAG quality check failed (score: ${ragQuality.score}/100):`, ragQuality.issues);
            // Log but don't skip - store with quality flag for filtering
          }

          // Entity normalization (always set, with defaults)
          const regionsNormalized = brief.tags?.regions && brief.tags.regions.length > 0
            ? normalizeRegions(brief.tags.regions)
            : [];
          const companiesNormalized = brief.tags?.companies && brief.tags.companies.length > 0
            ? normalizeCompanies(brief.tags.companies)
            : [];

          // Verify normalization is always set
          if (!Array.isArray(regionsNormalized)) {
            console.warn(`[ARTICLE ${itemIndex}/${articles.length}] regionsNormalized is not an array, defaulting to []`);
          }
          if (!Array.isArray(companiesNormalized)) {
            console.warn(`[ARTICLE ${itemIndex}/${articles.length}] companiesNormalized is not an array, defaulting to []`);
          }

          // Deduplication: canonical URL and content hash
          const canonicalUrl = getCanonicalUrl(url, content.html);
          const contentHash = computeContentHash(content.text);

          // Check for duplicates by content hash
          const duplicateCheck = await db.collection('articles')
            .where('contentHash', '==', contentHash)
            .limit(1)
            .get();

          let clusterId = contentHash; // Use content hash as cluster ID
          if (!duplicateCheck.empty) {
            // Duplicate found - use existing cluster ID
            const existingDoc = duplicateCheck.docs[0];
            clusterId = existingDoc.data().clusterId || contentHash;
            console.log(`[ARTICLE ${itemIndex}/${articles.length}] Duplicate detected (cluster: ${clusterId}): ${brief.title}`);
          }

          // Regulatory detection: check if source is DOI or has regulatory keywords
          const regulatory = isRegulatorySource(url, brief.source) ||
                            (brief.tags?.regulations && brief.tags.regulations.length > 0);

          // Catastrophe detection: storm names
          const stormName = detectStormName(`${brief.title} ${content.text.slice(0, 1000)}`);

          // Build an embedding for Ask‑the‑Brief
          const emb = await embedForRAG(
            client,
            `${brief.title}\n${brief.bullets5.join("\n")}\n${Object.values(brief.whyItMatters).join("\n")}`
          );

          // Calculate SmartScore v3 (enhanced)
          const smartScore = calculateSmartScore({
            publishedAt: item.isoDate || item.pubDate || "",
            impactScore: brief.impactScore,
            impactBreakdown: brief.impactBreakdown,
            tags: brief.tags,
            regulatory,
            riskPulse: brief.riskPulse,
            stormName,
          });

          // AI-driven scoring for P&C professionals (v3 enhanced)
          const aiScore = await scoreArticleWithAI(client, {
            title: brief.title,
            bullets5: brief.bullets5,
            whyItMatters: brief.whyItMatters,
            tags: brief.tags,
            impactScore: brief.impactScore,
            publishedAt: item.isoDate || item.pubDate,
            regulatory,
            stormName,
            riskPulse: brief.riskPulse,
            sentiment: brief.sentiment,
          });

          // Store article metadata (without embedding for performance)
          await docRef.set({
            ...brief,
            publishedAt: item.isoDate || item.pubDate || "",
            createdAt: new Date(),
            smartScore,
            aiScore,
            ragQualityScore: ragQuality.score,
            ragQualityIssues: ragQuality.issues,
            regionsNormalized,
            companiesNormalized,
            canonicalUrl,
            contentHash,
            clusterId,
            regulatory,
            stormName: stormName || null,
            batchProcessedAt: new Date(),
          });

          // Store embedding in separate collection for performance
          await db.collection("article_embeddings").doc(id).set({
            embedding: emb,
            articleId: id,
            createdAt: new Date(),
          });

          // Record idempotency key to prevent reprocessing in same batch
          // TTL: 24 hours (idempotency window)
          await idempotencyRef.set({
            batchId,
            feedUrl,
            articleUrl: url,
            articleId: id,
            processedAt: new Date(),
            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
          });

          // Check link health (B2 - Link Health Checking)
          // Perform lightweight HEAD check to verify article URL is accessible
          const linkOk = await checkLinkHealth(canonicalUrl || url);

          // Update article with link health status
          await docRef.update({
            linkOk,
            lastCheckedAt: new Date(),
          });

          const articleLatency = Date.now() - articleStartTime;
          results.totalLatencyMs += articleLatency;
          console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Successfully processed in ${articleLatency}ms (linkOk: ${linkOk}): ${brief.title}`);
          results.processed++;
        } catch (error) {
          const articleLatency = Date.now() - articleStartTime;
          results.totalLatencyMs += articleLatency;
          console.error(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Error after ${articleLatency}ms:`, error);
          results.errors++;
        }
      }

      const feedDuration = Date.now() - feedStartTime;
      console.log(`[BATCH ${batchId}] [FEED ${feedId}] Completed in ${feedDuration}ms`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error(`[BATCH ${batchId}] [FEED ${feedId}] Error fetching feed:`, errorMessage);
      recordFeedFailure(feedUrl); // Update circuit breaker
      updateFeedHealth(feedUrl, false, errorMessage); // Track failed fetch
      results.errors++;
      // Continue to next feed instead of failing entire batch
    }
  }

  const totalDuration = Date.now() - batchStartTime;
  console.log(`[BATCH ${batchId}] SUMMARY | Duration: ${totalDuration}ms | Feeds: ${results.feedsProcessed} | Processed: ${results.processed} | Skipped: ${results.skipped} | Errors: ${results.errors} | AvgLatency: ${results.processed > 0 ? Math.round(results.totalLatencyMs / results.processed) : 0}ms`);

  return results;
}

/**
 * Batch refresh configuration
 * Defines the recurring schedule for news article batch processing
 */
const BATCH_CONFIG = {
  // Primary batch: Every 60 minutes (hourly)
  interval: 60,
  timeZone: "America/New_York",
  // Batch size: Process up to 50 articles per batch
  batchSize: 50,
  // Retry configuration
  maxRetries: 3,
  retryDelayMs: 5000,
};

/**
 * Circuit breaker state for feed health
 * Prevents hammering feeds that are consistently failing
 */
interface CircuitBreakerState {
  url: string;
  state: 'CLOSED' | 'OPEN' | 'HALF_OPEN';
  failureCount: number;
  lastFailureTime: number;
  successCount: number;
}

const circuitBreakers = new Map<string, CircuitBreakerState>();
const CIRCUIT_BREAKER_THRESHOLD = 5; // Failures before opening
const CIRCUIT_BREAKER_TIMEOUT_MS = 5 * 60 * 1000; // 5 minutes before half-open

/**
 * Feed health tracking - persisted to Firestore
 * Monitors success/failure rates for each RSS feed
 */
interface FeedHealth {
  url: string;
  successCount: number;
  failureCount: number;
  lastSuccessAt?: FirebaseFirestore.Timestamp | Date;
  lastFailureAt?: FirebaseFirestore.Timestamp | Date;
  lastError?: string;
  updatedAt: FirebaseFirestore.Timestamp | Date;
}

/**
 * Circuit breaker pattern for feed resilience
 * Prevents cascading failures by temporarily disabling problematic feeds
 */
function getCircuitBreakerState(feedUrl: string): CircuitBreakerState {
  if (!circuitBreakers.has(feedUrl)) {
    circuitBreakers.set(feedUrl, {
      url: feedUrl,
      state: 'CLOSED',
      failureCount: 0,
      lastFailureTime: 0,
      successCount: 0,
    });
  }
  return circuitBreakers.get(feedUrl)!;
}

function canAttemptFeed(feedUrl: string): boolean {
  const breaker = getCircuitBreakerState(feedUrl);
  const now = Date.now();

  if (breaker.state === 'CLOSED') {
    return true; // Normal operation
  }

  if (breaker.state === 'OPEN') {
    // Check if timeout has elapsed to transition to HALF_OPEN
    if (now - breaker.lastFailureTime > CIRCUIT_BREAKER_TIMEOUT_MS) {
      breaker.state = 'HALF_OPEN';
      breaker.failureCount = 0;
      console.log(`[CIRCUIT BREAKER] ${feedUrl} transitioning to HALF_OPEN`);
      return true;
    }
    return false; // Still open, skip this feed
  }

  // HALF_OPEN state - allow one attempt
  return true;
}

function recordFeedSuccess(feedUrl: string): void {
  const breaker = getCircuitBreakerState(feedUrl);
  breaker.failureCount = 0;
  breaker.successCount++;

  if (breaker.state === 'HALF_OPEN') {
    breaker.state = 'CLOSED';
    console.log(`[CIRCUIT BREAKER] ${feedUrl} recovered to CLOSED`);
  }
}

function recordFeedFailure(feedUrl: string): void {
  const breaker = getCircuitBreakerState(feedUrl);
  breaker.failureCount++;
  breaker.lastFailureTime = Date.now();

  if (breaker.failureCount >= CIRCUIT_BREAKER_THRESHOLD && breaker.state !== 'OPEN') {
    breaker.state = 'OPEN';
    console.warn(`[CIRCUIT BREAKER] ${feedUrl} opened after ${breaker.failureCount} failures`);
  }
}

/**
 * Check if a URL is accessible (B2 - Link Health Checking)
 * Performs a lightweight HEAD request to verify link availability
 * Returns true if status is 2xx or 3xx, false otherwise
 */
async function checkLinkHealth(url: string): Promise<boolean> {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout

    const response = await fetch(url, {
      method: "HEAD",
      redirect: "follow",
      signal: controller.signal,
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
      },
    });

    clearTimeout(timeoutId);
    return response.ok || (response.status >= 300 && response.status < 400);
  } catch (error) {
    console.warn(`[LINK HEALTH] Failed to check ${url}:`, error instanceof Error ? error.message : String(error));
    return false;
  }
}

/**
 * Update feed health metrics in Firestore
 */
async function updateFeedHealth(feedUrl: string, success: boolean, error?: string) {
  try {
    const healthRef = db.collection('feed_health').doc(hashUrl(feedUrl));
    const healthDoc = await healthRef.get();

    const health: FeedHealth = healthDoc.exists
      ? (healthDoc.data() as FeedHealth)
      : {
          url: feedUrl,
          successCount: 0,
          failureCount: 0,
          updatedAt: new Date(),
        };

    if (success) {
      health.successCount++;
      health.lastSuccessAt = new Date();
    } else {
      health.failureCount++;
      health.lastFailureAt = new Date();
      if (error) health.lastError = error;
    }

    health.updatedAt = new Date();

    await healthRef.set(health);

    // Log warning if failure rate > 50%
    const total = health.successCount + health.failureCount;
    if (total > 5 && health.failureCount / total > 0.5) {
      console.warn(
        `[FEED HEALTH WARNING] ${feedUrl} has high failure rate: ${health.failureCount}/${total}`
      );
    }
  } catch (e) {
    console.error('[FEED HEALTH ERROR] Failed to update feed health:', e);
    // Don't throw - health tracking failure shouldn't break feed processing
  }
}

/**
 * Enhanced refresh logic with batch processing and detailed logging
 */
async function refreshFeedsWithBatching(apiKey: string) {
  const startTime = Date.now();
  console.log(`[BATCH START] Initiating news feed batch refresh at ${new Date().toISOString()}`);
  console.log(`[BATCH CONFIG] Interval: ${BATCH_CONFIG.interval}min, BatchSize: ${BATCH_CONFIG.batchSize}, MaxRetries: ${BATCH_CONFIG.maxRetries}`);

  try {
    const results = await refreshFeedsLogic(apiKey);
    const duration = Date.now() - startTime;

    console.log(`[BATCH COMPLETE] Refresh completed in ${duration}ms`);
    console.log(`[BATCH RESULTS] Processed: ${results.processed}, Skipped: ${results.skipped}, Errors: ${results.errors}`);

    // Log batch completion to Firestore for monitoring
    await logBatchCompletion({
      timestamp: new Date(),
      duration,
      processed: results.processed,
      skipped: results.skipped,
      errors: results.errors,
      status: 'success',
    });

    return results;
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`[BATCH ERROR] Batch refresh failed after ${duration}ms:`, error);

    // Log batch failure to Firestore for monitoring
    await logBatchCompletion({
      timestamp: new Date(),
      duration,
      processed: 0,
      skipped: 0,
      errors: 1,
      status: 'failed',
      errorMessage: error instanceof Error ? error.message : 'Unknown error',
    });

    throw error;
  }
}

/**
 * Log batch completion metrics to Firestore for monitoring and analytics
 */
async function logBatchCompletion(metrics: Record<string, unknown>) {
  try {
    await db.collection('batch_logs').add({
      ...metrics,
      batchInterval: BATCH_CONFIG.interval,
      batchSize: BATCH_CONFIG.batchSize,
    });
  } catch (error) {
    console.error('[BATCH LOG ERROR] Failed to log batch metrics:', error);
    // Don't throw - logging failure shouldn't fail the batch
  }
}

// 1) Scheduled gatherer (hourly batch refresh)
export const refreshFeeds = onSchedule(
  {schedule: `every ${BATCH_CONFIG.interval} minutes`, timeZone: BATCH_CONFIG.timeZone, secrets: [OPENAI_API_KEY]},
  async () => {
    await refreshFeedsWithBatching(OPENAI_API_KEY.value());
  }
);

// 1a) Initialize feeds collection (one-time setup)
export const initializeFeeds = onRequest(
  {cors: false},
  async (req, res) => {
    try {
      // CORS check for admin endpoints
      const origin = req.headers.origin;
      if (!checkCORS(origin)) {
        res.status(403).json({error: "Forbidden: Invalid origin"});
        return;
      }
      res.set('Access-Control-Allow-Origin', origin);

      console.log("[INIT FEEDS] Initializing feeds collection");
      await initializeFeedsCollection();
      res.json({
        success: true,
        message: "Feeds collection initialized",
        feedCount: DEFAULT_FEED_SOURCES.length,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      console.error('[INIT FEEDS ERROR]', error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  }
);

// 1b) Manual trigger for batch refresh (HTTP callable - restricted)
export const refreshFeedsManual = onRequest(
  {cors: false, secrets: [OPENAI_API_KEY], timeoutSeconds: 540},
  async (req, res) => {
    try {
      // CORS check for admin endpoints
      const origin = req.headers.origin;
      if (!checkCORS(origin)) {
        res.status(403).json({error: "Forbidden: Invalid origin"});
        return;
      }
      res.set('Access-Control-Allow-Origin', origin);

      console.log("[MANUAL TRIGGER] Feed refresh initiated via HTTP request");
      const results = await refreshFeedsWithBatching(OPENAI_API_KEY.value());
      res.json({
        success: true,
        message: "Batch feed refresh complete",
        batchConfig: BATCH_CONFIG,
        results,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const err = error as any;
      console.error("[MANUAL TRIGGER ERROR] Error in refreshFeedsManual:", err);
      res.status(500).json({
        success: false,
        error: err.message || "Unknown error",
        stack: err.stack,
        timestamp: new Date().toISOString(),
      });
    }
  }
);

// 1c) Test single article processing
export const testSingleArticle = onRequest(
  {cors: true, secrets: [OPENAI_API_KEY]},
  async (_req, res) => {
    try {
      console.log("[TEST] Single article processing test initiated");
      const client = new OpenAI({apiKey: OPENAI_API_KEY.value()});
      const parser = new Parser();

      const feedUrl = FEEDS[0];
      console.log(`[TEST] Fetching feed: ${feedUrl}`);
      const feed = await parser.parseURL(feedUrl);
      console.log(`[TEST] Found ${feed.items.length} items`);

      if (feed.items.length === 0) {
        res.json({error: "No items in feed", timestamp: new Date().toISOString()});
        return;
      }

      const item = feed.items[0];
      const url = item.link!;
      console.log(`[TEST] Processing: ${url}`);

      // Extract
      const content = await extractArticle(url);
      console.log(`[TEST] Extracted ${content.text?.length || 0} characters`);

      // Summarize
      let brief = await summarizeAndTag(client, {
        url,
        source: (item.creator || feed.title || "").toString(),
        publishedAt: item.isoDate || item.pubDate || "",
        title: content.title,
        text: content.text,
      });

      // Post-parse validation: deduplicate citations, validate URLs
      brief = validateAndCleanArticle(brief);

      console.log(`[TEST] Summarized: ${brief.title}`);

      res.json({
        success: true,
        batchConfig: BATCH_CONFIG,
        article: {
          url,
          extractedLength: content.text?.length || 0,
          brief,
        },
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const err = error as any;
      console.error("Error in testSingleArticle:", err);
      res.status(500).json({
        success: false,
        error: err.message || "Unknown error",
        stack: err.stack,
      });
    }
  }
);

// 4) Feed Health Report (monitoring endpoint)
export const feedHealthReport = onRequest({cors: true}, async (_req, res) => {
  try {
    // Fetch all feed health records from Firestore
    const healthSnapshot = await db.collection('feed_health').get();

    const healthData = healthSnapshot.docs.map(doc => {
      const health = doc.data() as FeedHealth;
      const total = health.successCount + health.failureCount;

      // Handle Firestore Timestamp or Date
      const lastSuccess = health.lastSuccessAt instanceof Date
        ? health.lastSuccessAt.toISOString()
        : health.lastSuccessAt?.toDate?.()?.toISOString();
      const lastFailure = health.lastFailureAt instanceof Date
        ? health.lastFailureAt.toISOString()
        : health.lastFailureAt?.toDate?.()?.toISOString();

      return {
        url: health.url,
        successCount: health.successCount,
        failureCount: health.failureCount,
        successRate: total > 0 ? (health.successCount / total * 100).toFixed(2) + '%' : 'N/A',
        lastSuccess,
        lastFailure,
        lastError: health.lastError,
        status: total === 0 ? 'UNKNOWN' : (health.failureCount / total > 0.5 ? 'UNHEALTHY' : 'HEALTHY'),
      };
    });

    res.json({
      success: true,
      timestamp: new Date().toISOString(),
      totalFeeds: FEEDS.length,
      monitoredFeeds: healthData.length,
      feeds: healthData,
    });
  } catch (error) {
    console.error('[FEED HEALTH ERROR]', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    });
  }
});

/**
 * Cosine similarity helper
 */
function cosineSimilarity(a: number[], b: number[]): number {
  const dot = a.reduce((s, v, i) => s + v * b[i], 0);
  const ma = Math.sqrt(a.reduce((s, v) => s + v * v, 0));
  const mb = Math.sqrt(b.reduce((s, v) => s + v * v, 0));
  return dot / (ma * mb);
}

/**
 * Maximal Marginal Relevance (MMR) re-ranking
 * Balances relevance with diversity to avoid redundant results
 */
function mmrRerank(
  items: Array<{it: Record<string, unknown>; score: number}>,
  topK: number,
  lambda: number = 0.7
): Array<{it: Record<string, unknown>; score: number; mmrScore: number}> {
  const selected: Array<{it: Record<string, unknown>; score: number; mmrScore: number}> = [];
  const remaining = [...items];

  while (selected.length < topK && remaining.length > 0) {
    let bestIdx = 0;
    let bestScore = -Infinity;

    for (let i = 0; i < remaining.length; i++) {
      const relevance = remaining[i].score;

      // Diversity: penalize items similar to already-selected items
      let diversity = 1.0;
      if (selected.length > 0) {
        const maxSimilarity = Math.max(
          ...selected.map(s => cosineSimilarity(remaining[i].it.embedding as number[], s.it.embedding as number[]))
        );
        diversity = 1.0 - maxSimilarity;
      }

      const mmrScore = lambda * relevance + (1 - lambda) * diversity;
      if (mmrScore > bestScore) {
        bestScore = mmrScore;
        bestIdx = i;
      }
    }

    const [selected_item] = remaining.splice(bestIdx, 1);
    selected.push({...selected_item, mmrScore: bestScore});
  }

  return selected;
}

/**
 * Apply cluster diversity: limit to 1 article per clusterId
 */
function applyClusterDiversity(
  items: Array<{it: Record<string, unknown>; score: number; mmrScore?: number}>,
  maxPerCluster: number = 1
): Array<{it: Record<string, unknown>; score: number; mmrScore?: number}> {
  const clusterMap = new Map<string, Array<{it: Record<string, unknown>; score: number; mmrScore?: number}>>();

  for (const item of items) {
    const clusterId = (item.it.clusterId || item.it.id) as string;
    if (!clusterMap.has(clusterId)) {
      clusterMap.set(clusterId, []);
    }
    clusterMap.get(clusterId)!.push(item);
  }

  const result: Array<{it: Record<string, unknown>; score: number; mmrScore?: number}> = [];
  for (const cluster of clusterMap.values()) {
    // Take top N from each cluster (sorted by score)
    result.push(...cluster.sort((a, b) => (b.mmrScore ?? b.score) - (a.mmrScore ?? a.score)).slice(0, maxPerCluster));
  }

  return result;
}

/**
 * Apply recency boost: recent articles get higher scores
 */
function applyRecencyBoost(
  items: Array<{it: Record<string, unknown>; score: number; mmrScore?: number}>,
  boostFactor: number = 0.1
): Array<{it: Record<string, unknown>; score: number; mmrScore?: number; recencyBoostedScore?: number}> {
  const now = Date.now();
  const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days

  return items.map(item => {
    let createdAt: Date;
    const rawDate = item.it.createdAt;
    if (rawDate instanceof Date) {
      createdAt = rawDate;
    } else if (typeof rawDate === "object" && rawDate !== null && "toDate" in rawDate) {
      createdAt = (rawDate as {toDate: () => Date}).toDate();
    } else if (typeof rawDate === "number") {
      createdAt = new Date(rawDate);
    } else {
      createdAt = new Date();
    }
    const age = now - createdAt.getTime();
    const recencyScore = Math.max(0, 1 - age / maxAge);
    const boostedScore = (item.mmrScore ?? item.score) + recencyScore * boostFactor;

    return {...item, recencyBoostedScore: boostedScore};
  });
}

/**
 * Simple BM25-style keyword scoring for hybrid retrieval (D2)
 * Scores articles based on keyword matches in title, bullets, and tags
 */
function scoreByKeywords(query: string, article: Record<string, unknown>): number {
  const queryTerms = query.toLowerCase().split(/\s+/).filter(t => t.length > 2);
  if (queryTerms.length === 0) return 0;

  let score = 0;
  const text = [
    (article.title as string) || "",
    ((article.bullets5 as string[]) || []).join(" "),
    ((article.tags as {trends?: string[]})?.trends || []).join(" "),
    ((article.tags as {regulations?: string[]})?.regulations || []).join(" "),
    ((article.tags as {perils?: string[]})?.perils || []).join(" "),
  ].join(" ").toLowerCase();

  for (const term of queryTerms) {
    const matches = (text.match(new RegExp(term, "g")) || []).length;
    score += matches * 10; // Weight each match
  }

  return score;
}

/**
 * Promote regulatory and CAT documents when relevant (D2)
 */
function promoteRegulatoryAndCAT(items: Array<{it: Record<string, unknown>; score: number}>, query: string): Array<{it: Record<string, unknown>; score: number}> {
  const regulatoryKeywords = ["regulatory", "naic", "doi", "bulletin", "rule", "regulation", "compliance"];
  const catKeywords = ["hurricane", "storm", "catastrophe", "cat", "disaster", "wildfire", "earthquake"];

  const queryLower = query.toLowerCase();
  const isRegulatoryQuery = regulatoryKeywords.some(kw => queryLower.includes(kw));
  const isCATQuery = catKeywords.some(kw => queryLower.includes(kw));

  return items.map(item => {
    let boost = 1.0;
    if (isRegulatoryQuery && item.it.regulatory) {
      boost *= 1.5; // 50% boost for regulatory articles
    }
    if (isCATQuery && item.it.stormName) {
      boost *= 1.5; // 50% boost for CAT articles
    }
    return {...item, score: item.score * boost};
  });
}

// 2) Ask‑the‑Brief (RAG with hybrid retrieval, MMR, and cluster diversity)
export const askBrief = onRequest({cors: false, secrets: [OPENAI_API_KEY]}, async (req, res) => {
  const startTime = Date.now();
  try {
    // CORS check
    const origin = req.headers.origin;
    if (!checkCORS(origin)) {
      res.status(403).json(createErrorResponse('Forbidden: Invalid origin', 'CORS_ERROR'));
      return;
    }
    res.set('Access-Control-Allow-Origin', origin);
    res.set('Access-Control-Allow-Methods', 'GET, POST');
    res.set('Access-Control-Allow-Headers', 'Content-Type');

    // Handle preflight
    if (req.method === 'OPTIONS') {
      res.status(204).send('');
      return;
    }

    // Rate limiting (Firestore-backed)
    const ip = req.headers['x-forwarded-for']?.toString().split(',')[0] || req.ip || 'unknown';
    const rateLimitOk = await checkRateLimit(ip);
    if (!rateLimitOk) {
      res.status(429).json(createErrorResponse('Rate limit exceeded. Please try again later.', 'RATE_LIMIT_EXCEEDED'));
      return;
    }

    // Input validation and sanitization
    const rawQuery = (req.query.q || req.body?.q || "").toString();
    const q = rawQuery.replace(/<[^>]*>/g, '').slice(0, 500); // Strip HTML, limit length
    if (!q || q.trim().length < 3) {
      res.status(400).json(createErrorResponse('Query required (min 3 characters)', 'INVALID_QUERY'));
      return;
    }

    const client = new OpenAI({apiKey: OPENAI_API_KEY.value()});

    // Fetch recent articles (keep it simple; Firestore has no native vector search)
    const snap = await db.collection("articles").orderBy("createdAt", "desc").limit(500).get();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const articles = snap.docs.map((d) => ({id: d.id, ...d.data()} as any));

    if (articles.length === 0) {
      res.json({
        answerText: "No articles found in context.",
        bullets: [],
        sources: [],
        related: [],
        usedArticles: [],
        highlights: [],
        latencyMs: Date.now() - startTime,
      });
      return;
    }

    // Fetch embeddings from separate collection
    const embeddingSnap = await db.collection("article_embeddings").where("articleId", "in", articles.map(a => a.id)).get();
    const embeddingMap = new Map(embeddingSnap.docs.map(d => [d.data().articleId, d.data().embedding]));

    // Merge embeddings with articles
    const items = articles
      .filter(a => embeddingMap.has(a.id)) // Only include articles with embeddings
      .map(a => ({...a, embedding: embeddingMap.get(a.id)} as Record<string, unknown>));

    if (items.length === 0) {
      res.json({
        answerText: "No articles with embeddings found in context.",
        bullets: [],
        sources: [],
        related: [],
        usedArticles: [],
        highlights: [],
        latencyMs: Date.now() - startTime,
      });
      return;
    }

    // Embed the query (MUST match stored embedding dimensions: 512)
    const qEmb = (await client.embeddings.create({
      model: "text-embedding-3-small",
      input: q,
      dimensions: 512,
    })).data[0].embedding;

    // Step 1: Hybrid retrieval - combine semantic and keyword scoring (D2)
    const keywordScored = items.map((it) => ({
      it,
      semanticScore: cosineSimilarity(qEmb, it.embedding as number[]),
      keywordScore: scoreByKeywords(q, it),
    }));

    // Normalize scores to 0-1 range
    const maxKeywordScore = Math.max(...keywordScored.map(x => x.keywordScore), 1);
    const hybridScored = keywordScored.map(x => ({
      ...x,
      score: (x.semanticScore * 0.6) + ((x.keywordScore / maxKeywordScore) * 0.4), // 60% semantic, 40% keyword
    }));

    // Step 2: Promote regulatory and CAT documents (D2)
    const promoted = promoteRegulatoryAndCAT(hybridScored, q);

    // Step 3: Cosine similarity ranking (top 20 for MMR)
    const cosineSimilarityRanked = promoted
      .sort((a, b) => b.score - a.score)
      .slice(0, 20);

    // Step 4: MMR re-ranking for diversity
    const mmrRanked = mmrRerank(cosineSimilarityRanked, 12, 0.7);

    // Step 5: Apply cluster diversity (max 1 per cluster)
    const diverseRanked = applyClusterDiversity(mmrRanked, 1);

    // Step 6: Apply recency boost
    const finalRanked = applyRecencyBoost(diverseRanked, 0.1)
      .sort((a, b) => (b.recencyBoostedScore ?? b.mmrScore ?? b.score) - (a.recencyBoostedScore ?? a.mmrScore ?? a.score))
      .slice(0, 8);

    // Build context from top results
    const context = finalRanked.map((r) => {
      const title = r.it.title as string;
      const bullets = (r.it.bullets5 as string[]) || [];
      const whyItMatters = (r.it.whyItMatters as Record<string, unknown>) || {};
      const canonicalUrl = r.it.canonicalUrl as string | undefined;
      const url = r.it.url as string;
      return `TITLE: ${title}\nBULLETS:\n- ${bullets.join("\n- ")}\nWHY:\n${
        Object.entries(whyItMatters).map(([k, v]) => `${k.toUpperCase()}: ${v}`).join("\n")
      }\nURL: ${canonicalUrl || url}`;
    }).join("\n\n---\n\n");

    // Generate answer with structured output
    const answer = await client.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0.2,
      max_tokens: 500,
      messages: [
        {
          role: "system",
          content: "You are a P&C insurance analyst. Answer using ONLY the provided context. " +
            "If information is not found, respond with 'Not found in current context.' " +
            "Provide: 1) Short answer (1-2 sentences), 2) 3 bullet-point rationale, 3) Inline citations with [URL] format.",
        },
        {role: "user", content: `Question: ${q}\n\nContext:\n${context}`},
      ],
    });

    const answerText = answer.choices[0]?.message?.content ?? "Not found in current context.";

    // GUARDRAIL: Extract URLs from answer and validate against source articles
    // This prevents hallucinated links by only allowing URLs from the context
    const validArticleUrls = new Set(finalRanked.map(r => {
      const canonicalUrl = r.it.canonicalUrl as string | undefined;
      const url = r.it.url as string;
      return (canonicalUrl || url).toLowerCase();
    }));

    // Extract URLs from answer text (both [URL] format and plain URLs)
    const urlPattern = /\[?(https?:\/\/[^\s[\]]+)\]?/gi;
    const extractedUrls = new Set<string>();
    let match;
    while ((match = urlPattern.exec(answerText)) !== null) {
      const url = match[1].toLowerCase();
      // Only include URLs that are in our source articles
      if (validArticleUrls.has(url)) {
        extractedUrls.add(url);
      } else {
        console.warn(`[ASK BRIEF GUARDRAIL] Rejected hallucinated URL: ${url}`);
      }
    }

    // Build citations from validated URLs
    const citations = finalRanked
      .filter(r => {
        const canonicalUrl = r.it.canonicalUrl as string | undefined;
        const url = r.it.url as string;
        return extractedUrls.has((canonicalUrl || url).toLowerCase());
      })
      .map(r => ({
        title: r.it.title as string,
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
      }));

    // If no citations were extracted, include all source articles as fallback
    if (citations.length === 0) {
      citations.push(...finalRanked.map(r => ({
        title: r.it.title as string,
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
      })));
    }

    const latencyMs = Date.now() - startTime;
    console.log(`[ASK BRIEF] Query: "${q}" | Results: ${finalRanked.length} | Latency: ${latencyMs}ms`);

    // D1: Structured JSON output with enhanced fields
    res.json({
      answerText,
      bullets: finalRanked.slice(0, 3).map(r => ((r.it.bullets5 as string[]) || [])[0] || ''),
      sources: citations,
      related: finalRanked.slice(0, 5).map(r => ({
        title: r.it.title as string,
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
        clusterId: r.it.clusterId as string | undefined,
      })),
      usedArticles: finalRanked.map(r => r.it.id as string),
      highlights: finalRanked.slice(0, 3).map(r => ({
        quote: (r.it.leadQuote as string | undefined) || ((r.it.bullets5 as string[]) || [])[0] || '',
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
      })),
      latencyMs,
    });
  } catch (e) {
    const statusCode = getHttpStatusCode(e);
    const errorResponse = createErrorResponse(e, 'ASK_BRIEF_ERROR');
    console.error('[ASK BRIEF ERROR]', errorResponse);
    res.status(statusCode).json(errorResponse);
  }
});

/**
 * Reader View Endpoint (B1)
 *
 * Fetches an article URL and returns sanitized HTML for display in a Quick Read modal.
 * Strips tracking, injects canonical source attribution, and returns safe HTML.
 *
 * Query Parameters:
 * - url: The article URL to fetch and sanitize
 *
 * Response:
 * {
 *   title: string,
 *   byline?: string,
 *   published?: string,
 *   mainImage?: string,
 *   html: string (sanitized)
 * }
 */
export const readerView = onRequest(
  {cors: true, timeoutSeconds: 30},
  async (req, res) => {
    try {
      const startTime = Date.now();
      const url = req.query.url as string;

      if (!url) {
        res.status(400).json({error: "Missing 'url' query parameter"});
        return;
      }

      // Validate URL format
      try {
        new URL(url);
      } catch {
        res.status(400).json({error: "Invalid URL format"});
        return;
      }

      console.log(`[READER VIEW] Fetching: ${url}`);

      // Extract article using existing utility
      const content = await extractArticle(url);

      if (!content || !content.html) {
        res.status(404).json({error: "Could not extract article content"});
        return;
      }

      // Sanitize HTML: remove scripts, tracking pixels, and dangerous elements
      const sanitizedHtml = sanitizeHtml(content.html);

      // Inject canonical source attribution at the end
      const attributedHtml = `${sanitizedHtml}
<div style="margin-top: 2rem; padding-top: 1rem; border-top: 1px solid #e5e7eb; font-size: 0.875rem; color: #6b7280;">
  <p><strong>Source:</strong> <a href="${url}" target="_blank" rel="noopener noreferrer">${new URL(url).hostname}</a></p>
  <p style="margin-top: 0.5rem; font-size: 0.75rem; color: #9ca3af;">Read via CarrierSignal Quick Read</p>
</div>`;

      const latencyMs = Date.now() - startTime;

      res.json({
        title: content.title || "Article",
        byline: content.author,
        mainImage: content.mainImage,
        html: attributedHtml,
        latencyMs,
      });
    } catch (error) {
      console.error('[READER VIEW ERROR]', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : "Failed to fetch article",
      });
    }
  }
);

/**
 * Sanitize HTML for safe display
 * Removes scripts, tracking pixels, and dangerous elements
 * Preserves formatting and links
 */
function sanitizeHtml(html: string): string {
  // Remove script tags and content
  let sanitized = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "");

  // Remove style tags and content
  sanitized = sanitized.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, "");

  // Remove tracking pixels and iframes
  sanitized = sanitized.replace(/<img[^>]*(?:tracking|pixel|beacon)[^>]*>/gi, "");
  sanitized = sanitized.replace(/<iframe[^>]*>/gi, "");

  // Remove event handlers
  sanitized = sanitized.replace(/\s*on\w+\s*=\s*["'][^"']*["']/gi, "");
  sanitized = sanitized.replace(/\s*on\w+\s*=\s*[^\s>]*/gi, "");

  // Remove meta tags except for basic ones
  sanitized = sanitized.replace(/<meta[^>]*(?:tracking|analytics|facebook|twitter)[^>]*>/gi, "");

  // Remove noscript tags
  sanitized = sanitized.replace(/<noscript[^>]*>[\s\S]*?<\/noscript>/gi, "");

  // Remove comments
  sanitized = sanitized.replace(/<!--[\s\S]*?-->/g, "");

  return sanitized;
}






================================================================================
FILE: functions/src/ingestion/deduplication.ts
================================================================================

/**
 * Deduplication Service
 * Detects and handles duplicate articles using multiple strategies
 */

import * as crypto from 'crypto';
import { DuplicateCheckResult } from './types';

export class DeduplicationService {
  private readonly SIMILARITY_THRESHOLD = 0.85;
  private urlHashes: Map<string, string> = new Map();

  /**
   * Generate content hash for fast duplicate detection
   */
  generateContentHash(content: string): string {
    return crypto
      .createHash('sha256')
      .update(content.toLowerCase().trim())
      .digest('hex');
  }

  /**
   * Generate URL hash for quick lookups
   */
  generateUrlHash(url: string): string {
    return crypto
      .createHash('md5')
      .update(url.toLowerCase().trim())
      .digest('hex');
  }

  /**
   * Normalize URL for comparison
   */
  normalizeUrl(url: string): string {
    try {
      const parsed = new URL(url);
      // Remove tracking parameters
      const params = new URLSearchParams(parsed.search);
      params.delete('utm_source');
      params.delete('utm_medium');
      params.delete('utm_campaign');
      params.delete('utm_content');
      params.delete('utm_term');

      parsed.search = params.toString();
      return parsed.toString().toLowerCase();
    } catch {
      return url.toLowerCase();
    }
  }

  /**
   * Check if URL is duplicate
   */
  isUrlDuplicate(url: string, existingUrls: string[]): DuplicateCheckResult {
    const normalizedUrl = this.normalizeUrl(url);

    // Check exact match
    for (const existing of existingUrls) {
      const normalizedExisting = this.normalizeUrl(existing);
      if (normalizedUrl === normalizedExisting) {
        return {
          isDuplicate: true,
          similarity: 1.0,
          matchedUrl: existing,
          reason: 'Exact URL match',
        };
      }
    }

    return {
      isDuplicate: false,
      similarity: 0,
    };
  }

  /**
   * Calculate Levenshtein distance for string similarity
   */
  private levenshteinDistance(str1: string, str2: string): number {
    const len1 = str1.length;
    const len2 = str2.length;
    const matrix: number[][] = Array(len2 + 1)
      .fill(null)
      .map(() => Array(len1 + 1).fill(0));

    for (let i = 0; i <= len1; i++) matrix[0][i] = i;
    for (let j = 0; j <= len2; j++) matrix[j][0] = j;

    for (let j = 1; j <= len2; j++) {
      for (let i = 1; i <= len1; i++) {
        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,
          matrix[j - 1][i] + 1,
          matrix[j - 1][i - 1] + indicator
        );
      }
    }

    const distance = matrix[len2][len1];
    const maxLen = Math.max(len1, len2);
    return 1 - distance / maxLen;
  }

  /**
   * Check if titles are similar
   */
  isTitleDuplicate(title1: string, title2: string): DuplicateCheckResult {
    const normalized1 = title1.toLowerCase().trim();
    const normalized2 = title2.toLowerCase().trim();

    // Exact match
    if (normalized1 === normalized2) {
      return {
        isDuplicate: true,
        similarity: 1.0,
        reason: 'Exact title match',
      };
    }

    // Calculate similarity
    const similarity = this.levenshteinDistance(normalized1, normalized2);

    if (similarity >= this.SIMILARITY_THRESHOLD) {
      return {
        isDuplicate: true,
        similarity,
        reason: 'Similar title',
      };
    }

    return {
      isDuplicate: false,
      similarity,
    };
  }

  /**
   * Extract key phrases from content for semantic comparison
   */
  private extractKeyPhrases(content: string): Set<string> {
    // Extract 2-3 word phrases that are likely to be unique to the article
    const words = content.toLowerCase().split(/\s+/).filter(w => w.length > 4);
    const phrases = new Set<string>();

    for (let i = 0; i < words.length - 1; i++) {
      phrases.add(`${words[i]} ${words[i + 1]}`);
      if (i < words.length - 2) {
        phrases.add(`${words[i]} ${words[i + 1]} ${words[i + 2]}`);
      }
    }

    return phrases;
  }

  /**
   * Calculate semantic similarity between two content pieces
   */
  private calculateSemanticSimilarity(content1: string, content2: string): number {
    const phrases1 = this.extractKeyPhrases(content1);
    const phrases2 = this.extractKeyPhrases(content2);

    if (phrases1.size === 0 || phrases2.size === 0) return 0;

    let matches = 0;
    for (const phrase of phrases1) {
      if (phrases2.has(phrase)) matches++;
    }

    const totalPhrases = Math.max(phrases1.size, phrases2.size);
    return matches / totalPhrases;
  }

  /**
   * Check if content is duplicate using multiple strategies
   */
  isContentDuplicate(
    url: string,
    title: string,
    content: string,
    existingArticles: Array<{ url: string; title: string; content?: string }>
  ): DuplicateCheckResult {
    // First check URL
    const urlCheck = this.isUrlDuplicate(url, existingArticles.map((a) => a.url));
    if (urlCheck.isDuplicate) {
      return urlCheck;
    }

    // Then check title similarity
    for (const existing of existingArticles) {
      const titleCheck = this.isTitleDuplicate(title, existing.title);
      if (titleCheck.isDuplicate) {
        return {
          ...titleCheck,
          matchedUrl: existing.url,
        };
      }
    }

    // Finally, check semantic similarity of content
    if (content && content.length > 100) {
      for (const existing of existingArticles) {
        if (existing.content && existing.content.length > 100) {
          const semanticSimilarity = this.calculateSemanticSimilarity(content, existing.content);
          if (semanticSimilarity >= 0.7) {
            return {
              isDuplicate: true,
              similarity: semanticSimilarity,
              matchedUrl: existing.url,
              reason: 'Semantic content similarity',
            };
          }
        }
      }
    }

    return {
      isDuplicate: false,
      similarity: 0,
    };
  }

  /**
   * Clear cache
   */
  clearCache(): void {
    this.urlHashes.clear();
  }
}

export default new DeduplicationService();




================================================================================
FILE: functions/src/ingestion/firebase.ts
================================================================================

/**
 * Firebase Configuration for Ingestion Service
 * Provides Firestore instance for ingestion operations
 */

import { getFirestore } from 'firebase-admin/firestore';

export const db = getFirestore();




================================================================================
FILE: functions/src/ingestion/index.ts
================================================================================

/**
 * Ingestion Module Exports
 * Core ingestion functionality for CarrierSignal
 */

export { IngestionService } from './service';
export { DeduplicationService } from './deduplication';
export { RSSPlugin } from './plugins/rss';
export type {
  RawArticle,
  IngestionSource,
  IngestionResult,
  IngestionError,
  IngestionPlugin,
  ContentHash,
  DuplicateCheckResult,
} from './types';

import { IngestionService } from './service';

export const ingestionService = new IngestionService();




================================================================================
FILE: functions/src/ingestion/plugins/rss.ts
================================================================================

/**
 * RSS/Atom Feed Ingestion Plugin
 * Fetches and parses RSS and Atom feeds using rss-parser
 * Includes timeout, error handling, and filtering for recent articles
 */

import Parser from 'rss-parser';
import { IngestionPlugin, RawArticle, IngestionSource } from '../types';

export class RSSPlugin implements IngestionPlugin {
  name = 'RSS/Atom Feed Plugin';
  type: 'rss' | 'atom' = 'rss';
  private parser: Parser;
  private readonly FETCH_TIMEOUT_MS = 30000; // 30 second timeout
  private readonly MAX_ARTICLES_PER_FEED = 100; // Limit articles per feed
  private readonly ARTICLE_AGE_HOURS = 48; // Only fetch articles from last 48 hours

  constructor() {
    this.parser = new Parser({
      customFields: {
        item: [
          ['content:encoded', 'content'],
          ['dc:creator', 'creator'],
          ['media:content', 'mediaContent'],
          ['media:thumbnail', 'mediaThumbnail'],
        ],
      },
      timeout: this.FETCH_TIMEOUT_MS,
    });
  }

  async fetch(source: IngestionSource): Promise<RawArticle[]> {
    if (!source.url) {
      throw new Error('RSS source URL is required');
    }

    try {
      // Create abort controller for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.FETCH_TIMEOUT_MS);

      try {
        const feed = await this.parser.parseURL(source.url);
        clearTimeout(timeoutId);

        const articles: RawArticle[] = [];
        const now = Date.now();
        const maxAge = this.ARTICLE_AGE_HOURS * 60 * 60 * 1000;

        if (feed.items) {
          for (const item of feed.items) {
            // Filter articles by age
            const pubDate = item.pubDate || item.isoDate;
            if (pubDate) {
              const itemTime = new Date(pubDate).getTime();
              if (now - itemTime > maxAge) {
                continue; // Skip old articles
              }
            }

            const article = this.parseItem(item, source.name);
            if (article) {
              articles.push(article);
              if (articles.length >= this.MAX_ARTICLES_PER_FEED) {
                break; // Limit articles per feed
              }
            }
          }
        }

        return articles;
      } catch (error) {
        clearTimeout(timeoutId);
        throw error;
      }
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : String(error);
      throw new Error(
        `Failed to fetch RSS feed from ${source.url}: ${errorMsg}`
      );
    }
  }

  private parseItem(item: Parser.Item, source: string): RawArticle | null {
    try {
      const url = item.link || '';
      const title = item.title || '';

      if (!url || !title) {
        return null;
      }

      const itemData = item as Record<string, unknown>;

      // Extract image from various possible fields
      let mainImage = '';
      if (itemData.mediaThumbnail) {
        const thumb = itemData.mediaThumbnail as Record<string, unknown>;
        mainImage = (thumb.$ as Record<string, unknown>)?.url as string || '';
      }
      if (!mainImage && itemData.mediaContent) {
        const media = itemData.mediaContent as Record<string, unknown>;
        mainImage = (media.$ as Record<string, unknown>)?.url as string || '';
      }
      if (!mainImage && item.enclosure?.url) {
        mainImage = item.enclosure.url;
      }

      return {
        url,
        source,
        title,
        publishedAt: item.pubDate || item.isoDate || new Date().toISOString(),
        description: item.contentSnippet || (itemData.summary as string) || '',
        html: (itemData.content as string) || item.content || (itemData.description as string) || '',
        text: item.contentSnippet || (itemData.summary as string) || '',
        author: (itemData.creator as string) || (itemData.author as string) || '',
        mainImage: mainImage || undefined,
      };
    } catch (error) {
      console.warn(`Failed to parse RSS item: ${error instanceof Error ? error.message : String(error)}`);
      return null;
    }
  }

  validate(article: RawArticle): boolean {
    return !!(article.url && article.title && article.source);
  }
}

export default new RSSPlugin();




================================================================================
FILE: functions/src/ingestion/service.ts
================================================================================

/**
 * Ingestion Service
 * Orchestrates article ingestion, deduplication, and normalization
 */

import { db } from './firebase';
import { IngestionPlugin, RawArticle, IngestionSource, IngestionResult, IngestionError } from './types';
import { DeduplicationService } from './deduplication';
import { RSSPlugin } from './plugins/rss';
import { ArticleSchema } from '../schemas';

export class IngestionService {
  private plugins: Map<string, IngestionPlugin> = new Map();
  private deduplicationService: DeduplicationService;

  constructor() {
    this.deduplicationService = new DeduplicationService();
    this.registerPlugin(new RSSPlugin());
  }

  /**
   * Register an ingestion plugin
   */
  registerPlugin(plugin: IngestionPlugin): void {
    this.plugins.set(plugin.type, plugin);
  }

  /**
   * Fetch articles from a source with retry logic
   */
  async fetchFromSource(source: IngestionSource): Promise<IngestionResult> {
    const startTime = Date.now();
    const errors: IngestionError[] = [];
    let articlesProcessed = 0;
    let articlesAdded = 0;
    let articlesDuplicate = 0;

    try {
      const plugin = this.plugins.get(source.type);
      if (!plugin) {
        throw new Error(`No plugin found for source type: ${source.type}`);
      }

      // Fetch articles with retry logic
      let articles: RawArticle[] = [];
      let lastError: Error | null = null;

      for (let attempt = 0; attempt <= source.maxRetries; attempt++) {
        try {
          articles = await plugin.fetch(source);
          break;
        } catch (error) {
          lastError = error as Error;
          if (attempt < source.maxRetries) {
            const delay = Math.pow(source.backoffMultiplier, attempt) * 1000;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      }

      if (articles.length === 0 && lastError) {
        throw lastError;
      }

      // Process articles
      const existingArticles = await this.getExistingArticles();

      for (const article of articles) {
        articlesProcessed++;

        // Validate article
        const validation = ArticleSchema.safeParse(article);
        if (!validation.success) {
          errors.push({
            code: 'VALIDATION_ERROR',
            message: `Invalid article: ${validation.error.message}`,
            details: { url: article.url },
            timestamp: new Date().toISOString(),
          });
          continue;
        }

        // Check for duplicates
        const duplicateCheck = this.deduplicationService.isContentDuplicate(
          article.url,
          article.title,
          article.text || article.html || '',
          existingArticles
        );

        if (duplicateCheck.isDuplicate) {
          articlesDuplicate++;
          continue;
        }

        // Store article
        try {
          await this.storeArticle(article, source.id);
          articlesAdded++;
        } catch (error) {
          errors.push({
            code: 'STORAGE_ERROR',
            message: `Failed to store article: ${error instanceof Error ? error.message : String(error)}`,
            details: { url: article.url },
            timestamp: new Date().toISOString(),
          });
        }
      }

      // Update source last fetched time
      await this.updateSourceLastFetched(source.id);

      return {
        source: source.name,
        articlesProcessed,
        articlesAdded,
        articlesDuplicate,
        errors,
        duration: Date.now() - startTime,
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      errors.push({
        code: 'FETCH_ERROR',
        message: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString(),
      });

      return {
        source: source.name,
        articlesProcessed,
        articlesAdded,
        articlesDuplicate,
        errors,
        duration: Date.now() - startTime,
        timestamp: new Date().toISOString(),
      };
    }
  }

  /**
   * Get existing articles for deduplication
   */
  private async getExistingArticles(): Promise<Array<{ url: string; title: string; content?: string }>> {
    try {
      const snapshot = await db
        .collection('articles')
        .orderBy('publishedAt', 'desc')
        .limit(1000)
        .get();

      return snapshot.docs.map((doc) => ({
        url: doc.data().url,
        title: doc.data().title,
        content: doc.data().text || doc.data().html,
      }));
    } catch {
      return [];
    }
  }

  /**
   * Store article in Firestore
   */
  private async storeArticle(article: RawArticle, sourceId: string): Promise<void> {
    const contentHash = this.deduplicationService.generateContentHash(
      article.text || article.html || ''
    );

    await db.collection('articles').add({
      ...article,
      sourceId,
      contentHash,
      createdAt: new Date().toISOString(),
      processed: false,
      eventId: null,
    });
  }

  /**
   * Update source last fetched time
   */
  private async updateSourceLastFetched(sourceId: string): Promise<void> {
    await db.collection('ingestionSources').doc(sourceId).update({
      lastFetched: new Date().toISOString(),
    });
  }
}

export default new IngestionService();




================================================================================
FILE: functions/src/ingestion/types.ts
================================================================================

/**
 * Ingestion Layer Types
 * Defines interfaces for plugin architecture
 */

export interface RawArticle {
  url: string;
  source: string;
  title: string;
  publishedAt?: string;
  description?: string;
  html?: string;
  text?: string;
  author?: string;
  mainImage?: string;
  contentHash?: string;
}

export interface IngestionSource {
  id: string;
  name: string;
  type: 'rss' | 'atom' | 'sitemap' | 'json' | 'csv' | 'manual';
  url?: string;
  enabled: boolean;
  lastFetched?: string;
  fetchInterval: number; // in minutes
  retryCount: number;
  maxRetries: number;
  backoffMultiplier: number;
}

export interface IngestionResult {
  source: string;
  articlesProcessed: number;
  articlesAdded: number;
  articlesDuplicate: number;
  errors: IngestionError[];
  duration: number; // in milliseconds
  timestamp: string;
}

export interface IngestionError {
  code: string;
  message: string;
  details?: Record<string, unknown>;
  timestamp: string;
}

export interface IngestionPlugin {
  name: string;
  type: IngestionSource['type'];
  fetch(source: IngestionSource): Promise<RawArticle[]>;
  validate(article: RawArticle): boolean;
}

export interface ContentHash {
  url: string;
  hash: string;
  timestamp: string;
}

export interface DuplicateCheckResult {
  isDuplicate: boolean;
  similarity: number;
  matchedUrl?: string;
  reason?: string;
}




================================================================================
FILE: functions/src/observability/analytics.ts
================================================================================

/**
 * Analytics Service
 * Structured event tracking and observability
 */

import { db } from '../ingestion/firebase';

export interface AnalyticsEvent {
  eventType: string;
  userId?: string;
  sessionId: string;
  timestamp: string;
  properties: Record<string, unknown>;
  context: {
    userAgent: string;
    url: string;
    referrer?: string;
  };
}

export interface UserEngagement {
  userId: string;
  sessionCount: number;
  totalTimeSpent: number; // seconds
  articlesViewed: number;
  articlesBookmarked: number;
  filtersApplied: number;
  lastActive: string;
}

export interface SourceMetrics {
  sourceId: string;
  articlesIngested: number;
  articlesProcessed: number;
  averageProcessingTime: number; // ms
  errorRate: number; // 0-1
  lastIngestionTime: string;
}

export class AnalyticsService {
  private sessionId: string;

  constructor() {
    this.sessionId = this.generateSessionId();
  }

  /**
   * Generate unique session ID
   */
  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * Track analytics event
   */
  async trackEvent(
    eventType: string,
    userId: string | undefined,
    properties: Record<string, unknown>,
    context: { userAgent: string; url: string; referrer?: string }
  ): Promise<void> {
    try {
      const event: AnalyticsEvent = {
        eventType,
        userId,
        sessionId: this.sessionId,
        timestamp: new Date().toISOString(),
        properties,
        context,
      };

      await db.collection('analytics_events').add(event);
    } catch (error) {
      console.error('Failed to track event:', error);
    }
  }

  /**
   * Track article view
   */
  async trackArticleView(userId: string, articleId: string, timeSpent: number): Promise<void> {
    await this.trackEvent(
      'article_view',
      userId,
      {
        articleId,
        timeSpent,
      },
      {
        userAgent: navigator.userAgent,
        url: window.location.href,
      }
    );
  }

  /**
   * Track bookmark action
   */
  async trackBookmark(userId: string, articleId: string, action: 'add' | 'remove'): Promise<void> {
    await this.trackEvent(
      'bookmark',
      userId,
      {
        articleId,
        action,
      },
      {
        userAgent: navigator.userAgent,
        url: window.location.href,
      }
    );
  }

  /**
   * Track filter application
   */
  async trackFilterApplied(userId: string, filters: Record<string, unknown>): Promise<void> {
    await this.trackEvent(
      'filter_applied',
      userId,
      {
        filters,
        filterCount: Object.keys(filters).length,
      },
      {
        userAgent: navigator.userAgent,
        url: window.location.href,
      }
    );
  }

  /**
   * Track search query
   */
  async trackSearch(userId: string, query: string, resultCount: number): Promise<void> {
    await this.trackEvent(
      'search',
      userId,
      {
        query,
        resultCount,
      },
      {
        userAgent: navigator.userAgent,
        url: window.location.href,
      }
    );
  }

  /**
   * Get user engagement metrics
   */
  async getUserEngagement(userId: string): Promise<UserEngagement> {
    try {
      const snapshot = await db
        .collection('analytics_events')
        .where('userId', '==', userId)
        .orderBy('timestamp', 'desc')
        .limit(1000)
        .get();

      const events = snapshot.docs.map((doc) => doc.data() as AnalyticsEvent);

      const sessionCount = new Set(events.map((e) => e.sessionId)).size;
      const articlesViewed = events.filter((e) => e.eventType === 'article_view').length;
      const articlesBookmarked = events.filter((e) => e.eventType === 'bookmark').length;
      const filtersApplied = events.filter((e) => e.eventType === 'filter_applied').length;

      const totalTimeSpent = events
        .filter((e) => e.eventType === 'article_view')
        .reduce((sum, e) => sum + ((e.properties.timeSpent as number) || 0), 0);

      const lastActive = events.length > 0 ? events[0].timestamp : new Date().toISOString();

      return {
        userId,
        sessionCount,
        totalTimeSpent,
        articlesViewed,
        articlesBookmarked,
        filtersApplied,
        lastActive,
      };
    } catch (error) {
      console.error('Failed to get user engagement:', error);
      return {
        userId,
        sessionCount: 0,
        totalTimeSpent: 0,
        articlesViewed: 0,
        articlesBookmarked: 0,
        filtersApplied: 0,
        lastActive: new Date().toISOString(),
      };
    }
  }

  /**
   * Get source metrics
   */
  async getSourceMetrics(sourceId: string): Promise<SourceMetrics> {
    try {
      const articlesSnapshot = await db
        .collection('articles')
        .where('sourceId', '==', sourceId)
        .get();

      const articles = articlesSnapshot.docs.map((doc) => doc.data());
      const processedArticles = articles.filter((a) => a.processed).length;

      const sourceDoc = await db.collection('ingestionSources').doc(sourceId).get();
      const source = sourceDoc.data();

      return {
        sourceId,
        articlesIngested: articles.length,
        articlesProcessed: processedArticles,
        averageProcessingTime: 0,
        errorRate: 0,
        lastIngestionTime: (source?.lastFetched as string) || new Date().toISOString(),
      };
    } catch (error) {
      console.error('Failed to get source metrics:', error);
      return {
        sourceId,
        articlesIngested: 0,
        articlesProcessed: 0,
        averageProcessingTime: 0,
        errorRate: 0,
        lastIngestionTime: new Date().toISOString(),
      };
    }
  }
}

export default new AnalyticsService();




================================================================================
FILE: functions/src/observability/feedback.ts
================================================================================

/**
 * Feedback Service
 * Collects and processes user feedback for continuous improvement
 */

import { db } from '../ingestion/firebase';

export interface UserFeedback {
  id: string;
  userId: string;
  type: 'bug' | 'feature_request' | 'improvement' | 'other';
  title: string;
  description: string;
  severity?: 'low' | 'medium' | 'high' | 'critical';
  context?: {
    url: string;
    userAgent: string;
    timestamp: string;
  };
  attachments?: string[];
  status: 'new' | 'acknowledged' | 'in_progress' | 'resolved' | 'wontfix';
  createdAt: string;
  updatedAt: string;
}

export interface SummaryAccuracy {
  summaryId: string;
  articleId: string;
  rating: 1 | 2 | 3 | 4 | 5; // 1-5 stars
  accuracy: number; // 0-100
  completeness: number; // 0-100
  clarity: number; // 0-100
  comments?: string;
  createdAt: string;
}

export interface RankingFeedback {
  eventId: string;
  userId: string;
  relevance: 1 | 2 | 3 | 4 | 5; // 1-5 stars
  helpful: boolean;
  comments?: string;
  createdAt: string;
}

export class FeedbackService {
  /**
   * Submit user feedback
   */
  async submitFeedback(
    userId: string,
    type: UserFeedback['type'],
    title: string,
    description: string,
    severity?: UserFeedback['severity']
  ): Promise<string> {
    try {
      const feedback: Omit<UserFeedback, 'id'> = {
        userId,
        type,
        title,
        description,
        severity,
        context: {
          url: typeof window !== 'undefined' ? window.location.href : '',
          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
          timestamp: new Date().toISOString(),
        },
        status: 'new',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      const docRef = await db.collection('user_feedback').add(feedback);
      return docRef.id;
    } catch (error) {
      throw new Error(`Failed to submit feedback: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * Rate summary accuracy
   */
  async rateSummaryAccuracy(
    summaryId: string,
    articleId: string,
    rating: 1 | 2 | 3 | 4 | 5,
    accuracy: number,
    completeness: number,
    clarity: number,
    comments?: string
  ): Promise<void> {
    try {
      const feedback: SummaryAccuracy = {
        summaryId,
        articleId,
        rating,
        accuracy,
        completeness,
        clarity,
        comments,
        createdAt: new Date().toISOString(),
      };

      await db.collection('summary_accuracy_feedback').add(feedback);

      // Update summary quality metrics
      await db.collection('summaryCache').doc(summaryId).update({
        userRating: rating,
        accuracyScore: accuracy,
        completenessScore: completeness,
        clarityScore: clarity,
      });
    } catch (error) {
      throw new Error(`Failed to rate summary: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * Rate ranking relevance
   */
  async rateRankingRelevance(
    eventId: string,
    userId: string,
    relevance: 1 | 2 | 3 | 4 | 5,
    helpful: boolean,
    comments?: string
  ): Promise<void> {
    try {
      const feedback: RankingFeedback = {
        eventId,
        userId,
        relevance,
        helpful,
        comments,
        createdAt: new Date().toISOString(),
      };

      await db.collection('ranking_feedback').add(feedback);
    } catch (error) {
      throw new Error(`Failed to rate ranking: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * Get feedback summary
   */
  async getFeedbackSummary(): Promise<{
    totalFeedback: number;
    byType: Record<string, number>;
    byStatus: Record<string, number>;
    averageSeverity: number;
  }> {
    try {
      const snapshot = await db.collection('user_feedback').get();
      const feedback = snapshot.docs.map((doc) => doc.data() as UserFeedback);

      const byType: Record<string, number> = {};
      const byStatus: Record<string, number> = {};
      let totalSeverity = 0;
      let severityCount = 0;

      for (const item of feedback) {
        byType[item.type] = (byType[item.type] || 0) + 1;
        byStatus[item.status] = (byStatus[item.status] || 0) + 1;

        if (item.severity) {
          const severityMap = { low: 1, medium: 2, high: 3, critical: 4 };
          totalSeverity += severityMap[item.severity];
          severityCount++;
        }
      }

      return {
        totalFeedback: feedback.length,
        byType,
        byStatus,
        averageSeverity: severityCount > 0 ? totalSeverity / severityCount : 0,
      };
    } catch (error) {
      console.error('Failed to get feedback summary:', error);
      return {
        totalFeedback: 0,
        byType: {},
        byStatus: {},
        averageSeverity: 0,
      };
    }
  }
}

export default new FeedbackService();




================================================================================
FILE: functions/src/observability/index.ts
================================================================================

/**
 * Observability Module Exports
 * Analytics, feedback, and monitoring functionality
 */

export { default as AnalyticsService } from './analytics';
export type {
  AnalyticsEvent,
  UserEngagement,
  SourceMetrics,
} from './analytics';

export { default as FeedbackService } from './feedback';
export type {
  UserFeedback,
  SummaryAccuracy,
  RankingFeedback,
} from './feedback';




================================================================================
FILE: functions/src/prompts.ts
================================================================================

/**
 * Enhanced AI Prompts for CarrierSignal
 * Includes few-shot examples, chain-of-thought, and anti-hallucination clauses
 * Optimized for P&C insurance domain with actionable insights
 */

export const SUMMARIZATION_PROMPT = `You are a senior P&C insurance analyst with expertise in underwriting, claims, actuarial science, and regulatory compliance. Analyze the following article and extract key insights for insurance professionals.

CRITICAL RULES:
1. ONLY cite facts explicitly stated in the article - NO speculation or inference
2. Focus on actionable insights for P&C professionals (underwriters, claims adjusters, actuaries, brokers, risk managers)
3. Identify specific regulatory implications, market impacts, and operational changes
4. Ensure all bullets are concrete, factual, and directly quoted or paraphrased from the article
5. Prioritize information that affects underwriting decisions, claims handling, or risk assessment

CHAIN-OF-THOUGHT ANALYSIS:
- First, identify the core news event or announcement
- Then, determine which P&C segments are affected (Auto, Property, Liability, Workers Comp, Cyber, Specialty)
- Next, assess regulatory, market, and operational impacts
- Finally, extract actionable insights for each professional role

Extract the following in JSON format:
{
  "title": "Original article title",
  "bullets5": ["Bullet 1 - specific, factual, actionable", "Bullet 2", "Bullet 3", "Bullet 4", "Bullet 5"],
  "whyItMatters": {
    "underwriting": "Specific impact on underwriting decisions, risk assessment, or pricing",
    "claims": "Impact on claims handling procedures, reserves, or litigation strategy",
    "brokerage": "Impact on broker operations, client communication, or policy placement",
    "actuarial": "Impact on actuarial analysis, reserving, or rate-making"
  },
  "leadQuote": "Most important direct quote from article (must be verbatim or clearly paraphrased)",
  "citations": ["URL or source reference 1", "URL or source reference 2"]
}

Article to analyze:
{article_text}`;

export const TAGGING_PROMPT = `You are an expert P&C insurance industry classifier with deep knowledge of lines of business, perils, regulatory frameworks, and market trends. Analyze this article and assign appropriate tags.

CLASSIFICATION RULES:
1. Only assign tags that are EXPLICITLY supported by article content - no inference
2. Be conservative: if unsure, omit the tag
3. Use standard insurance industry terminology and ISO codes for regions
4. Maximum tags per category as specified
5. Prioritize accuracy over coverage

TAGGING GUIDELINES:
- LOB: Auto, Property, Homeowners, Commercial, Liability, Workers Comp, Cyber, Specialty, Umbrella
- PERILS: Hurricane, Tornado, Wildfire, Flood, Earthquake, Hail, Winter Storm, Cyber, Terrorism, Pollution
- REGIONS: Use ISO 3166-2 codes (US-CA, US-FL, etc.) or country codes
- COMPANIES: Major insurers, reinsurers, MGAs mentioned in article
- TRENDS: Climate Risk, Social Inflation, GenAI/Automation, Supply Chain, Underwriting Capacity, Rate Hardening, Reinsurance Costs, Catastrophe Bonds, Parametric Insurance
- REGULATIONS: NAIC, State DOI, Tort Reform, Rate Regulation, Solvency Requirements, Cybersecurity Mandates

Article: {article_title}
{article_summary}

Assign tags in this JSON format:
{
  "lob": ["Auto", "Property"],
  "perils": ["Hurricane"],
  "regions": ["US-FL", "US-LA"],
  "companies": ["State Farm"],
  "trends": ["Climate Risk"],
  "regulations": ["NAIC"]
}`;

export const SCORING_PROMPT = `You are a senior P&C insurance analyst evaluating article relevance and impact for industry professionals. Use chain-of-thought reasoning to score this article.

SCORING METHODOLOGY:
- Relevance (0-100): Direct relevance to P&C insurance professionals' decision-making
  * 80-100: Critical for underwriting, claims, actuarial, or regulatory compliance
  * 60-79: Important market or operational information
  * 40-59: Tangential to insurance operations
  * 0-39: Minimal relevance to P&C professionals

- Impact (0-100): Potential business impact on insurance operations
  * 80-100: Affects pricing, underwriting criteria, claims handling, or regulatory compliance
  * 60-79: Affects market dynamics or competitive positioning
  * 40-59: Affects specific segments or regions
  * 0-39: Minimal operational impact

- Confidence (0-1): Your confidence in this assessment (0.5-1.0 range)

CHAIN-OF-THOUGHT ANALYSIS:
1. Identify the core news event and affected P&C segments
2. Assess regulatory, market, and operational implications
3. Determine actionability for insurance professionals
4. Evaluate confidence based on clarity and specificity of information

Article Title: {article_title}
Summary: {article_summary}

Provide JSON response:
{
  "relevanceScore": 75,
  "impactScore": 80,
  "confidence": 0.85,
  "confidenceRationale": "Clear regulatory implications with specific company impacts and underwriting implications",
  "riskPulse": "HIGH",
  "sentiment": "NEGATIVE"
}`;

export const SEMANTIC_SEARCH_PROMPT = `You are an expert at understanding insurance industry queries. 
Expand this search query to include related terms and concepts that would help find relevant articles.

Query: {query}

Return a JSON object with:
{
  "expanded_terms": ["term1", "term2", "term3"],
  "related_concepts": ["concept1", "concept2"],
  "industry_synonyms": ["synonym1", "synonym2"]
}`;

export const DEDUPLICATION_PROMPT = `You are an expert at identifying duplicate or near-duplicate news stories.
Compare these two article summaries and determine if they cover the same event/story.

Article 1 Title: {article1_title}
Article 1 Summary: {article1_summary}

Article 2 Title: {article2_title}
Article 2 Summary: {article2_summary}

Respond with JSON:
{
  "isDuplicate": true/false,
  "similarity": 0.95,
  "reasoning": "Both articles cover the same regulatory announcement from NAIC"
}`;

export const ENTITY_EXTRACTION_PROMPT = `Extract key entities from this insurance news article.

Article: {article_text}

Return JSON with:
{
  "companies": ["Company1", "Company2"],
  "regulators": ["NAIC", "State DOI"],
  "perils": ["Hurricane", "Cyber"],
  "regions": ["Florida", "California"],
  "people": ["John Doe (CEO)"],
  "events": ["Rate Increase", "Merger"]
}`;

export const TREND_ANALYSIS_PROMPT = `Analyze emerging trends in this batch of insurance articles.

Articles: {articles_summary}

Identify:
{
  "emergingTrends": ["Trend1", "Trend2"],
  "riskFactors": ["Risk1", "Risk2"],
  "opportunities": ["Opportunity1", "Opportunity2"],
  "timeframe": "Q4 2024"
}`;




================================================================================
FILE: functions/src/ranking/index.ts
================================================================================

/**
 * Ranking Module Exports
 * Materiality scoring and event ranking functionality
 */

export { default as RankingService } from './service';
export type {
  MaterialityScore,
  RankingScore,
  UserInterests,
  SavedFilter,
  RankingResult,
  SourceQuality,
} from './types';




================================================================================
FILE: functions/src/ranking/service.ts
================================================================================

/**
 * Ranking Service
 * Implements materiality scoring and event ranking algorithms
 */

import { db } from '../ingestion/firebase';
import { MaterialityScore, RankingResult, UserInterests } from './types';

export class RankingService {
  private readonly MATERIALITY_WEIGHTS = {
    severity: 0.3,
    insuredLoss: 0.25,
    regulatory: 0.2,
    lob: 0.15,
    novelty: 0.1,
  };

  private readonly RANKING_WEIGHTS = {
    materiality: 0.4,
    freshness: 0.25,
    sourceQuality: 0.15,
    userInterest: 0.2,
  };

  /**
   * Calculate materiality score for an event
   */
  calculateMaterialityScore(event: Record<string, unknown>): MaterialityScore {
    const eventSeverity = (event.severityScore as number) || 50;
    const insuredLoss = this.estimateInsuredLoss(event);
    const regulatoryImpact = (event.regulatoryFlags as string[])?.length > 0 ? 75 : 25;
    const affectedLOB = Math.min((event.lob as string[])?.length * 20, 100);
    const novelty = this.calculateNovelty(event);

    const breakdown = {
      severity: eventSeverity,
      insuredLoss,
      regulatory: regulatoryImpact,
      lob: affectedLOB,
      novelty,
    };

    const finalScore =
      breakdown.severity * this.MATERIALITY_WEIGHTS.severity +
      breakdown.insuredLoss * this.MATERIALITY_WEIGHTS.insuredLoss +
      breakdown.regulatory * this.MATERIALITY_WEIGHTS.regulatory +
      breakdown.lob * this.MATERIALITY_WEIGHTS.lob +
      breakdown.novelty * this.MATERIALITY_WEIGHTS.novelty;

    return {
      eventId: event.id as string,
      baseScore: 50,
      eventSeverity,
      insuredLoss,
      regulatoryImpact,
      affectedLOB,
      novelty,
      finalScore: Math.round(finalScore),
      breakdown,
    };
  }

  /**
   * Estimate insured loss based on event characteristics
   */
  private estimateInsuredLoss(event: Record<string, unknown>): number {
    const eventType = event.eventType as string;
    const keyNumbers = (event.keyNumbers as string[]) || [];

    let baseScore = 25;

    if (eventType === 'catastrophe') {
      baseScore = 85;
    } else if (eventType === 'regulatory') {
      baseScore = 60;
    } else if (eventType === 'market') {
      baseScore = 45;
    }

    // Boost if large numbers mentioned
    const hasLargeNumbers = keyNumbers.some((num) => {
      const parsed = parseInt(num.replace(/[^0-9]/g, ''), 10);
      return parsed > 1000000000; // > $1B
    });

    if (hasLargeNumbers) {
      baseScore = Math.min(baseScore + 25, 100);
    }

    return baseScore;
  }

  /**
   * Calculate novelty score
   */
  private calculateNovelty(event: Record<string, unknown>): number {
    const createdAt = new Date((event.createdAt as string) || new Date().toISOString());
    const now = new Date();
    const ageHours = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60);

    // Decay novelty over time
    if (ageHours < 1) return 100;
    if (ageHours < 6) return 80;
    if (ageHours < 24) return 60;
    if (ageHours < 72) return 40;
    return 20;
  }

  /**
   * Calculate freshness score
   */
  private calculateFreshnessScore(publishedAt: string): number {
    const published = new Date(publishedAt);
    const now = new Date();
    const ageHours = (now.getTime() - published.getTime()) / (1000 * 60 * 60);

    if (ageHours < 1) return 100;
    if (ageHours < 6) return 85;
    if (ageHours < 24) return 70;
    if (ageHours < 72) return 50;
    if (ageHours < 168) return 30;
    return 10;
  }

  /**
   * Calculate source quality score
   */
  private async calculateSourceQualityScore(sourceId: string): Promise<number> {
    try {
      const sourceDoc = await db.collection('ingestionSources').doc(sourceId).get();
      if (!sourceDoc.exists) return 50;

      const source = sourceDoc.data();
      if (!source) return 50;

      const isOfficialSource = ['SEC', 'NAIC', 'FEMA', 'Reuters', 'Bloomberg'].some((s) =>
        (source.name as string)?.includes(s)
      );

      return isOfficialSource ? 90 : 70;
    } catch {
      return 50;
    }
  }

  /**
   * Calculate user interest score
   */
  private calculateUserInterestScore(event: Record<string, unknown>, userInterests: UserInterests): number {
    let score = 0;
    let matchCount = 0;

    // Check LOB matches
    const eventLOBs = (event.lob as string[]) || [];
    const lobMatches = eventLOBs.filter((lob) => userInterests.preferredLOBs.includes(lob)).length;
    if (lobMatches > 0) {
      score += 25;
      matchCount++;
    }

    // Check peril matches
    const eventPerils = (event.perils as string[]) || [];
    const perilMatches = eventPerils.filter((peril) => userInterests.preferredPerils.includes(peril)).length;
    if (perilMatches > 0) {
      score += 25;
      matchCount++;
    }

    // Check region matches
    const eventRegions = (event.regions as string[]) || [];
    const regionMatches = eventRegions.filter((region) => userInterests.preferredRegions.includes(region)).length;
    if (regionMatches > 0) {
      score += 25;
      matchCount++;
    }

    // Check company matches
    const eventCompanies = (event.companies as string[]) || [];
    const companyMatches = eventCompanies.filter((company) => userInterests.preferredCompanies.includes(company))
      .length;
    if (companyMatches > 0) {
      score += 25;
      matchCount++;
    }

    return matchCount > 0 ? Math.min(score, 100) : 50;
  }

  /**
   * Rank events for a user
   */
  async rankEvents(
    events: Record<string, unknown>[],
    userInterests?: UserInterests
  ): Promise<RankingResult[]> {
    const results: RankingResult[] = [];

    for (const event of events) {
      const materialityScore = this.calculateMaterialityScore(event);
      const freshnessScore = this.calculateFreshnessScore((event.publishedAt as string) || new Date().toISOString());
      const sourceQualityScore = await this.calculateSourceQualityScore((event.sourceId as string) || '');
      const userInterestScore = userInterests
        ? this.calculateUserInterestScore(event, userInterests)
        : 50;

      const finalScore =
        materialityScore.finalScore * this.RANKING_WEIGHTS.materiality +
        freshnessScore * this.RANKING_WEIGHTS.freshness +
        sourceQualityScore * this.RANKING_WEIGHTS.sourceQuality +
        userInterestScore * this.RANKING_WEIGHTS.userInterest;

      results.push({
        eventId: event.id as string,
        title: (event.title as string) || '',
        scores: {
          eventId: event.id as string,
          materialityScore: materialityScore.finalScore,
          freshnessScore,
          sourceQualityScore,
          userInterestScore,
          finalScore: Math.round(finalScore),
          rank: 0,
        },
        rank: 0,
        relevanceExplanation: `Materiality: ${materialityScore.finalScore}, Freshness: ${freshnessScore}, Quality: ${sourceQualityScore}`,
      });
    }

    // Sort by final score and assign ranks
    results.sort((a, b) => b.scores.finalScore - a.scores.finalScore);
    results.forEach((result, index) => {
      result.rank = index + 1;
      result.scores.rank = index + 1;
    });

    return results;
  }
}

export default new RankingService();




================================================================================
FILE: functions/src/ranking/types.ts
================================================================================

/**
 * Ranking and Materiality Types
 * Defines interfaces for ranking and personalization
 */

export interface MaterialityScore {
  eventId: string;
  baseScore: number; // 0-100
  eventSeverity: number; // 0-100
  insuredLoss: number; // 0-100
  regulatoryImpact: number; // 0-100
  affectedLOB: number; // 0-100
  novelty: number; // 0-100
  finalScore: number; // 0-100
  breakdown: {
    severity: number; // 30%
    insuredLoss: number; // 25%
    regulatory: number; // 20%
    lob: number; // 15%
    novelty: number; // 10%
  };
}

export interface RankingScore {
  eventId: string;
  materialityScore: number; // 40%
  freshnessScore: number; // 25%
  sourceQualityScore: number; // 15%
  userInterestScore: number; // 20%
  finalScore: number; // 0-100
  rank: number;
}

export interface UserInterests {
  userId: string;
  preferredLOBs: string[];
  preferredPerils: string[];
  preferredRegions: string[];
  preferredCompanies: string[];
  excludedTopics: string[];
  interestWeights: Record<string, number>;
}

export interface SavedFilter {
  id: string;
  userId: string;
  name: string;
  description: string;
  filters: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    companies?: string[];
    riskPulse?: string;
    dateRange?: {
      start: string;
      end: string;
    };
  };
  createdAt: string;
  updatedAt: string;
  isDefault: boolean;
}

export interface RankingResult {
  eventId: string;
  title: string;
  scores: RankingScore;
  rank: number;
  relevanceExplanation: string;
}

export interface SourceQuality {
  source: string;
  reliability: number; // 0-100
  accuracy: number; // 0-100
  timeliness: number; // 0-100
  coverage: number; // 0-100
  overallScore: number; // 0-100
}




================================================================================
FILE: functions/src/rss-feeds.ts
================================================================================

/**
 * Enhanced RSS Feed Configuration for CarrierSignal
 * Comprehensive P&C insurance news sources
 */

export interface RSSFeedConfig {
  name: string;
  url: string;
  category: 'regulatory' | 'market' | 'technology' | 'claims' | 'underwriting' | 'general';
  priority: 'high' | 'medium' | 'low';
  updateFrequency: 'hourly' | 'daily' | 'weekly';
}

export const RSS_FEEDS: RSSFeedConfig[] = [
  // Regulatory & Compliance
  {
    name: 'NAIC News',
    url: 'https://www.naic.org/news_feed.xml',
    category: 'regulatory',
    priority: 'high',
    updateFrequency: 'daily',
  },
  {
    name: 'Insurance Journal',
    url: 'https://www.insurancejournal.com/feed/',
    category: 'general',
    priority: 'high',
    updateFrequency: 'hourly',
  },
  {
    name: 'PropertyShark',
    url: 'https://www.propertyshark.com/feed/',
    category: 'market',
    priority: 'high',
    updateFrequency: 'daily',
  },

  // Market & Business
  {
    name: 'Insurance Thought Leadership',
    url: 'https://www.insurancethoughtleadership.com/feed/',
    category: 'market',
    priority: 'medium',
    updateFrequency: 'daily',
  },
  {
    name: 'Best\'s Insurance News',
    url: 'https://www.ambest.com/news/feed.xml',
    category: 'market',
    priority: 'high',
    updateFrequency: 'daily',
  },

  // Technology & Innovation
  {
    name: 'InsurTech Insights',
    url: 'https://www.insurtechinsights.com/feed/',
    category: 'technology',
    priority: 'medium',
    updateFrequency: 'daily',
  },
  {
    name: 'Insurtech Trends',
    url: 'https://www.insurtechtrends.com/feed/',
    category: 'technology',
    priority: 'medium',
    updateFrequency: 'daily',
  },

  // Claims & Operations
  {
    name: 'Claims Journal',
    url: 'https://www.claimsjournal.com/feed/',
    category: 'claims',
    priority: 'high',
    updateFrequency: 'daily',
  },
  {
    name: 'Risk & Insurance',
    url: 'https://www.riskandinsurance.com/feed/',
    category: 'general',
    priority: 'high',
    updateFrequency: 'daily',
  },

  // Underwriting & Actuarial
  {
    name: 'Actuarial News',
    url: 'https://www.actuarialnews.com/feed/',
    category: 'underwriting',
    priority: 'medium',
    updateFrequency: 'weekly',
  },
  {
    name: 'Underwriting News',
    url: 'https://www.underwritingnews.com/feed/',
    category: 'underwriting',
    priority: 'medium',
    updateFrequency: 'daily',
  },

  // Catastrophe & Risk
  {
    name: 'Catastrophe News',
    url: 'https://www.catastrophenews.com/feed/',
    category: 'market',
    priority: 'high',
    updateFrequency: 'hourly',
  },
  {
    name: 'Weather & Climate Risk',
    url: 'https://www.weatherclimatereport.com/feed/',
    category: 'market',
    priority: 'high',
    updateFrequency: 'daily',
  },

  // Cyber & Specialty
  {
    name: 'Cyber Insurance News',
    url: 'https://www.cyberinsurancenews.com/feed/',
    category: 'technology',
    priority: 'high',
    updateFrequency: 'daily',
  },
  {
    name: 'Specialty Insurance',
    url: 'https://www.specialtyinsurance.com/feed/',
    category: 'general',
    priority: 'medium',
    updateFrequency: 'daily',
  },
];

/**
 * Get feeds by category
 */
export function getFeedsByCategory(category: string): RSSFeedConfig[] {
  return RSS_FEEDS.filter(feed => feed.category === category);
}

/**
 * Get high-priority feeds
 */
export function getHighPriorityFeeds(): RSSFeedConfig[] {
  return RSS_FEEDS.filter(feed => feed.priority === 'high');
}

/**
 * Get feeds that should be updated hourly
 */
export function getHourlyFeeds(): RSSFeedConfig[] {
  return RSS_FEEDS.filter(feed => feed.updateFrequency === 'hourly');
}




================================================================================
FILE: functions/src/schemas.ts
================================================================================

/**
 * Enhanced Zod Schemas for CarrierSignal
 * Comprehensive validation with custom validators
 */

import { z } from 'zod';

/**
 * Custom validators
 */
const citationsMatchBullets = (data: {
  bullets5: string[];
  citations: string[];
}): boolean => {
  // At least some citations should be referenced in bullets
  return data.citations.length > 0 || data.bullets5.length === 0;
};

/**
 * Article Processing Schema
 */
export const ArticleSchema = z.object({
  url: z.string().url('Invalid URL format'),
  source: z.string().min(1, 'Source is required'),
  title: z.string().min(5, 'Title must be at least 5 characters'),
  publishedAt: z.string().datetime().optional(),
  description: z.string().optional(),
  html: z.string().optional(),
  text: z.string().optional(),
  author: z.string().optional(),
  mainImage: z.string().url().optional(),
});

/**
 * Processed Article Schema (after AI processing)
 */
export const ProcessedArticleSchema = z.object({
  url: z.string().url(),
  source: z.string(),
  title: z.string(),
  publishedAt: z.string().datetime().optional(),
  description: z.string().optional(),
  bullets5: z.array(z.string()).min(3).max(5),
  whyItMatters: z.object({
    underwriting: z.string().min(20).max(200),
    claims: z.string().min(20).max(200),
    brokerage: z.string().min(20).max(200),
    actuarial: z.string().min(20).max(200),
  }),
  tags: z.object({
    lob: z.array(z.string()).max(6),
    perils: z.array(z.string()).max(6),
    regions: z.array(z.string()).max(10),
    companies: z.array(z.string()).max(10),
    trends: z.array(z.string()).max(8),
    regulations: z.array(z.string()).max(5),
  }),
  riskPulse: z.enum(['LOW', 'MEDIUM', 'HIGH']),
  sentiment: z.enum(['POSITIVE', 'NEGATIVE', 'NEUTRAL']),
  confidence: z.number().min(0).max(1),
  citations: z.array(z.string().url()).max(10),
  impactScore: z.number().min(0).max(100),
  impactBreakdown: z.object({
    market: z.number().min(0).max(100),
    regulatory: z.number().min(0).max(100),
    catastrophe: z.number().min(0).max(100),
    technology: z.number().min(0).max(100),
  }),
  confidenceRationale: z.string().max(200),
  leadQuote: z.string().max(300),
  disclosure: z.string().max(200),
  smartScore: z.number().min(0).max(100).optional(),
  aiScore: z.number().min(0).max(100).optional(),
}).refine(
  citationsMatchBullets,
  'Citations should be referenced in bullets'
);

/**
 * Search Query Schema
 */
export const SearchQuerySchema = z.object({
  query: z.string().min(1).max(500),
  filters: z.object({
    lob: z.array(z.string()).optional(),
    perils: z.array(z.string()).optional(),
    regions: z.array(z.string()).optional(),
    companies: z.array(z.string()).optional(),
    dateRange: z.object({
      start: z.string().datetime().optional(),
      end: z.string().datetime().optional(),
    }).optional(),
    riskPulse: z.enum(['LOW', 'MEDIUM', 'HIGH']).optional(),
  }).optional(),
  limit: z.number().min(1).max(100).default(20),
  offset: z.number().min(0).default(0),
});

/**
 * Bookmark Schema
 */
export const BookmarkSchema = z.object({
  articleUrl: z.string().url(),
  userId: z.string(),
  createdAt: z.string().datetime(),
  notes: z.string().max(500).optional(),
  tags: z.array(z.string()).max(10).optional(),
});

/**
 * User Preferences Schema
 */
export const UserPreferencesSchema = z.object({
  userId: z.string(),
  preferredLOBs: z.array(z.string()).optional(),
  preferredPerils: z.array(z.string()).optional(),
  preferredRegions: z.array(z.string()).optional(),
  notificationFrequency: z.enum(['realtime', 'daily', 'weekly']).default('daily'),
  theme: z.enum(['light', 'dark']).default('light'),
  sortPreference: z.enum(['smart', 'recency']).default('smart'),
});

/**
 * Validation helper functions
 */
export function validateArticle(data: unknown) {
  return ArticleSchema.safeParse(data);
}

export function validateProcessedArticle(data: unknown) {
  return ProcessedArticleSchema.safeParse(data);
}

export function validateSearchQuery(data: unknown) {
  return SearchQuerySchema.safeParse(data);
}




================================================================================
FILE: functions/src/utils.ts
================================================================================

/**
 * Pure utility functions for CarrierSignal
 * These functions have no external dependencies and can be easily tested
 */

import crypto from 'node:crypto';

/**
 * US State normalization map: common names/abbreviations → ISO 3166-2 codes
 */
const STATE_NORMALIZATION: Record<string, string> = {
  'alabama': 'US-AL', 'al': 'US-AL',
  'alaska': 'US-AK', 'ak': 'US-AK',
  'arizona': 'US-AZ', 'az': 'US-AZ',
  'arkansas': 'US-AR', 'ar': 'US-AR',
  'california': 'US-CA', 'ca': 'US-CA', 'calif': 'US-CA',
  'colorado': 'US-CO', 'co': 'US-CO',
  'connecticut': 'US-CT', 'ct': 'US-CT',
  'delaware': 'US-DE', 'de': 'US-DE',
  'florida': 'US-FL', 'fl': 'US-FL', 'fla': 'US-FL',
  'georgia': 'US-GA', 'ga': 'US-GA',
  'hawaii': 'US-HI', 'hi': 'US-HI',
  'idaho': 'US-ID', 'id': 'US-ID',
  'illinois': 'US-IL', 'il': 'US-IL',
  'indiana': 'US-IN', 'in': 'US-IN',
  'iowa': 'US-IA', 'ia': 'US-IA',
  'kansas': 'US-KS', 'ks': 'US-KS',
  'kentucky': 'US-KY', 'ky': 'US-KY',
  'louisiana': 'US-LA', 'la': 'US-LA',
  'maine': 'US-ME', 'me': 'US-ME',
  'maryland': 'US-MD', 'md': 'US-MD',
  'massachusetts': 'US-MA', 'ma': 'US-MA', 'mass': 'US-MA',
  'michigan': 'US-MI', 'mi': 'US-MI',
  'minnesota': 'US-MN', 'mn': 'US-MN',
  'mississippi': 'US-MS', 'ms': 'US-MS',
  'missouri': 'US-MO', 'mo': 'US-MO',
  'montana': 'US-MT', 'mt': 'US-MT',
  'nebraska': 'US-NE', 'ne': 'US-NE',
  'nevada': 'US-NV', 'nv': 'US-NV',
  'new hampshire': 'US-NH', 'nh': 'US-NH',
  'new jersey': 'US-NJ', 'nj': 'US-NJ',
  'new mexico': 'US-NM', 'nm': 'US-NM',
  'new york': 'US-NY', 'ny': 'US-NY',
  'north carolina': 'US-NC', 'nc': 'US-NC',
  'north dakota': 'US-ND', 'nd': 'US-ND',
  'ohio': 'US-OH', 'oh': 'US-OH',
  'oklahoma': 'US-OK', 'ok': 'US-OK',
  'oregon': 'US-OR', 'or': 'US-OR',
  'pennsylvania': 'US-PA', 'pa': 'US-PA',
  'rhode island': 'US-RI', 'ri': 'US-RI',
  'south carolina': 'US-SC', 'sc': 'US-SC',
  'south dakota': 'US-SD', 'sd': 'US-SD',
  'tennessee': 'US-TN', 'tn': 'US-TN',
  'texas': 'US-TX', 'tx': 'US-TX',
  'utah': 'US-UT', 'ut': 'US-UT',
  'vermont': 'US-VT', 'vt': 'US-VT',
  'virginia': 'US-VA', 'va': 'US-VA',
  'washington': 'US-WA', 'wa': 'US-WA',
  'west virginia': 'US-WV', 'wv': 'US-WV',
  'wisconsin': 'US-WI', 'wi': 'US-WI',
  'wyoming': 'US-WY', 'wy': 'US-WY',
  'district of columbia': 'US-DC', 'dc': 'US-DC', 'washington dc': 'US-DC',
};

/**
 * Company name normalization map
 */
const COMPANY_NORMALIZATION: Record<string, string> = {
  'state farm': 'State Farm',
  'statefarm': 'State Farm',
  'allstate': 'Allstate',
  'geico': 'GEICO',
  'progressive': 'Progressive',
  'usaa': 'USAA',
  'liberty mutual': 'Liberty Mutual',
  'farmers': 'Farmers Insurance',
  'nationwide': 'Nationwide',
  'travelers': 'Travelers',
  'american family': 'American Family Insurance',
  'chubb': 'Chubb',
  'hartford': 'The Hartford',
  'aig': 'AIG',
  'zurich': 'Zurich',
  'allianz': 'Allianz',
  'axa': 'AXA',
  'berkshire hathaway': 'Berkshire Hathaway',
  'markel': 'Markel',
  'fairfax': 'Fairfax Financial',
  'citizens': 'Citizens Property Insurance',
  'florida citizens': 'Citizens Property Insurance',
  'california fair plan': 'California FAIR Plan',
  'fair plan': 'California FAIR Plan',
};

/**
 * Normalize regions to ISO 3166-2 codes
 */
export function normalizeRegions(regions: string[]): string[] {
  const normalized = new Set<string>();

  for (const region of regions) {
    const lower = region.toLowerCase().trim();

    // Already ISO format
    if (lower.startsWith('us-') && lower.length === 5) {
      normalized.add(region.toUpperCase());
      continue;
    }

    // Check normalization map
    if (STATE_NORMALIZATION[lower]) {
      normalized.add(STATE_NORMALIZATION[lower]);
    } else {
      // Keep original if not found
      normalized.add(region);
    }
  }

  return Array.from(normalized);
}

/**
 * Normalize company names to canonical forms
 */
export function normalizeCompanies(companies: string[]): string[] {
  const normalized = new Set<string>();

  for (const company of companies) {
    const lower = company.toLowerCase().trim();

    if (COMPANY_NORMALIZATION[lower]) {
      normalized.add(COMPANY_NORMALIZATION[lower]);
    } else {
      // Keep original if not found
      normalized.add(company);
    }
  }

  return Array.from(normalized);
}

/**
 * Compute content hash for deduplication
 */
export function computeContentHash(text: string): string {
  const normalized = text.toLowerCase()
    .replace(/[^a-z0-9\s]/g, '')
    .replace(/\s+/g, ' ')
    .trim();

  const sample = normalized.slice(0, 500);
  return crypto.createHash("sha256").update(sample).digest("hex").slice(0, 16);
}

/**
 * Detect storm/hurricane names from text
 */
export function detectStormName(text: string): string | undefined {
  const patterns = [
    /Hurricane\s+([A-Z][a-z]+)/gi,
    /Tropical\s+Storm\s+([A-Z][a-z]+)/gi,
    /Typhoon\s+([A-Z][a-z]+)/gi,
    /Cyclone\s+([A-Z][a-z]+)/gi,
  ];

  for (const pattern of patterns) {
    const match = pattern.exec(text);
    if (match) {
      return match[0];
    }
  }

  return undefined;
}

/**
 * Detect if article is from a regulatory source
 */
export function isRegulatorySource(url: string, source: string): boolean {
  const regulatoryUrlKeywords = [
    'doi.', 'insurance.ca.gov', 'floir.com', 'tdi.texas.gov',
    'dfs.ny.gov', 'insurance.pa.gov', 'naic.org',
  ];

  const regulatorySourceKeywords = [
    'naic', 'dfs', 'doi', 'department of insurance', 'insurance commissioner',
    'state insurance', 'regulatory', 'regulator',
  ];

  const urlLower = url.toLowerCase();
  const sourceLower = source.toLowerCase();

  return regulatoryUrlKeywords.some(keyword => urlLower.includes(keyword)) ||
    regulatorySourceKeywords.some(keyword => sourceLower.includes(keyword));
}

/**
 * Calculate SmartScore v3 - Enhanced for P&C Insurance Professionals
 *
 * Scoring Philosophy:
 * - Balances recency with enduring relevance (breaking news vs. structural changes)
 * - Prioritizes actionable intelligence over general news
 * - Weights catastrophe, regulatory, and market-moving events heavily
 * - Considers multi-dimensional impact (market, regulatory, catastrophe, technology)
 */
export function calculateSmartScore(params: {
  publishedAt?: string;
  impactScore: number;
  impactBreakdown?: {
    market?: number;
    regulatory?: number;
    catastrophe?: number;
    technology?: number;
  };
  tags?: {
    regulations?: string[];
    perils?: string[];
    lob?: string[];
    trends?: string[];
  };
  regulatory?: boolean;
  riskPulse?: 'LOW' | 'MEDIUM' | 'HIGH';
  stormName?: string;
}): number {
  const now = Date.now();
  const pubDate = params.publishedAt ? new Date(params.publishedAt).getTime() : now;
  const ageHours = Math.max(0, (now - pubDate) / (1000 * 60 * 60));

  // Enhanced recency decay with different curves for different content types
  // Catastrophe/regulatory news: slower decay (72h half-life)
  // Market news: medium decay (48h half-life)
  // General news: faster decay (24h half-life)
  // FIX: Correct boolean logic - was using truthy chain that misclassified
  const isCatastrophe = !!params.stormName || (params.impactBreakdown?.catastrophe ?? 0) > 50;
  const isRegulatory = params.regulatory || (params.tags?.regulations && params.tags.regulations.length > 0);

  let halfLife = 24; // Default: 24 hours
  if (isCatastrophe) halfLife = 72; // Catastrophe news stays relevant longer
  else if (isRegulatory) halfLife = 48; // Regulatory news has medium longevity

  const recencyScore = Math.exp(-ageHours / (halfLife * 1.44)) * 100; // 1.44 converts half-life to decay constant

  // Multi-dimensional impact scoring
  const impactBreakdown = params.impactBreakdown || {
    market: params.impactScore * 0.25,
    regulatory: params.impactScore * 0.25,
    catastrophe: params.impactScore * 0.25,
    technology: params.impactScore * 0.25,
  };

  // Weight different impact dimensions based on P&C industry priorities
  const weightedImpact =
    (impactBreakdown.market || 0) * 0.30 +        // Market impact: 30% (rates, capacity, competition)
    (impactBreakdown.regulatory || 0) * 0.35 +    // Regulatory: 35% (highest - directly affects operations)
    (impactBreakdown.catastrophe || 0) * 0.25 +   // Catastrophe: 25% (loss events, exposure)
    (impactBreakdown.technology || 0) * 0.10;     // Technology: 10% (innovation, but less immediate)

  // Risk pulse multiplier (industry disruption potential)
  const riskPulseMultiplier =
    params.riskPulse === 'HIGH' ? 1.25 :
    params.riskPulse === 'MEDIUM' ? 1.10 :
    1.0;

  // Regulatory boost (critical for compliance and operations)
  const regulatoryBoost = isRegulatory ? 1.20 : 1.0;

  // Catastrophe boost with graduated scale
  const catPerils = ['Hurricane', 'Wildfire', 'Earthquake', 'Flood', 'Tornado', 'Severe Weather', 'Hail', 'Winter Storm', 'Convective Storm'];
  const hasCatPeril = params.tags?.perils?.some(p =>
    catPerils.some(cat => p.toLowerCase().includes(cat.toLowerCase()))
  ) || false;

  // Named storm gets higher boost
  const catastropheBoost = params.stormName ? 1.30 : (hasCatPeril ? 1.15 : 1.0);

  // High-value trend boost (emerging risks and opportunities)
  const highValueTrends = [
    'Climate Risk', 'Social Inflation', 'GenAI', 'Litigation Funding',
    'Tort Reform', 'Rate Adequacy', 'Reinsurance', 'Capacity Constraints',
    'Nuclear Verdicts', 'Assignment of Benefits', 'Parametric Insurance'
  ];
  const hasHighValueTrend = params.tags?.trends?.some(t =>
    highValueTrends.some(hvt => t.toLowerCase().includes(hvt.toLowerCase()))
  ) || false;
  const trendBoost = hasHighValueTrend ? 1.10 : 1.0;

  // Multi-LOB coverage boost (broader industry relevance)
  const lobCount = params.tags?.lob?.length || 0;
  const lobBoost = lobCount >= 3 ? 1.08 : (lobCount >= 2 ? 1.04 : 1.0);

  // Calculate base score with enhanced weighting
  // Recency: 35% (down from 40% to reduce recency bias)
  // Impact: 65% (up from 60% to prioritize substance over timing)
  const baseScore = (recencyScore * 0.35) + (weightedImpact * 0.65);

  // Apply all multipliers
  const smartScore = Math.min(100,
    baseScore *
    riskPulseMultiplier *
    regulatoryBoost *
    catastropheBoost *
    trendBoost *
    lobBoost
  );

  return Math.round(smartScore * 10) / 10;
}

/**
 * Hash URL for document ID
 */
export function hashUrl(u: string): string {
  return crypto.createHash("sha256").update(u).digest("hex").slice(0, 24);
}




================================================================================
FILE: functions/tsconfig.json
================================================================================

{
  "compilerOptions": {
    "module": "commonjs",
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "outDir": "lib",
    "sourceMap": true,
    "strict": true,
    "target": "es2017",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noFallthroughCasesInSwitch": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "types": [
      "node",
      "jest"
    ]
  },
  "compileOnSave": true,
  "include": [
    "src"
  ],
  "exclude": [
    "node_modules",
    "lib"
  ]
}




================================================================================
FILE: index.html
================================================================================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover, maximum-scale=5.0, user-scalable=yes, shrink-to-fit=no" />
    <meta name="description" content="InsurNews - AI-curated insurance industry news feed for professionals. Stay informed with the latest P&C insurance news, analysis, and insights." />
    <meta name="keywords" content="insurance news, P&C insurance, industry insights, AI-curated, insurance professionals" />
    <meta name="theme-color" content="#2563eb" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="InsurNews" />

    <!-- Mobile Optimization -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="format-detection" content="email=no" />
    <meta name="apple-touch-fullscreen" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <!-- Prevent horizontal scrolling and optimize for mobile -->
    <meta name="viewport-fit" content="cover" />
    <meta name="x-ua-compatible" content="IE=edge" />

    <!-- Disable pinch zoom on iOS (optional, use with caution) -->
    <!-- <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" /> -->

    <!-- Prevent text selection on long press (optional) -->
    <style>
      html, body {
        -webkit-user-select: none;
        -webkit-touch-callout: none;
        user-select: none;
      }
    </style>

    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="InsurNews - AI-Curated Insurance News" />
    <meta property="og:description" content="AI-curated P&C insurance industry news for professionals" />
    <meta property="og:site_name" content="InsurNews" />

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="apple-touch-icon" href="/vite.svg" />

    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json" />

    <title>CarrierSignal - AI-Curated P&C Insurance News Feed</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>

    <!-- Service Worker Registration -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js').then(
            (registration) => {
              console.log('Service Worker registered:', registration);
            },
            (error) => {
              console.log('Service Worker registration failed:', error);
            }
          );
        });
      }
    </script>
  </body>
</html>



================================================================================
FILE: package-lock.json
================================================================================

{
  "name": "carriersignal",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "carriersignal",
      "version": "1.0.0",
      "dependencies": {
        "dotenv": "^17.2.3",
        "firebase": "^12.4.0",
        "firebase-admin": "^13.5.0",
        "framer-motion": "^12.23.24",
        "lucide-react": "^0.548.0",
        "openai": "^6.7.0",
        "pptxgenjs": "^3.12.0",
        "react": "^19.1.1",
        "react-dom": "^19.1.1",
        "rss-parser": "^3.13.0"
      },
      "devDependencies": {
        "@eslint/js": "^9.36.0",
        "@tailwindcss/vite": "^4.1.16",
        "@types/node": "^24.6.0",
        "@types/react": "^19.1.16",
        "@types/react-dom": "^19.1.9",
        "@vitejs/plugin-react": "^5.0.4",
        "eslint": "^9.36.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.22",
        "globals": "^16.4.0",
        "tailwindcss": "^4.1.16",
        "terser": "^5.44.0",
        "tsx": "^4.19.2",
        "typescript": "~5.9.3",
        "typescript-eslint": "^8.45.0",
        "vite": "^7.1.7"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.5.tgz",
      "integrity": "sha512-6uFXyCayocRbqhZOB+6XcuZbkMNimwfVGFji8CTZnCzOHVGvDqzvitu1re2AU5LROliz7eQPhB8CpAMvnx9EjA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.5.tgz",
      "integrity": "sha512-e7jT4DxYvIDLk1ZHmU/m/mB19rex9sv0c2ftBtjSBv+kVM/902eh0fINUzD7UwLLNR+jU585GxUJ8/EBfAM5fw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.5",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.5",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.5",
        "@babel/types": "^7.28.5",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.5.tgz",
      "integrity": "sha512-3EwLFhZ38J4VyIP6WNtt2kUdW9dokXA9Cr4IVIFHuCpZ3H8/YFOl5JjZHisrn1fATPBmKKqXzDFvh9fUwHz6CQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.5",
        "@babel/types": "^7.28.5",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.28.5.tgz",
      "integrity": "sha512-qSs4ifwzKJSV39ucNjsvc6WVHs6b7S03sOh2OcHF9UHfVPqWWALUsNUVzhSBiItjRZoLHx7nIarVjqKVusUZ1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.5.tgz",
      "integrity": "sha512-KKBU1VGYR7ORr3At5HAtUQ+TV3SzRCXmA/8OdDZiLDBIZxVyzXuztPjfLd3BV1PRAQGCMWWSHYhL0F8d5uHBDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.5"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.5.tgz",
      "integrity": "sha512-TCCj4t55U90khlYkVV/0TfkJkAkUg3jZFA3Neb7unZT8CPok7iiRfaX0F+WnqWqt7OxhOn0uBKXCw4lbL8W0aQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.5",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.5",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.5",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.5",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.5.tgz",
      "integrity": "sha512-qQ5m48eI/MFLQ5PxQj4PFaprjyCTLI37ElWMmNs0K8Lk3dVeOdNpB3ks8jc7yM5CDmVC73eMVk/trk3fgmrUpA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.28.5"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.11.tgz",
      "integrity": "sha512-Xt1dOL13m8u0WE8iplx9Ibbm+hFAO0GsU2P34UNoDGvZYkY8ifSiy6Zuc1lYxfG7svWE2fzqCUmFp5HCn51gJg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.11.tgz",
      "integrity": "sha512-uoa7dU+Dt3HYsethkJ1k6Z9YdcHjTrSb5NUy66ZfZaSV8hEYGD5ZHbEMXnqLFlbBflLsl89Zke7CAdDJ4JI+Gg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.11.tgz",
      "integrity": "sha512-9slpyFBc4FPPz48+f6jyiXOx/Y4v34TUeDDXJpZqAWQn/08lKGeD8aDp9TMn9jDz2CiEuHwfhRmGBvpnd/PWIQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.11.tgz",
      "integrity": "sha512-Sgiab4xBjPU1QoPEIqS3Xx+R2lezu0LKIEcYe6pftr56PqPygbB7+szVnzoShbx64MUupqoE0KyRlN7gezbl8g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.11.tgz",
      "integrity": "sha512-VekY0PBCukppoQrycFxUqkCojnTQhdec0vevUL/EDOCnXd9LKWqD/bHwMPzigIJXPhC59Vd1WFIL57SKs2mg4w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.11.tgz",
      "integrity": "sha512-+hfp3yfBalNEpTGp9loYgbknjR695HkqtY3d3/JjSRUyPg/xd6q+mQqIb5qdywnDxRZykIHs3axEqU6l1+oWEQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.11.tgz",
      "integrity": "sha512-CmKjrnayyTJF2eVuO//uSjl/K3KsMIeYeyN7FyDBjsR3lnSJHaXlVoAK8DZa7lXWChbuOk7NjAc7ygAwrnPBhA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.11.tgz",
      "integrity": "sha512-Dyq+5oscTJvMaYPvW3x3FLpi2+gSZTCE/1ffdwuM6G1ARang/mb3jvjxs0mw6n3Lsw84ocfo9CrNMqc5lTfGOw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.11.tgz",
      "integrity": "sha512-TBMv6B4kCfrGJ8cUPo7vd6NECZH/8hPpBHHlYI3qzoYFvWu2AdTvZNuU/7hsbKWqu/COU7NIK12dHAAqBLLXgw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.11.tgz",
      "integrity": "sha512-Qr8AzcplUhGvdyUF08A1kHU3Vr2O88xxP0Tm8GcdVOUm25XYcMPp2YqSVHbLuXzYQMf9Bh/iKx7YPqECs6ffLA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.11.tgz",
      "integrity": "sha512-TmnJg8BMGPehs5JKrCLqyWTVAvielc615jbkOirATQvWWB1NMXY77oLMzsUjRLa0+ngecEmDGqt5jiDC6bfvOw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.11.tgz",
      "integrity": "sha512-DIGXL2+gvDaXlaq8xruNXUJdT5tF+SBbJQKbWy/0J7OhU8gOHOzKmGIlfTTl6nHaCOoipxQbuJi7O++ldrxgMw==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.11.tgz",
      "integrity": "sha512-Osx1nALUJu4pU43o9OyjSCXokFkFbyzjXb6VhGIJZQ5JZi8ylCQ9/LFagolPsHtgw6himDSyb5ETSfmp4rpiKQ==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.11.tgz",
      "integrity": "sha512-nbLFgsQQEsBa8XSgSTSlrnBSrpoWh7ioFDUmwo158gIm5NNP+17IYmNWzaIzWmgCxq56vfr34xGkOcZ7jX6CPw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.11.tgz",
      "integrity": "sha512-HfyAmqZi9uBAbgKYP1yGuI7tSREXwIb438q0nqvlpxAOs3XnZ8RsisRfmVsgV486NdjD7Mw2UrFSw51lzUk1ww==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.11.tgz",
      "integrity": "sha512-HjLqVgSSYnVXRisyfmzsH6mXqyvj0SA7pG5g+9W7ESgwA70AXYNpfKBqh1KbTxmQVaYxpzA/SvlB9oclGPbApw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.11.tgz",
      "integrity": "sha512-HSFAT4+WYjIhrHxKBwGmOOSpphjYkcswF449j6EjsjbinTZbp8PJtjsVK1XFJStdzXdy/jaddAep2FGY+wyFAQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.11.tgz",
      "integrity": "sha512-hr9Oxj1Fa4r04dNpWr3P8QKVVsjQhqrMSUzZzf+LZcYjZNqhA3IAfPQdEh1FLVUJSiu6sgAwp3OmwBfbFgG2Xg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.11.tgz",
      "integrity": "sha512-u7tKA+qbzBydyj0vgpu+5h5AeudxOAGncb8N6C9Kh1N4n7wU1Xw1JDApsRjpShRpXRQlJLb9wY28ELpwdPcZ7A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.11.tgz",
      "integrity": "sha512-Qq6YHhayieor3DxFOoYM1q0q1uMFYb7cSpLD2qzDSvK1NAvqFi8Xgivv0cFC6J+hWVw2teCYltyy9/m/14ryHg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.11.tgz",
      "integrity": "sha512-CN+7c++kkbrckTOz5hrehxWN7uIhFFlmS/hqziSFVWpAzpWrQoAG4chH+nN3Be+Kzv/uuo7zhX716x3Sn2Jduw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.11.tgz",
      "integrity": "sha512-rOREuNIQgaiR+9QuNkbkxubbp8MSO9rONmwP5nKncnWJ9v5jQ4JxFnLu4zDSRPf3x4u+2VN4pM4RdyIzDty/wQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.11.tgz",
      "integrity": "sha512-nq2xdYaWxyg9DcIyXkZhcYulC6pQ2FuCgem3LI92IwMgIZ69KHeY8T4Y88pcwoLIjbed8n36CyKoYRDygNSGhA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.11.tgz",
      "integrity": "sha512-3XxECOWJq1qMZ3MN8srCJ/QfoLpL+VaxD/WfNRm1O3B4+AZ/BnLVgFbUV3eiRYDMXetciH16dwPbbHqwe1uU0Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.11.tgz",
      "integrity": "sha512-3ukss6gb9XZ8TlRyJlgLn17ecsK4NSQTmdIXRASVsiS2sQ6zPPZklNJT5GR5tE/MUarymmy8kCEf5xPCNCqVOA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.11.tgz",
      "integrity": "sha512-D7Hpz6A2L4hzsRpPaCYkQnGOotdUpDzSGRIv9I+1ITdHROSFUWW95ZPZWQmGka1Fg7W3zFJowyn9WGwMJ0+KPA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.2",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.2.tgz",
      "integrity": "sha512-EriSTlt5OC9/7SXkRSCAhfSxxoSUgBm33OH+IkwbdpgoqsSsUg7y3uh+IICI/Qg4BBWr3U2i39RpmycbxMq4ew==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.1.tgz",
      "integrity": "sha512-aw1gNayWpdI/jSYVgzN5pL0cfzU02GT3NBpeT/DXbx1/1x7ZKxFPd9bwrzygx/qiwIQiJ1sw/zD8qY/kRvlGHA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.7",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.4.1.tgz",
      "integrity": "sha512-csZAzkNhsgwb0I/UAV6/RGFTbiakPCf0ZrGmrIxQpYvGZ00PhTkSnyKNolphgIvmnJeGw6rcGVEXfTzUnFuEvw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.16.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.16.0.tgz",
      "integrity": "sha512-nmC8/totwobIiFcGkDza3GIKfAw1+hLiYVrh3I1nIomQ8PEr5cxg34jnkmGawul/ep52wGRAcyeDCNtWKSOj4Q==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.38.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.38.0.tgz",
      "integrity": "sha512-UZ1VpFvXf9J06YG9xQBdnzU+kthors6KjhMAl6f4gH4usHyh31rUf2DLGInT8RFYIReYXNSydgPY0V2LuWgl7A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.7",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.7.tgz",
      "integrity": "sha512-VtAOaymWVfZcmZbp6E2mympDIHvyjXs/12LqWYjVw6qjrfF+VK+fyG33kChz3nnK+SU5/NeHOqrTEHS8sXO3OA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.4.0.tgz",
      "integrity": "sha512-sB5uyeq+dwCWyPi31B2gQlVlo+j5brPlWx4yZBrEaRo/nhdDE8Xke1gsGgtiBdaBTxuTkceLVuVt/pclrasb0A==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.16.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@fastify/busboy": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-3.2.0.tgz",
      "integrity": "sha512-m9FVDXU3GT2ITSe0UaMA5rU3QkfC/UXtCU8y0gSN/GugTqtVldOBWIB5V6V3sbmenVZUIpU6f+mPEO2+m5iTaA==",
      "license": "MIT"
    },
    "node_modules/@firebase/ai": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/@firebase/ai/-/ai-2.4.0.tgz",
      "integrity": "sha512-YilG6AJ/nYpCKtxZyvEzBRAQv5bU+2tBOKX4Ps0rNNSdxN39aT37kGhjATbk1kq1z5Lq7mkWglw/ajAF3lOWUg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.3",
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x",
        "@firebase/app-types": "0.x"
      }
    },
    "node_modules/@firebase/analytics": {
      "version": "0.10.19",
      "resolved": "https://registry.npmjs.org/@firebase/analytics/-/analytics-0.10.19.tgz",
      "integrity": "sha512-3wU676fh60gaiVYQEEXsbGS4HbF2XsiBphyvvqDbtC1U4/dO4coshbYktcCHq+HFaGIK07iHOh4pME0hEq1fcg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/installations": "0.6.19",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/analytics-compat": {
      "version": "0.2.25",
      "resolved": "https://registry.npmjs.org/@firebase/analytics-compat/-/analytics-compat-0.2.25.tgz",
      "integrity": "sha512-fdzoaG0BEKbqksRDhmf4JoyZf16Wosrl0Y7tbZtJyVDOOwziE0vrFjmZuTdviL0yhak+Nco6rMsUUbkbD+qb6Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/analytics": "0.10.19",
        "@firebase/analytics-types": "0.8.3",
        "@firebase/component": "0.7.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/analytics-types": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/@firebase/analytics-types/-/analytics-types-0.8.3.tgz",
      "integrity": "sha512-VrIp/d8iq2g501qO46uGz3hjbDb8xzYMrbu8Tp0ovzIzrvJZ2fvmj649gTjge/b7cCCcjT0H37g1gVtlNhnkbg==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app": {
      "version": "0.14.4",
      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.14.4.tgz",
      "integrity": "sha512-pUxEGmR+uu21OG/icAovjlu1fcYJzyVhhT0rsCrn+zi+nHtrS43Bp9KPn9KGa4NMspCUE++nkyiqziuIvJdwzw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "idb": "7.1.1",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/app-check": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-check/-/app-check-0.11.0.tgz",
      "integrity": "sha512-XAvALQayUMBJo58U/rxW02IhsesaxxfWVmVkauZvGEz3vOAjMEQnzFlyblqkc2iAaO82uJ2ZVyZv9XzPfxjJ6w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/app-check-compat": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-compat/-/app-check-compat-0.4.0.tgz",
      "integrity": "sha512-UfK2Q8RJNjYM/8MFORltZRG9lJj11k0nW84rrffiKvcJxLf1jf6IEjCIkCamykHE73C6BwqhVfhIBs69GXQV0g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check": "0.11.0",
        "@firebase/app-check-types": "0.5.3",
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/app-check-interop-types": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.3.tgz",
      "integrity": "sha512-gAlxfPLT2j8bTI/qfe3ahl2I2YcBQ8cFIBdhAQA4I2f3TndcO+22YizyGYuttLHPQEpWkhmpFW60VCFEPg4g5A==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-check-types": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-types/-/app-check-types-0.5.3.tgz",
      "integrity": "sha512-hyl5rKSj0QmwPdsAxrI5x1otDlByQ7bvNvVt8G/XPO2CSwE++rmSVf3VEhaeOR4J8ZFaF0Z0NDSmLejPweZ3ng==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-compat": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.5.4.tgz",
      "integrity": "sha512-T7ifGmb+awJEcp542Ek4HtNfBxcBrnuk1ggUdqyFEdsXHdq7+wVlhvE6YukTL7NS8hIkEfL7TMAPx/uCNqt30g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app": "0.14.4",
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/app-types": {
      "version": "0.9.3",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.3.tgz",
      "integrity": "sha512-kRVpIl4vVGJ4baogMDINbyrIOtOxqhkZQg4jTq3l8Lw6WSk0xfpEYzezFu+Kl4ve4fbPl79dvwRtaFqAC/ucCw==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/@firebase/auth/-/auth-1.11.0.tgz",
      "integrity": "sha512-5j7+ua93X+IRcJ1oMDTClTo85l7Xe40WSkoJ+shzPrX7OISlVWLdE1mKC57PSD+/LfAbdhJmvKixINBw2ESK6w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x",
        "@react-native-async-storage/async-storage": "^1.18.1"
      },
      "peerDependenciesMeta": {
        "@react-native-async-storage/async-storage": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/auth-compat": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/@firebase/auth-compat/-/auth-compat-0.6.0.tgz",
      "integrity": "sha512-J0lGSxXlG/lYVi45wbpPhcWiWUMXevY4fvLZsN1GHh+po7TZVng+figdHBVhFheaiipU8HZyc7ljw1jNojM2nw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/auth": "1.11.0",
        "@firebase/auth-types": "0.13.0",
        "@firebase/component": "0.7.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/auth-interop-types": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.4.tgz",
      "integrity": "sha512-JPgcXKCuO+CWqGDnigBtvo09HeBs5u/Ktc2GaFj2m01hLarbxthLNm7Fk8iOP1aqAtXV+fnnGj7U28xmk7IwVA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth-types": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@firebase/auth-types/-/auth-types-0.13.0.tgz",
      "integrity": "sha512-S/PuIjni0AQRLF+l9ck0YpsMOdE8GO2KU6ubmBB7P+7TJUCQDa3R1dlgYm9UzGbbePMZsp0xzB93f2b/CgxMOg==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/component": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.7.0.tgz",
      "integrity": "sha512-wR9En2A+WESUHexjmRHkqtaVH94WLNKt6rmeqZhSLBybg4Wyf0Umk04SZsS6sBq4102ZsDBFwoqMqJYj2IoDSg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/data-connect": {
      "version": "0.3.11",
      "resolved": "https://registry.npmjs.org/@firebase/data-connect/-/data-connect-0.3.11.tgz",
      "integrity": "sha512-G258eLzAD6im9Bsw+Qm1Z+P4x0PGNQ45yeUuuqe5M9B1rn0RJvvsQCRHXgE52Z+n9+WX1OJd/crcuunvOGc7Vw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/auth-interop-types": "0.2.4",
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/database": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.1.0.tgz",
      "integrity": "sha512-gM6MJFae3pTyNLoc9VcJNuaUDej0ctdjn3cVtILo3D5lpp0dmUHHLFN/pUKe7ImyeB1KAvRlEYxvIHNF04Filg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.3",
        "@firebase/auth-interop-types": "0.2.4",
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/database-compat": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-2.1.0.tgz",
      "integrity": "sha512-8nYc43RqxScsePVd1qe1xxvWNf0OBnbwHxmXJ7MHSuuTVYFO3eLyLW3PiCKJ9fHnmIz4p4LbieXwz+qtr9PZDg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/database": "1.1.0",
        "@firebase/database-types": "1.0.16",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/database-types": {
      "version": "1.0.16",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.16.tgz",
      "integrity": "sha512-xkQLQfU5De7+SPhEGAXFBnDryUWhhlFXelEg2YeZOQMCdoe7dL64DDAd77SQsR+6uoXIZY5MB4y/inCs4GTfcw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-types": "0.9.3",
        "@firebase/util": "1.13.0"
      }
    },
    "node_modules/@firebase/firestore": {
      "version": "4.9.2",
      "resolved": "https://registry.npmjs.org/@firebase/firestore/-/firestore-4.9.2.tgz",
      "integrity": "sha512-iuA5+nVr/IV/Thm0Luoqf2mERUvK9g791FZpUJV1ZGXO6RL2/i/WFJUj5ZTVXy5pRjpWYO+ZzPcReNrlilmztA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "@firebase/webchannel-wrapper": "1.0.5",
        "@grpc/grpc-js": "~1.9.0",
        "@grpc/proto-loader": "^0.7.8",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/firestore-compat": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@firebase/firestore-compat/-/firestore-compat-0.4.2.tgz",
      "integrity": "sha512-cy7ov6SpFBx+PHwFdOOjbI7kH00uNKmIFurAn560WiPCZXy9EMnil1SOG7VF4hHZKdenC+AHtL4r3fNpirpm0w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/firestore": "4.9.2",
        "@firebase/firestore-types": "3.0.3",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/firestore-types": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@firebase/firestore-types/-/firestore-types-3.0.3.tgz",
      "integrity": "sha512-hD2jGdiWRxB/eZWF89xcK9gF8wvENDJkzpVFb4aGkzfEaKxVRD1kjz1t1Wj8VZEp2LCB53Yx1zD8mrhQu87R6Q==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/functions": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/@firebase/functions/-/functions-0.13.1.tgz",
      "integrity": "sha512-sUeWSb0rw5T+6wuV2o9XNmh9yHxjFI9zVGFnjFi+n7drTEWpl7ZTz1nROgGrSu472r+LAaj+2YaSicD4R8wfbw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.3",
        "@firebase/auth-interop-types": "0.2.4",
        "@firebase/component": "0.7.0",
        "@firebase/messaging-interop-types": "0.2.3",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/functions-compat": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@firebase/functions-compat/-/functions-compat-0.4.1.tgz",
      "integrity": "sha512-AxxUBXKuPrWaVNQ8o1cG1GaCAtXT8a0eaTDfqgS5VsRYLAR0ALcfqDLwo/QyijZj1w8Qf8n3Qrfy/+Im245hOQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/functions": "0.13.1",
        "@firebase/functions-types": "0.6.3",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/functions-types": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/@firebase/functions-types/-/functions-types-0.6.3.tgz",
      "integrity": "sha512-EZoDKQLUHFKNx6VLipQwrSMh01A1SaL3Wg6Hpi//x6/fJ6Ee4hrAeswK99I5Ht8roiniKHw4iO0B1Oxj5I4plg==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/installations": {
      "version": "0.6.19",
      "resolved": "https://registry.npmjs.org/@firebase/installations/-/installations-0.6.19.tgz",
      "integrity": "sha512-nGDmiwKLI1lerhwfwSHvMR9RZuIH5/8E3kgUWnVRqqL7kGVSktjLTWEMva7oh5yxQ3zXfIlIwJwMcaM5bK5j8Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/util": "1.13.0",
        "idb": "7.1.1",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/installations-compat": {
      "version": "0.2.19",
      "resolved": "https://registry.npmjs.org/@firebase/installations-compat/-/installations-compat-0.2.19.tgz",
      "integrity": "sha512-khfzIY3EI5LePePo7vT19/VEIH1E3iYsHknI/6ek9T8QCozAZshWT9CjlwOzZrKvTHMeNcbpo/VSOSIWDSjWdQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/installations": "0.6.19",
        "@firebase/installations-types": "0.5.3",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/installations-types": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/@firebase/installations-types/-/installations-types-0.5.3.tgz",
      "integrity": "sha512-2FJI7gkLqIE0iYsNQ1P751lO3hER+Umykel+TkLwHj6plzWVxqvfclPUZhcKFVQObqloEBTmpi2Ozn7EkCABAA==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x"
      }
    },
    "node_modules/@firebase/logger": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.5.0.tgz",
      "integrity": "sha512-cGskaAvkrnh42b3BA3doDWeBmuHFO/Mx5A83rbRDYakPjO9bJtRL3dX7javzc2Rr/JHZf4HlterTW2lUkfeN4g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/messaging": {
      "version": "0.12.23",
      "resolved": "https://registry.npmjs.org/@firebase/messaging/-/messaging-0.12.23.tgz",
      "integrity": "sha512-cfuzv47XxqW4HH/OcR5rM+AlQd1xL/VhuaeW/wzMW1LFrsFcTn0GND/hak1vkQc2th8UisBcrkVcQAnOnKwYxg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/installations": "0.6.19",
        "@firebase/messaging-interop-types": "0.2.3",
        "@firebase/util": "1.13.0",
        "idb": "7.1.1",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/messaging-compat": {
      "version": "0.2.23",
      "resolved": "https://registry.npmjs.org/@firebase/messaging-compat/-/messaging-compat-0.2.23.tgz",
      "integrity": "sha512-SN857v/kBUvlQ9X/UjAqBoQ2FEaL1ZozpnmL1ByTe57iXkmnVVFm9KqAsTfmf+OEwWI4kJJe9NObtN/w22lUgg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/messaging": "0.12.23",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/messaging-interop-types": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@firebase/messaging-interop-types/-/messaging-interop-types-0.2.3.tgz",
      "integrity": "sha512-xfzFaJpzcmtDjycpDeCUj0Ge10ATFi/VHVIvEEjDNc3hodVBQADZ7BWQU7CuFpjSHE+eLuBI13z5F/9xOoGX8Q==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/performance": {
      "version": "0.7.9",
      "resolved": "https://registry.npmjs.org/@firebase/performance/-/performance-0.7.9.tgz",
      "integrity": "sha512-UzybENl1EdM2I1sjYm74xGt/0JzRnU/0VmfMAKo2LSpHJzaj77FCLZXmYQ4oOuE+Pxtt8Wy2BVJEENiZkaZAzQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/installations": "0.6.19",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0",
        "web-vitals": "^4.2.4"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/performance-compat": {
      "version": "0.2.22",
      "resolved": "https://registry.npmjs.org/@firebase/performance-compat/-/performance-compat-0.2.22.tgz",
      "integrity": "sha512-xLKxaSAl/FVi10wDX/CHIYEUP13jXUjinL+UaNXT9ByIvxII5Ne5150mx6IgM8G6Q3V+sPiw9C8/kygkyHUVxg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/performance": "0.7.9",
        "@firebase/performance-types": "0.2.3",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/performance-types": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@firebase/performance-types/-/performance-types-0.2.3.tgz",
      "integrity": "sha512-IgkyTz6QZVPAq8GSkLYJvwSLr3LS9+V6vNPQr0x4YozZJiLF5jYixj0amDtATf1X0EtYHqoPO48a9ija8GocxQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/remote-config": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config/-/remote-config-0.7.0.tgz",
      "integrity": "sha512-dX95X6WlW7QlgNd7aaGdjAIZUiQkgWgNS+aKNu4Wv92H1T8Ue/NDUjZHd9xb8fHxLXIHNZeco9/qbZzr500MjQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/installations": "0.6.19",
        "@firebase/logger": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/remote-config-compat": {
      "version": "0.2.20",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config-compat/-/remote-config-compat-0.2.20.tgz",
      "integrity": "sha512-P/ULS9vU35EL9maG7xp66uljkZgcPMQOxLj3Zx2F289baTKSInE6+YIkgHEi1TwHoddC/AFePXPpshPlEFkbgg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/logger": "0.5.0",
        "@firebase/remote-config": "0.7.0",
        "@firebase/remote-config-types": "0.5.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/remote-config-types": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config-types/-/remote-config-types-0.5.0.tgz",
      "integrity": "sha512-vI3bqLoF14L/GchtgayMiFpZJF+Ao3uR8WCde0XpYNkSokDpAKca2DxvcfeZv7lZUqkUwQPL2wD83d3vQ4vvrg==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/storage": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@firebase/storage/-/storage-0.14.0.tgz",
      "integrity": "sha512-xWWbb15o6/pWEw8H01UQ1dC5U3rf8QTAzOChYyCpafV6Xki7KVp3Yaw2nSklUwHEziSWE9KoZJS7iYeyqWnYFA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/storage-compat": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@firebase/storage-compat/-/storage-compat-0.4.0.tgz",
      "integrity": "sha512-vDzhgGczr1OfcOy285YAPur5pWDEvD67w4thyeCUh6Ys0izN9fNYtA1MJERmNBfqjqu0lg0FM5GLbw0Il21M+g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.7.0",
        "@firebase/storage": "0.14.0",
        "@firebase/storage-types": "0.8.3",
        "@firebase/util": "1.13.0",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/storage-types": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/@firebase/storage-types/-/storage-types-0.8.3.tgz",
      "integrity": "sha512-+Muk7g9uwngTpd8xn9OdF/D48uiQ7I1Fae7ULsWPuKoCH3HU7bfFPhxtJYzyhjdniowhuDpQcfPmuNRAqZEfvg==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/util": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.13.0.tgz",
      "integrity": "sha512-0AZUyYUfpMNcztR5l09izHwXkZpghLgCUaAGjtMwXnCg3bj4ml5VgiwqOMOxJ+Nw4qN/zJAaOQBcJ7KGkWStqQ==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=20.0.0"
      }
    },
    "node_modules/@firebase/webchannel-wrapper": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@firebase/webchannel-wrapper/-/webchannel-wrapper-1.0.5.tgz",
      "integrity": "sha512-+uGNN7rkfn41HLO0vekTFhTxk61eKa8mTpRGLO0QSqlQdKvIoGAvLp3ppdVIWbTGYJWM6Kp0iN+PjMIOcnVqTw==",
      "license": "Apache-2.0"
    },
    "node_modules/@google-cloud/firestore": {
      "version": "7.11.6",
      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-7.11.6.tgz",
      "integrity": "sha512-EW/O8ktzwLfyWBOsNuhRoMi8lrC3clHM5LVFhGvO1HCsLozCOOXRAlHrYBoE6HL42Sc8yYMuCb2XqcnJ4OOEpw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@opentelemetry/api": "^1.3.0",
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^4.3.3",
        "protobufjs": "^7.2.6"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/paginator": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-5.0.2.tgz",
      "integrity": "sha512-DJS3s0OVH4zFDB1PzjxAsHqJT6sKVbRwwML0ZBP9PbU7Yebtu/7SWMRzvO2J3nUi9pRNITCfu4LJeooM2w4pjg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/projectify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-4.0.0.tgz",
      "integrity": "sha512-MmaX6HeSvyPbWGwFq7mXdo0uQZLGBYCwziiLIGq5JVX+/bdI3SAq6bP98trV5eTWfLuvsMcIC1YJOF2vfteLFA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@google-cloud/promisify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-4.0.0.tgz",
      "integrity": "sha512-Orxzlfb9c67A15cq2JQEyVc7wEsmFBmHjZWZYQMUyJ1qivXyMwdyNOs9odi79hze+2zqdTtu1E19IM/FtqZ10g==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage": {
      "version": "7.17.2",
      "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-7.17.2.tgz",
      "integrity": "sha512-6xN0KNO8L/LIA5zu3CJwHkJiB6n65eykBLOb0E+RooiHYgX8CSao6lvQiKT9TBk2gL5g33LL3fmhDodZnt56rw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@google-cloud/paginator": "^5.0.0",
        "@google-cloud/projectify": "^4.0.0",
        "@google-cloud/promisify": "<4.1.0",
        "abort-controller": "^3.0.0",
        "async-retry": "^1.3.3",
        "duplexify": "^4.1.3",
        "fast-xml-parser": "^4.4.1",
        "gaxios": "^6.0.2",
        "google-auth-library": "^9.6.3",
        "html-entities": "^2.5.2",
        "mime": "^3.0.0",
        "p-limit": "^3.0.1",
        "retry-request": "^7.0.0",
        "teeny-request": "^9.0.0",
        "uuid": "^8.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@google-cloud/storage/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.9.15",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.9.15.tgz",
      "integrity": "sha512-nqE7Hc0AzI+euzUwDAy0aY5hCp10r734gMGRdU+qOPX0XSceI2ULrcXB5U2xSc5VkWwalCj4M7GzCAygZl2KoQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@grpc/proto-loader": "^0.7.8",
        "@types/node": ">=12.12.47"
      },
      "engines": {
        "node": "^8.13.0 || >=10.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.15.tgz",
      "integrity": "sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.5",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.7",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.7.tgz",
      "integrity": "sha512-/zUx+yOsIrG4Y43Eh2peDeKCxlRt/gET6aHfaKpuq267qXdYDFViVHfMaLyygZOnl0kGWxFIgsBy8QFuTLUXEQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.4.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.11",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.11.tgz",
      "integrity": "sha512-ZMp1V8ZFcPG5dIWnQLr3NSI1MiCU7UETdS/A0G8V/XWHvJv3ZsFqutJn1Y5RPmAPX6F3BiE397OqveU/9NCuIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@js-sdsl/ordered-map": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
      "integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
      "license": "MIT",
      "optional": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/js-sdsl"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@opentelemetry/api": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
      "integrity": "sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.43",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.43.tgz",
      "integrity": "sha512-5Uxg7fQUCmfhax7FJke2+8B6cqgeUJUD9o2uXIKXhD+mG0mL6NObmVoi9wXEU1tY89mZKgAYA6fTbftx3q2ZPQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.52.5.tgz",
      "integrity": "sha512-8c1vW4ocv3UOMp9K+gToY5zL2XiiVw3k7f1ksf4yO1FlDFQ1C2u72iACFnSOceJFsWskc2WZNqeRhFRPzv+wtQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.52.5.tgz",
      "integrity": "sha512-mQGfsIEFcu21mvqkEKKu2dYmtuSZOBMmAl5CFlPGLY94Vlcm+zWApK7F/eocsNzp8tKmbeBP8yXyAbx0XHsFNA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.52.5.tgz",
      "integrity": "sha512-takF3CR71mCAGA+v794QUZ0b6ZSrgJkArC+gUiG6LB6TQty9T0Mqh3m2ImRBOxS2IeYBo4lKWIieSvnEk2OQWA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.52.5.tgz",
      "integrity": "sha512-W901Pla8Ya95WpxDn//VF9K9u2JbocwV/v75TE0YIHNTbhqUTv9w4VuQ9MaWlNOkkEfFwkdNhXgcLqPSmHy0fA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.52.5.tgz",
      "integrity": "sha512-QofO7i7JycsYOWxe0GFqhLmF6l1TqBswJMvICnRUjqCx8b47MTo46W8AoeQwiokAx3zVryVnxtBMcGcnX12LvA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.52.5.tgz",
      "integrity": "sha512-jr21b/99ew8ujZubPo9skbrItHEIE50WdV86cdSoRkKtmWa+DDr6fu2c/xyRT0F/WazZpam6kk7IHBerSL7LDQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.52.5.tgz",
      "integrity": "sha512-PsNAbcyv9CcecAUagQefwX8fQn9LQ4nZkpDboBOttmyffnInRy8R8dSg6hxxl2Re5QhHBf6FYIDhIj5v982ATQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.52.5.tgz",
      "integrity": "sha512-Fw4tysRutyQc/wwkmcyoqFtJhh0u31K+Q6jYjeicsGJJ7bbEq8LwPWV/w0cnzOqR2m694/Af6hpFayLJZkG2VQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.52.5.tgz",
      "integrity": "sha512-a+3wVnAYdQClOTlyapKmyI6BLPAFYs0JM8HRpgYZQO02rMR09ZcV9LbQB+NL6sljzG38869YqThrRnfPMCDtZg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.52.5.tgz",
      "integrity": "sha512-AvttBOMwO9Pcuuf7m9PkC1PUIKsfaAJ4AYhy944qeTJgQOqJYJ9oVl2nYgY7Rk0mkbsuOpCAYSs6wLYB2Xiw0Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loong64-gnu": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loong64-gnu/-/rollup-linux-loong64-gnu-4.52.5.tgz",
      "integrity": "sha512-DkDk8pmXQV2wVrF6oq5tONK6UHLz/XcEVow4JTTerdeV1uqPeHxwcg7aFsfnSm9L+OO8WJsWotKM2JJPMWrQtA==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.52.5.tgz",
      "integrity": "sha512-W/b9ZN/U9+hPQVvlGwjzi+Wy4xdoH2I8EjaCkMvzpI7wJUs8sWJ03Rq96jRnHkSrcHTpQe8h5Tg3ZzUPGauvAw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.52.5.tgz",
      "integrity": "sha512-sjQLr9BW7R/ZiXnQiWPkErNfLMkkWIoCz7YMn27HldKsADEKa5WYdobaa1hmN6slu9oWQbB6/jFpJ+P2IkVrmw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.52.5.tgz",
      "integrity": "sha512-hq3jU/kGyjXWTvAh2awn8oHroCbrPm8JqM7RUpKjalIRWWXE01CQOf/tUNWNHjmbMHg/hmNCwc/Pz3k1T/j/Lg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.52.5.tgz",
      "integrity": "sha512-gn8kHOrku8D4NGHMK1Y7NA7INQTRdVOntt1OCYypZPRt6skGbddska44K8iocdpxHTMMNui5oH4elPH4QOLrFQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.52.5.tgz",
      "integrity": "sha512-hXGLYpdhiNElzN770+H2nlx+jRog8TyynpTVzdlc6bndktjKWyZyiCsuDAlpd+j+W+WNqfcyAWz9HxxIGfZm1Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.52.5.tgz",
      "integrity": "sha512-arCGIcuNKjBoKAXD+y7XomR9gY6Mw7HnFBv5Rw7wQRvwYLR7gBAgV7Mb2QTyjXfTveBNFAtPt46/36vV9STLNg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-openharmony-arm64": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.52.5.tgz",
      "integrity": "sha512-QoFqB6+/9Rly/RiPjaomPLmR/13cgkIGfA40LHly9zcH1S0bN2HVFYk3a1eAyHQyjs3ZJYlXvIGtcCs5tko9Cw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.52.5.tgz",
      "integrity": "sha512-w0cDWVR6MlTstla1cIfOGyl8+qb93FlAVutcor14Gf5Md5ap5ySfQ7R9S/NjNaMLSFdUnKGEasmVnu3lCMqB7w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.52.5.tgz",
      "integrity": "sha512-Aufdpzp7DpOTULJCuvzqcItSGDH73pF3ko/f+ckJhxQyHtp67rHw3HMNxoIdDMUITJESNE6a8uh4Lo4SLouOUg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-gnu": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-gnu/-/rollup-win32-x64-gnu-4.52.5.tgz",
      "integrity": "sha512-UGBUGPFp1vkj6p8wCRraqNhqwX/4kNQPS57BCFc8wYh0g94iVIW33wJtQAx3G7vrjjNtRaxiMUylM0ktp/TRSQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.52.5.tgz",
      "integrity": "sha512-TAcgQh2sSkykPRWLrdyy2AiceMckNf5loITqXxFI5VuQjS5tSuw3WlwdN8qv8vzjLAUTvYaH/mVjSFpbkFbpTg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@tailwindcss/node": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.16.tgz",
      "integrity": "sha512-BX5iaSsloNuvKNHRN3k2RcCuTEgASTo77mofW0vmeHkfrDWaoFAFvNHpEgtu0eqyypcyiBkDWzSMxJhp3AUVcw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/remapping": "^2.3.4",
        "enhanced-resolve": "^5.18.3",
        "jiti": "^2.6.1",
        "lightningcss": "1.30.2",
        "magic-string": "^0.30.19",
        "source-map-js": "^1.2.1",
        "tailwindcss": "4.1.16"
      }
    },
    "node_modules/@tailwindcss/oxide": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.16.tgz",
      "integrity": "sha512-2OSv52FRuhdlgyOQqgtQHuCgXnS8nFSYRp2tJ+4WZXKgTxqPy7SMSls8c3mPT5pkZ17SBToGM5LHEJBO7miEdg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      },
      "optionalDependencies": {
        "@tailwindcss/oxide-android-arm64": "4.1.16",
        "@tailwindcss/oxide-darwin-arm64": "4.1.16",
        "@tailwindcss/oxide-darwin-x64": "4.1.16",
        "@tailwindcss/oxide-freebsd-x64": "4.1.16",
        "@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.16",
        "@tailwindcss/oxide-linux-arm64-gnu": "4.1.16",
        "@tailwindcss/oxide-linux-arm64-musl": "4.1.16",
        "@tailwindcss/oxide-linux-x64-gnu": "4.1.16",
        "@tailwindcss/oxide-linux-x64-musl": "4.1.16",
        "@tailwindcss/oxide-wasm32-wasi": "4.1.16",
        "@tailwindcss/oxide-win32-arm64-msvc": "4.1.16",
        "@tailwindcss/oxide-win32-x64-msvc": "4.1.16"
      }
    },
    "node_modules/@tailwindcss/oxide-android-arm64": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-android-arm64/-/oxide-android-arm64-4.1.16.tgz",
      "integrity": "sha512-8+ctzkjHgwDJ5caq9IqRSgsP70xhdhJvm+oueS/yhD5ixLhqTw9fSL1OurzMUhBwE5zK26FXLCz2f/RtkISqHA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-darwin-arm64": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-arm64/-/oxide-darwin-arm64-4.1.16.tgz",
      "integrity": "sha512-C3oZy5042v2FOALBZtY0JTDnGNdS6w7DxL/odvSny17ORUnaRKhyTse8xYi3yKGyfnTUOdavRCdmc8QqJYwFKA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-darwin-x64": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-x64/-/oxide-darwin-x64-4.1.16.tgz",
      "integrity": "sha512-vjrl/1Ub9+JwU6BP0emgipGjowzYZMjbWCDqwA2Z4vCa+HBSpP4v6U2ddejcHsolsYxwL5r4bPNoamlV0xDdLg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-freebsd-x64": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-freebsd-x64/-/oxide-freebsd-x64-4.1.16.tgz",
      "integrity": "sha512-TSMpPYpQLm+aR1wW5rKuUuEruc/oOX3C7H0BTnPDn7W/eMw8W+MRMpiypKMkXZfwH8wqPIRKppuZoedTtNj2tg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm-gnueabihf": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm-gnueabihf/-/oxide-linux-arm-gnueabihf-4.1.16.tgz",
      "integrity": "sha512-p0GGfRg/w0sdsFKBjMYvvKIiKy/LNWLWgV/plR4lUgrsxFAoQBFrXkZ4C0w8IOXfslB9vHK/JGASWD2IefIpvw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm64-gnu": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-gnu/-/oxide-linux-arm64-gnu-4.1.16.tgz",
      "integrity": "sha512-DoixyMmTNO19rwRPdqviTrG1rYzpxgyYJl8RgQvdAQUzxC1ToLRqtNJpU/ATURSKgIg6uerPw2feW0aS8SNr/w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-arm64-musl": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-musl/-/oxide-linux-arm64-musl-4.1.16.tgz",
      "integrity": "sha512-H81UXMa9hJhWhaAUca6bU2wm5RRFpuHImrwXBUvPbYb+3jo32I9VIwpOX6hms0fPmA6f2pGVlybO6qU8pF4fzQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-x64-gnu": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-gnu/-/oxide-linux-x64-gnu-4.1.16.tgz",
      "integrity": "sha512-ZGHQxDtFC2/ruo7t99Qo2TTIvOERULPl5l0K1g0oK6b5PGqjYMga+FcY1wIUnrUxY56h28FxybtDEla+ICOyew==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-linux-x64-musl": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-musl/-/oxide-linux-x64-musl-4.1.16.tgz",
      "integrity": "sha512-Oi1tAaa0rcKf1Og9MzKeINZzMLPbhxvm7rno5/zuP1WYmpiG0bEHq4AcRUiG2165/WUzvxkW4XDYCscZWbTLZw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-wasm32-wasi": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-wasm32-wasi/-/oxide-wasm32-wasi-4.1.16.tgz",
      "integrity": "sha512-B01u/b8LteGRwucIBmCQ07FVXLzImWESAIMcUU6nvFt/tYsQ6IHz8DmZ5KtvmwxD+iTYBtM1xwoGXswnlu9v0Q==",
      "bundleDependencies": [
        "@napi-rs/wasm-runtime",
        "@emnapi/core",
        "@emnapi/runtime",
        "@tybys/wasm-util",
        "@emnapi/wasi-threads",
        "tslib"
      ],
      "cpu": [
        "wasm32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@emnapi/core": "^1.5.0",
        "@emnapi/runtime": "^1.5.0",
        "@emnapi/wasi-threads": "^1.1.0",
        "@napi-rs/wasm-runtime": "^1.0.7",
        "@tybys/wasm-util": "^0.10.1",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@tailwindcss/oxide-win32-arm64-msvc": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-arm64-msvc/-/oxide-win32-arm64-msvc-4.1.16.tgz",
      "integrity": "sha512-zX+Q8sSkGj6HKRTMJXuPvOcP8XfYON24zJBRPlszcH1Np7xuHXhWn8qfFjIujVzvH3BHU+16jBXwgpl20i+v9A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/oxide-win32-x64-msvc": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.16.tgz",
      "integrity": "sha512-m5dDFJUEejbFqP+UXVstd4W/wnxA4F61q8SoL+mqTypId2T2ZpuxosNSgowiCnLp2+Z+rivdU0AqpfgiD7yCBg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@tailwindcss/vite": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/@tailwindcss/vite/-/vite-4.1.16.tgz",
      "integrity": "sha512-bbguNBcDxsRmi9nnlWJxhfDWamY3lmcyACHcdO1crxfzuLpOhHLLtEIN/nCbbAtj5rchUgQD17QVAKi1f7IsKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@tailwindcss/node": "4.1.16",
        "@tailwindcss/oxide": "4.1.16",
        "tailwindcss": "4.1.16"
      },
      "peerDependencies": {
        "vite": "^5.2.0 || ^6 || ^7"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.6",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.6.tgz",
      "integrity": "sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/caseless": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/@types/caseless/-/caseless-0.12.5.tgz",
      "integrity": "sha512-hWtVTC2q7hc7xZ/RLbxapMvDMgUnDvKvMOpKal4DrMyfGBUfB1oKaZlIRr6mJL+If3bAP6sV/QneGzF6tJjZDg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/express": {
      "version": "4.17.24",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.24.tgz",
      "integrity": "sha512-Mbrt4SRlXSTWryOnHAh2d4UQ/E7n9lZyGSi6KgX+4hkuL9soYbLOVXVhnk/ODp12YsGc95f4pOvqywJ6kngUwg==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.19.7",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.7.tgz",
      "integrity": "sha512-FvPtiIf1LfhzsaIXhv/PHan/2FeQBbtBDtfX2QfvPxdUelMDEckK08SM6nqo1MIZY3RUlfA+HV8+hFUSio78qg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.5.tgz",
      "integrity": "sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==",
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.10",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.10.tgz",
      "integrity": "sha512-asx5hIG9Qmf/1oStypjanR7iKTv0gXQ1Ov/jfrX6kS/EO0OFni8orbmGCn0672NHR3kXHwpAwR+B368ZGN/2rA==",
      "license": "MIT",
      "dependencies": {
        "@types/ms": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/long": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.2.tgz",
      "integrity": "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "24.9.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.9.1.tgz",
      "integrity": "sha512-QoiaXANRkSXK6p0Duvt56W208du4P9Uye9hWLWgGMDTEoKPhuenzNcC4vGUmrNkiOKTlIrBoyNQYNpSwfEZXSg==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.16.0"
      }
    },
    "node_modules/@types/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.2.2",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.2.2.tgz",
      "integrity": "sha512-6mDvHUFSjyT2B2yeNx2nUgMxh9LtOWvkhIU3uePn2I2oyNymUAX1NIsdgviM4CH+JSrp2D2hsMvJOkxY+0wNRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.2.2",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.2.2.tgz",
      "integrity": "sha512-9KQPoO6mZCi7jcIStSnlOWn2nEF3mNmyr3rIAsGnAbQKYbRLyqmeSc39EVgtxXVia+LMT8j3knZLAZAh+xLmrw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.2.0"
      }
    },
    "node_modules/@types/request": {
      "version": "2.48.13",
      "resolved": "https://registry.npmjs.org/@types/request/-/request-2.48.13.tgz",
      "integrity": "sha512-FGJ6udDNUCjd19pp0Q3iTiDkwhYup7J8hpMW9c4k53NrccQFFWKRho6hvtPPEhnXWKvukfwAlB6DbDz4yhH5Gg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/caseless": "*",
        "@types/node": "*",
        "@types/tough-cookie": "*",
        "form-data": "^2.5.5"
      }
    },
    "node_modules/@types/send": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-1.2.1.tgz",
      "integrity": "sha512-arsCikDvlU99zl1g69TcAB3mzZPpxgw0UQnaHeC1Nwb015xp8bknZv5rIfri9xTOcMuaVgvabfIRA7PSZVuZIQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.10",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.10.tgz",
      "integrity": "sha512-tRs1dB+g8Itk72rlSI2ZrW6vZg0YrLI81iQSTkMmOqnqCaNr/8Ek4VwWcN5vZgCYWbg/JJSGBlUaYGAOP73qBw==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "<1"
      }
    },
    "node_modules/@types/serve-static/node_modules/@types/send": {
      "version": "0.17.6",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.6.tgz",
      "integrity": "sha512-Uqt8rPBE8SY0RK8JB1EzVOIZ32uqy8HwdxCnoCOsYrvnswqmFZ/k+9Ikidlk/ImhsdvBsloHbAlewb2IEBV/Og==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/tough-cookie": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
      "integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.46.2.tgz",
      "integrity": "sha512-ZGBMToy857/NIPaaCucIUQgqueOiq7HeAKkhlvqVV4lm089zUFW6ikRySx2v+cAhKeUCPuWVHeimyk6Dw1iY3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.46.2",
        "@typescript-eslint/type-utils": "8.46.2",
        "@typescript-eslint/utils": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.46.2",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.46.2.tgz",
      "integrity": "sha512-BnOroVl1SgrPLywqxyqdJ4l3S2MsKVLDVxZvjI1Eoe8ev2r3kGDo+PcMihNmDE+6/KjkTubSJnmqGZZjQSBq/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.46.2",
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/typescript-estree": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.46.2.tgz",
      "integrity": "sha512-PULOLZ9iqwI7hXcmL4fVfIsBi6AN9YxRc0frbvmg8f+4hQAjQ5GYNKK0DIArNo+rOKmR/iBYwkpBmnIwin4wBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.46.2",
        "@typescript-eslint/types": "^8.46.2",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.46.2.tgz",
      "integrity": "sha512-LF4b/NmGvdWEHD2H4MsHD8ny6JpiVNDzrSZr3CsckEgCbAGZbYM4Cqxvi9L+WqDMT+51Ozy7lt2M+d0JLEuBqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.46.2.tgz",
      "integrity": "sha512-a7QH6fw4S57+F5y2FIxxSDyi5M4UfGF+Jl1bCGd7+L4KsaUY80GsiF/t0UoRFDHAguKlBaACWJRmdrc6Xfkkag==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.46.2.tgz",
      "integrity": "sha512-HbPM4LbaAAt/DjxXaG9yiS9brOOz6fabal4uvUmaUYe6l3K1phQDMQKBRUrr06BQkxkvIZVVHttqiybM9nJsLA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/typescript-estree": "8.46.2",
        "@typescript-eslint/utils": "8.46.2",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.46.2.tgz",
      "integrity": "sha512-lNCWCbq7rpg7qDsQrd3D6NyWYu+gkTENkG5IKYhUIcxSb59SQC/hEQ+MrG4sTgBVghTonNWq42bA/d4yYumldQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.46.2.tgz",
      "integrity": "sha512-f7rW7LJ2b7Uh2EiQ+7sza6RDZnajbNbemn54Ob6fRwQbgcIn+GWfyuHDHRYgRoZu1P4AayVScrRW+YfbTvPQoQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.46.2",
        "@typescript-eslint/tsconfig-utils": "8.46.2",
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/visitor-keys": "8.46.2",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.46.2.tgz",
      "integrity": "sha512-sExxzucx0Tud5tE0XqR0lT0psBQvEpnpiul9XbGUB1QwpWJJAps1O/Z7hJxLGiZLBKMCutjTzDgmd1muEhBnVg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.46.2",
        "@typescript-eslint/types": "8.46.2",
        "@typescript-eslint/typescript-estree": "8.46.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.46.2.tgz",
      "integrity": "sha512-tUFMXI4gxzzMXt4xpGJEsBsTox0XbNQ1y94EwlD/CuZwFcQP79xfQqMhau9HsRc/J0cAPA/HZt1dZPtGn9V/7w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.46.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-5.1.0.tgz",
      "integrity": "sha512-4LuWrg7EKWgQaMJfnN+wcmbAW+VSsCmqGohftWjuct47bv8uE4n/nPpq4XjJPsxgq00GGG5J8dvBczp8uxScew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.4",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.43",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.18.0"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/async-retry": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
      "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "retry": "0.13.1"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/baseline-browser-mapping": {
      "version": "2.8.20",
      "resolved": "https://registry.npmjs.org/baseline-browser-mapping/-/baseline-browser-mapping-2.8.20.tgz",
      "integrity": "sha512-JMWsdF+O8Orq3EMukbUN1QfbLK9mX2CkUmQBcW2T0s8OmdAUL5LLM/6wFwSrqXzlXB13yhyK9gTKS1rIizOduQ==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "baseline-browser-mapping": "dist/cli.js"
      }
    },
    "node_modules/bignumber.js": {
      "version": "9.3.1",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.1.tgz",
      "integrity": "sha512-Ko0uX15oIUS7wJ3Rb30Fs6SkVbLmPBAKdlm7q9+ak9bbIeFf0MwuBsQV6z7+X768/cHsfg+WlysDWJcmthjsjQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.27.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.27.0.tgz",
      "integrity": "sha512-AXVQwdhot1eqLihwasPElhX2tAZiBjWdJ9i/Zcj2S6QYIjkx62OKSfnobkriB81C3l4w0rVy3Nt4jaTBltYEpw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "baseline-browser-mapping": "^2.8.19",
        "caniuse-lite": "^1.0.30001751",
        "electron-to-chromium": "^1.5.238",
        "node-releases": "^2.0.26",
        "update-browserslist-db": "^1.1.4"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001751",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001751.tgz",
      "integrity": "sha512-A0QJhug0Ly64Ii3eIqHu5X51ebln3k4yTUkY1j8drqpWHVreg/VLijN48cZ1bYPiqOQuqpkIKnzr/Ul8V+p6Cw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.1.2.tgz",
      "integrity": "sha512-Btj2BOOO83o3WyH59e8MgXsxEQVcarkUOpEYrubB0urwnN10yQ364rsiByU11nZlqWYZm05i/of7io4mzihBtQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dotenv": {
      "version": "17.2.3",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-17.2.3.tgz",
      "integrity": "sha512-JVUnt+DUIzu87TABbhPmNfVdBDt18BLOWjMUFJMSi/Qqg7NTYtabbvSNJGOJ7afbRuv9D/lngizHtP7QyLQ+9w==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexify": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
      "integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.2"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.240",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.240.tgz",
      "integrity": "sha512-OBwbZjWgrCOH+g6uJsA2/7Twpas2OlepS9uvByJjR2datRDuKGYeD+nP8lBBks2qnB7bGJNHDUx7c/YLaT3QMQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "5.18.3",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.3.tgz",
      "integrity": "sha512-d4lC8xfavMeBjzGr2vECC3fsGXziXZQyJxD868h2M/mBI3PwAuODxAkLkq5HYuvrPYcUtiLzsTo8U3PgX3Ocww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "license": "BSD-2-Clause",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.11",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.11.tgz",
      "integrity": "sha512-KohQwyzrKTQmhXDW1PjCv3Tyspn9n5GcY2RTDqeORIdIJY8yKIF7sTSopFmn/wpMPW4rdPXI0UE5LJLuq3bx0Q==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.11",
        "@esbuild/android-arm": "0.25.11",
        "@esbuild/android-arm64": "0.25.11",
        "@esbuild/android-x64": "0.25.11",
        "@esbuild/darwin-arm64": "0.25.11",
        "@esbuild/darwin-x64": "0.25.11",
        "@esbuild/freebsd-arm64": "0.25.11",
        "@esbuild/freebsd-x64": "0.25.11",
        "@esbuild/linux-arm": "0.25.11",
        "@esbuild/linux-arm64": "0.25.11",
        "@esbuild/linux-ia32": "0.25.11",
        "@esbuild/linux-loong64": "0.25.11",
        "@esbuild/linux-mips64el": "0.25.11",
        "@esbuild/linux-ppc64": "0.25.11",
        "@esbuild/linux-riscv64": "0.25.11",
        "@esbuild/linux-s390x": "0.25.11",
        "@esbuild/linux-x64": "0.25.11",
        "@esbuild/netbsd-arm64": "0.25.11",
        "@esbuild/netbsd-x64": "0.25.11",
        "@esbuild/openbsd-arm64": "0.25.11",
        "@esbuild/openbsd-x64": "0.25.11",
        "@esbuild/openharmony-arm64": "0.25.11",
        "@esbuild/sunos-x64": "0.25.11",
        "@esbuild/win32-arm64": "0.25.11",
        "@esbuild/win32-ia32": "0.25.11",
        "@esbuild/win32-x64": "0.25.11"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.38.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.38.0.tgz",
      "integrity": "sha512-t5aPOpmtJcZcz5UJyY2GbvpDlsK5E8JqRqoKtfiKE3cNh437KIqfJr3A3AKf5k64NPx6d0G3dno6XDY05PqPtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.8.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.1",
        "@eslint/config-helpers": "^0.4.1",
        "@eslint/core": "^0.16.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.38.0",
        "@eslint/plugin-kit": "^0.4.0",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.24.tgz",
      "integrity": "sha512-nLHIW7TEq3aLrEYWpVaJ1dRgFR+wLDPN8e8FpYAql/bMV2oBEfC37K0gLEGgv9fy66juNShSMV8OkTqzltcG/w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/farmhash-modern": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/farmhash-modern/-/farmhash-modern-1.1.0.tgz",
      "integrity": "sha512-6ypT4XfgqJk/F3Yuv4SX26I3doUjt0GTG4a+JgWxXQpxXzTBq8fPUeGHfcYMMDPHJHm3yPOSjaeBwBGAHWXCdA==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-xml-parser": {
      "version": "4.5.3",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.5.3.tgz",
      "integrity": "sha512-RKihhV+SHsIUGXObeVy9AXiBbFwkVk7Syp8XgwN5U3JV416+Gwp/GO9i0JYKmikykgz/UHRrrV4ROuZEo/T0ig==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "strnum": "^1.1.1"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      }
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/firebase": {
      "version": "12.4.0",
      "resolved": "https://registry.npmjs.org/firebase/-/firebase-12.4.0.tgz",
      "integrity": "sha512-/chNgDQ6ppPPGOQO4jctxOa/5JeQxuhaxA7Y90K0I+n/wPfoO8mRveedhVUdo7ExLcWUivnnow/ouSLYSI5Icw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/ai": "2.4.0",
        "@firebase/analytics": "0.10.19",
        "@firebase/analytics-compat": "0.2.25",
        "@firebase/app": "0.14.4",
        "@firebase/app-check": "0.11.0",
        "@firebase/app-check-compat": "0.4.0",
        "@firebase/app-compat": "0.5.4",
        "@firebase/app-types": "0.9.3",
        "@firebase/auth": "1.11.0",
        "@firebase/auth-compat": "0.6.0",
        "@firebase/data-connect": "0.3.11",
        "@firebase/database": "1.1.0",
        "@firebase/database-compat": "2.1.0",
        "@firebase/firestore": "4.9.2",
        "@firebase/firestore-compat": "0.4.2",
        "@firebase/functions": "0.13.1",
        "@firebase/functions-compat": "0.4.1",
        "@firebase/installations": "0.6.19",
        "@firebase/installations-compat": "0.2.19",
        "@firebase/messaging": "0.12.23",
        "@firebase/messaging-compat": "0.2.23",
        "@firebase/performance": "0.7.9",
        "@firebase/performance-compat": "0.2.22",
        "@firebase/remote-config": "0.7.0",
        "@firebase/remote-config-compat": "0.2.20",
        "@firebase/storage": "0.14.0",
        "@firebase/storage-compat": "0.4.0",
        "@firebase/util": "1.13.0"
      }
    },
    "node_modules/firebase-admin": {
      "version": "13.5.0",
      "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-13.5.0.tgz",
      "integrity": "sha512-QZOpv1DJRJpH8NcWiL1xXE10tw3L/bdPFlgjcWrqU3ufyOJDYfxB1MMtxiVTwxK16NlybQbEM6ciSich2uWEIQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@fastify/busboy": "^3.0.0",
        "@firebase/database-compat": "^2.0.0",
        "@firebase/database-types": "^1.0.6",
        "@types/node": "^22.8.7",
        "farmhash-modern": "^1.1.0",
        "fast-deep-equal": "^3.1.1",
        "google-auth-library": "^9.14.2",
        "jsonwebtoken": "^9.0.0",
        "jwks-rsa": "^3.1.0",
        "node-forge": "^1.3.1",
        "uuid": "^11.0.2"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@google-cloud/firestore": "^7.11.0",
        "@google-cloud/storage": "^7.14.0"
      }
    },
    "node_modules/firebase-admin/node_modules/@types/node": {
      "version": "22.18.12",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.18.12.tgz",
      "integrity": "sha512-BICHQ67iqxQGFSzfCFTT7MRQ5XcBjG5aeKh5Ok38UBbPe5fxTyE+aHFxwVrGyr8GNlqFMLKD1D3P2K/1ks8tog==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/firebase-admin/node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "license": "MIT"
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/form-data": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.5.5.tgz",
      "integrity": "sha512-jqdObeR2rxZZbPSGL+3VckHMYtu+f9//KXBsVny6JSX/pa38Fy+bGjuG8eW/H6USNQWhLi8Num++cU2yOCNz4A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.35",
        "safe-buffer": "^5.2.1"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/framer-motion": {
      "version": "12.23.24",
      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-12.23.24.tgz",
      "integrity": "sha512-HMi5HRoRCTou+3fb3h9oTLyJGBxHfW+HnNE25tAXOvVx/IvwMHK0cx7IR4a2ZU6sh3IX1Z+4ts32PcYBOqka8w==",
      "license": "MIT",
      "dependencies": {
        "motion-dom": "^12.23.23",
        "motion-utils": "^12.23.6",
        "tslib": "^2.4.0"
      },
      "peerDependencies": {
        "@emotion/is-prop-valid": "*",
        "react": "^18.0.0 || ^19.0.0",
        "react-dom": "^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@emotion/is-prop-valid": {
          "optional": true
        },
        "react": {
          "optional": true
        },
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "optional": true,
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/gaxios": {
      "version": "6.7.1",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gaxios/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
      "integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
      "license": "Apache-2.0",
      "dependencies": {
        "gaxios": "^6.1.1",
        "google-logging-utils": "^0.0.2",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-tsconfig": {
      "version": "4.13.0",
      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.13.0.tgz",
      "integrity": "sha512-1VKTZJCwBrvbd+Wn3AOgQP/2Av+TfTCOlE4AcRJE72W1ksZXbAx8PPBR9RzgTeSPzlPMHrbANMH3LbltH73wxQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve-pkg-maps": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "16.4.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-16.4.0.tgz",
      "integrity": "sha512-ob/2LcVVaVGCYN+r14cnwnoDPUufjiYgSqRhiFD0Q1iI4Odora5RE8Iv1D24hAz5oMophRGkGz+yuvQmmUMnMw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/google-auth-library": {
      "version": "9.15.1",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
      "integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
      "license": "Apache-2.0",
      "dependencies": {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "gaxios": "^6.1.1",
        "gcp-metadata": "^6.1.0",
        "gtoken": "^7.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-gax": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-4.6.1.tgz",
      "integrity": "sha512-V6eky/xz2mcKfAd1Ioxyd6nmA61gao3n01C+YeuIwu3vzM9EDR6wcVzMSIbLMDXWeoi9SHYctXuKYC5uJUT3eQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/grpc-js": "^1.10.9",
        "@grpc/proto-loader": "^0.7.13",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "google-auth-library": "^9.3.0",
        "node-fetch": "^2.7.0",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^2.0.2",
        "protobufjs": "^7.3.2",
        "retry-request": "^7.0.0",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-gax/node_modules/@grpc/grpc-js": {
      "version": "1.14.0",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.14.0.tgz",
      "integrity": "sha512-N8Jx6PaYzcTRNzirReJCtADVoq4z7+1KQ4E70jTg/koQiMoUSN1kbNjPOqpPbhMFhfU1/l7ixspPl8dNY+FoUg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/proto-loader": "^0.8.0",
        "@js-sdsl/ordered-map": "^4.4.2"
      },
      "engines": {
        "node": ">=12.10.0"
      }
    },
    "node_modules/google-gax/node_modules/@grpc/grpc-js/node_modules/@grpc/proto-loader": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.8.0.tgz",
      "integrity": "sha512-rc1hOQtjIWGxcxpb9aHAfLpIctjEnsDehj0DAiVfBlmT84uvR0uUtN2hEi/ecvWVjXUGf5qPF4qEgiLOx1YIMQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.5.3",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/google-gax/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/google-logging-utils": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
      "integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/gtoken": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
      "license": "MIT",
      "dependencies": {
        "gaxios": "^6.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html-entities": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.6.0.tgz",
      "integrity": "sha512-kig+rMn/QOVRvr7c86gQ8lWXq+Hkv6CbAH1hLu+RG338StTpE8Z0b44SDVaqVu7HGKf27frdmUYEs9hTUX/cLQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/mdevils"
        },
        {
          "type": "patreon",
          "url": "https://patreon.com/mdevils"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/http-parser-js": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
      "integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
      "license": "MIT"
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-agent/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/https": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/https/-/https-1.0.0.tgz",
      "integrity": "sha512-4EC57ddXrkaF0x83Oj8sM6SLQHAWXw90Skqu2M4AEWENZ3F02dFJE/GARA8igO79tcgYqGrD7ae4f5L3um2lgg==",
      "license": "ISC"
    },
    "node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/idb": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
      "integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
      "license": "ISC"
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/image-size": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/image-size/-/image-size-1.2.1.tgz",
      "integrity": "sha512-rH+46sQJ2dlwfjfhCyNx5thzrv+dtmBIhPHk0zgRUukHzZ/kRueTJXoYYsclBaKcSMBWuGbOFXtioLpzTb5euw==",
      "license": "MIT",
      "dependencies": {
        "queue": "6.0.2"
      },
      "bin": {
        "image-size": "bin/image-size.js"
      },
      "engines": {
        "node": ">=16.x"
      }
    },
    "node_modules/immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==",
      "license": "MIT"
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/jiti": {
      "version": "2.6.1",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.6.1.tgz",
      "integrity": "sha512-ekilCSN1jwRvIbgeg/57YFh8qQDNbwDb9xT/qu2DAHbFFZUicIl4ygVaAvzveMhMVr3LnpSKTNnwt8PoOfmKhQ==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jiti": "lib/jiti-cli.mjs"
      }
    },
    "node_modules/jose": {
      "version": "4.15.9",
      "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
      "integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/semver": {
      "version": "7.7.3",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jszip": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
      "license": "(MIT OR GPL-3.0-or-later)",
      "dependencies": {
        "lie": "~3.3.0",
        "pako": "~1.0.2",
        "readable-stream": "~2.3.6",
        "setimmediate": "^1.0.5"
      }
    },
    "node_modules/jszip/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/jszip/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/jszip/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.1.tgz",
      "integrity": "sha512-hRF04fqJIP8Abbkq5NKGN0Bbr3JxlQ+qhZufXVr0DvujKy93ZCbXZMHDL4EOtodSbCWxOqR8MS1tXA5hwqCXDg==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwks-rsa": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-3.2.0.tgz",
      "integrity": "sha512-PwchfHcQK/5PSydeKCs1ylNym0w/SSv8a62DgHJ//7x2ZclCoinlsjAfDxAAbpoTPybOum/Jgy+vkvMmKz89Ww==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "^4.17.20",
        "@types/jsonwebtoken": "^9.0.4",
        "debug": "^4.3.4",
        "jose": "^4.15.4",
        "limiter": "^1.1.5",
        "lru-memoizer": "^2.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lie": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
      "license": "MIT",
      "dependencies": {
        "immediate": "~3.0.5"
      }
    },
    "node_modules/lightningcss": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.2.tgz",
      "integrity": "sha512-utfs7Pr5uJyyvDETitgsaqSyjCb2qNRAtuqUeWIAKztsOYdcACf2KtARYXg2pSvhkt+9NfoaNY7fxjl6nuMjIQ==",
      "dev": true,
      "license": "MPL-2.0",
      "dependencies": {
        "detect-libc": "^2.0.3"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      },
      "optionalDependencies": {
        "lightningcss-android-arm64": "1.30.2",
        "lightningcss-darwin-arm64": "1.30.2",
        "lightningcss-darwin-x64": "1.30.2",
        "lightningcss-freebsd-x64": "1.30.2",
        "lightningcss-linux-arm-gnueabihf": "1.30.2",
        "lightningcss-linux-arm64-gnu": "1.30.2",
        "lightningcss-linux-arm64-musl": "1.30.2",
        "lightningcss-linux-x64-gnu": "1.30.2",
        "lightningcss-linux-x64-musl": "1.30.2",
        "lightningcss-win32-arm64-msvc": "1.30.2",
        "lightningcss-win32-x64-msvc": "1.30.2"
      }
    },
    "node_modules/lightningcss-android-arm64": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-android-arm64/-/lightningcss-android-arm64-1.30.2.tgz",
      "integrity": "sha512-BH9sEdOCahSgmkVhBLeU7Hc9DWeZ1Eb6wNS6Da8igvUwAe0sqROHddIlvU06q3WyXVEOYDZ6ykBZQnjTbmo4+A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-darwin-arm64": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.30.2.tgz",
      "integrity": "sha512-ylTcDJBN3Hp21TdhRT5zBOIi73P6/W0qwvlFEk22fkdXchtNTOU4Qc37SkzV+EKYxLouZ6M4LG9NfZ1qkhhBWA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-darwin-x64": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.30.2.tgz",
      "integrity": "sha512-oBZgKchomuDYxr7ilwLcyms6BCyLn0z8J0+ZZmfpjwg9fRVZIR5/GMXd7r9RH94iDhld3UmSjBM6nXWM2TfZTQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-freebsd-x64": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.30.2.tgz",
      "integrity": "sha512-c2bH6xTrf4BDpK8MoGG4Bd6zAMZDAXS569UxCAGcA7IKbHNMlhGQ89eRmvpIUGfKWNVdbhSbkQaWhEoMGmGslA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm-gnueabihf": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.30.2.tgz",
      "integrity": "sha512-eVdpxh4wYcm0PofJIZVuYuLiqBIakQ9uFZmipf6LF/HRj5Bgm0eb3qL/mr1smyXIS1twwOxNWndd8z0E374hiA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm64-gnu": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.30.2.tgz",
      "integrity": "sha512-UK65WJAbwIJbiBFXpxrbTNArtfuznvxAJw4Q2ZGlU8kPeDIWEX1dg3rn2veBVUylA2Ezg89ktszWbaQnxD/e3A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-arm64-musl": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.30.2.tgz",
      "integrity": "sha512-5Vh9dGeblpTxWHpOx8iauV02popZDsCYMPIgiuw97OJ5uaDsL86cnqSFs5LZkG3ghHoX5isLgWzMs+eD1YzrnA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-x64-gnu": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.30.2.tgz",
      "integrity": "sha512-Cfd46gdmj1vQ+lR6VRTTadNHu6ALuw2pKR9lYq4FnhvgBc4zWY1EtZcAc6EffShbb1MFrIPfLDXD6Xprbnni4w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-linux-x64-musl": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.30.2.tgz",
      "integrity": "sha512-XJaLUUFXb6/QG2lGIW6aIk6jKdtjtcffUT0NKvIqhSBY3hh9Ch+1LCeH80dR9q9LBjG3ewbDjnumefsLsP6aiA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-win32-arm64-msvc": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.30.2.tgz",
      "integrity": "sha512-FZn+vaj7zLv//D/192WFFVA0RgHawIcHqLX9xuWiQt7P0PtdFEVaxgF9rjM/IRYHQXNnk61/H/gb2Ei+kUQ4xQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/lightningcss-win32-x64-msvc": {
      "version": "1.30.2",
      "resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.2.tgz",
      "integrity": "sha512-5g1yc73p+iAkid5phb4oVFMB45417DkRevRbt/El/gKXJk4jid+vPFF/AXbxn05Aky8PapwzZrdJShv5C0avjw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MPL-2.0",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 12.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/limiter": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
      "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT"
    },
    "node_modules/lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/lru-memoizer": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.3.0.tgz",
      "integrity": "sha512-GXn7gyHAMhO13WSKrIiNfztwxodVsP8IoZ3XfrJV4yH2x0/OeTO/FIaAHTY5YekdGgW94njfuKmyyt1E0mR6Ug==",
      "license": "MIT",
      "dependencies": {
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "6.0.0"
      }
    },
    "node_modules/lru-memoizer/node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lru-memoizer/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/lucide-react": {
      "version": "0.548.0",
      "resolved": "https://registry.npmjs.org/lucide-react/-/lucide-react-0.548.0.tgz",
      "integrity": "sha512-63b16z63jM9yc1MwxajHeuu0FRZFsDtljtDjYm26Kd86UQ5HQzu9ksEtoUUw4RBuewodw/tGFmvipePvRsKeDA==",
      "license": "ISC",
      "peerDependencies": {
        "react": "^16.5.1 || ^17.0.0 || ^18.0.0 || ^19.0.0"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.21",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.21.tgz",
      "integrity": "sha512-vd2F4YUyEXKGcLHoq+TEyCjxueSeHnFxyyjNp80yg0XV4vUhnDer/lvvlqM/arB5bXQN5K2/3oinyCRyx8T2CQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/motion-dom": {
      "version": "12.23.23",
      "resolved": "https://registry.npmjs.org/motion-dom/-/motion-dom-12.23.23.tgz",
      "integrity": "sha512-n5yolOs0TQQBRUFImrRfs/+6X4p3Q4n1dUEqt/H58Vx7OW6RF+foWEgmTVDhIWJIMXOuNNL0apKH2S16en9eiA==",
      "license": "MIT",
      "dependencies": {
        "motion-utils": "^12.23.6"
      }
    },
    "node_modules/motion-utils": {
      "version": "12.23.6",
      "resolved": "https://registry.npmjs.org/motion-utils/-/motion-utils-12.23.6.tgz",
      "integrity": "sha512-eAWoPgr4eFEOFfg2WjIsMoqJTW6Z8MTUCgn/GZ3VRpClWBdnbjryiA3ZSNLyxCTmCQx4RmYX6jX1iWHbenUPNQ==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.26",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.26.tgz",
      "integrity": "sha512-S2M9YimhSjBSvYnlr5/+umAnPHE++ODwt5e2Ij6FoX45HA/s4vHdkDx1eax2pAPeAOqu4s9b7ppahsyEFdVqQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/openai": {
      "version": "6.7.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-6.7.0.tgz",
      "integrity": "sha512-mgSQXa3O/UXTbA8qFzoa7aydbXBJR5dbLQXCRapAOtoNT+v69sLdKMZzgiakpqhclRnhPggPAXoniVGn2kMY2A==",
      "license": "Apache-2.0",
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.25 || ^4.0"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
      "license": "(MIT AND Zlib)"
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/pptxgenjs": {
      "version": "3.12.0",
      "resolved": "https://registry.npmjs.org/pptxgenjs/-/pptxgenjs-3.12.0.tgz",
      "integrity": "sha512-ZozkYKWb1MoPR4ucw3/aFYlHkVIJxo9czikEclcUVnS4Iw/M+r+TEwdlB3fyAWO9JY1USxJDt0Y0/r15IR/RUA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "^18.7.3",
        "https": "^1.0.0",
        "image-size": "^1.0.0",
        "jszip": "^3.7.1"
      }
    },
    "node_modules/pptxgenjs/node_modules/@types/node": {
      "version": "18.19.130",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.130.tgz",
      "integrity": "sha512-GRaXQx6jGfL8sKfaIDD6OupbIHBr9jv7Jnaml9tB7l4v068PAOXqfcujMMo5PhbIs6ggR1XODELqahT2R8v0fg==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/pptxgenjs/node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/proto3-json-serializer": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-2.0.2.tgz",
      "integrity": "sha512-SAzp/O4Yh02jGdRc+uIrGoe87dkN/XtwxfZ4ZyafJHymd79ozp5VG5nyZ7ygqPM5+cpLDjjGnYFUkngonyDPOQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "protobufjs": "^7.2.5"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/protobufjs": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.4.tgz",
      "integrity": "sha512-CvexbZtbov6jW2eXAvLukXjXUW1TzFaivC46BpWc/3BpcCysb5Vffu+B3XHMm8lVEuy2Mm4XGex8hBSg1yapPg==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/queue/-/queue-6.0.2.tgz",
      "integrity": "sha512-iHZWu+q3IdFZFX36ro/lKBkSvfkztY5Y7HMiPlOUjhupPcG2JMfst2KKEpu5XndviX/3UhFbRngUPNKtgvtZiA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "~2.0.3"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.2.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.2.0.tgz",
      "integrity": "sha512-tmbWg6W31tQLeB5cdIBOicJDJRR2KzXsV7uSK9iNfLWQ5bIZfxuPEHp7M8wiHyHnn0DD1i7w3Zmin0FtkrwoCQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.2.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.2.0.tgz",
      "integrity": "sha512-UlbRu4cAiGaIewkPyiRGJk0imDN2T3JjieT6spoL2UeSf5od4n5LB/mQ4ejmxhCFT1tYe8IvaFulzynWovsEFQ==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.27.0"
      },
      "peerDependencies": {
        "react": "^19.2.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.18.0.tgz",
      "integrity": "sha512-QgT5//D3jfjJb6Gsjxv0Slpj23ip+HtOpnNgnb2S5zU3CB26G/IDPGoy4RJB42wzFE46DRsstbW6tKHoKbhAxw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/resolve-pkg-maps": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
      "integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-7.0.2.tgz",
      "integrity": "sha512-dUOvLMJ0/JJYEn8NrpOaGNE7X3vpI5XlZS/u0ANjqtcZVKnIxP7IgCFwrKTxENw29emmwug53awKtaMm4i9g5w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/request": "^2.48.8",
        "extend": "^3.0.2",
        "teeny-request": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.52.5",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.52.5.tgz",
      "integrity": "sha512-3GuObel8h7Kqdjt0gxkEzaifHTqLVW56Y/bjN7PSQtkKr0w3V/QYSdt6QWYtd7A1xUtYQigtdUfgj1RvWVtorw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.52.5",
        "@rollup/rollup-android-arm64": "4.52.5",
        "@rollup/rollup-darwin-arm64": "4.52.5",
        "@rollup/rollup-darwin-x64": "4.52.5",
        "@rollup/rollup-freebsd-arm64": "4.52.5",
        "@rollup/rollup-freebsd-x64": "4.52.5",
        "@rollup/rollup-linux-arm-gnueabihf": "4.52.5",
        "@rollup/rollup-linux-arm-musleabihf": "4.52.5",
        "@rollup/rollup-linux-arm64-gnu": "4.52.5",
        "@rollup/rollup-linux-arm64-musl": "4.52.5",
        "@rollup/rollup-linux-loong64-gnu": "4.52.5",
        "@rollup/rollup-linux-ppc64-gnu": "4.52.5",
        "@rollup/rollup-linux-riscv64-gnu": "4.52.5",
        "@rollup/rollup-linux-riscv64-musl": "4.52.5",
        "@rollup/rollup-linux-s390x-gnu": "4.52.5",
        "@rollup/rollup-linux-x64-gnu": "4.52.5",
        "@rollup/rollup-linux-x64-musl": "4.52.5",
        "@rollup/rollup-openharmony-arm64": "4.52.5",
        "@rollup/rollup-win32-arm64-msvc": "4.52.5",
        "@rollup/rollup-win32-ia32-msvc": "4.52.5",
        "@rollup/rollup-win32-x64-gnu": "4.52.5",
        "@rollup/rollup-win32-x64-msvc": "4.52.5",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/rss-parser": {
      "version": "3.13.0",
      "resolved": "https://registry.npmjs.org/rss-parser/-/rss-parser-3.13.0.tgz",
      "integrity": "sha512-7jWUBV5yGN3rqMMj7CZufl/291QAhvrrGpDNE4k/02ZchL0npisiYYqULF71jCEKoIiHvK/Q2e6IkDwPziT7+w==",
      "license": "MIT",
      "dependencies": {
        "entities": "^2.0.3",
        "xml2js": "^0.5.0"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/sax": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
      "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg==",
      "license": "ISC"
    },
    "node_modules/scheduler": {
      "version": "0.27.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.27.0.tgz",
      "integrity": "sha512-eNv+WrVbKu1f3vbYJT/xtiF5syA5HPIMtf9IgY/nKg0sWqzAUEvqY/xm7OcZc/qafLx/iO9FgOmeSAp4v5ti/Q==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "stubs": "^3.0.0"
      }
    },
    "node_modules/stream-shift": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.3.tgz",
      "integrity": "sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strnum": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.1.2.tgz",
      "integrity": "sha512-vrN+B7DBIoTTZjnPNewwhx6cBA/H+IS7rfW68n7XxC1y7uoiGQBxaKzqucGUgavX15dJgiGztLJ8vxuEzwqBdA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        }
      ],
      "license": "MIT",
      "optional": true
    },
    "node_modules/stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tailwindcss": {
      "version": "4.1.16",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.16.tgz",
      "integrity": "sha512-pONL5awpaQX4LN5eiv7moSiSPd/DLDzKVRJz8Q9PgzmAdd1R4307GQS2ZpfiN7ZmekdQrfhZZiSE5jkLR4WNaA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tapable": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.3.0.tgz",
      "integrity": "sha512-g9ljZiwki/LfxmQADO3dEY1CbpmXT5Hm2fJ+QaGKwSXUylMybePR7/67YW7jOrrvjEgL1Fmz5kzyAjWVWLlucg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/teeny-request": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-9.0.0.tgz",
      "integrity": "sha512-resvxdc6Mgb7YEThw6G6bExlXKkv6+YbuzGg9xuXxSgxJF7Ozs+o8Y9+2R3sArdWdW8nOokoQb1yrpFB0pQK2g==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.9",
        "stream-events": "^1.0.5",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/teeny-request/node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/teeny-request/node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/teeny-request/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/terser": {
      "version": "5.44.0",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.44.0.tgz",
      "integrity": "sha512-nIVck8DK+GM/0Frwd+nIhZ84pR/BX7rmXMfYwyg+Sri5oGVE99/E3KvXqpC2xHFxyqXyGHTKBSioxxplrO4I4w==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.15.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.15",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.15.tgz",
      "integrity": "sha512-j2Zq4NyQYG5XMST4cbs02Ak8iJUdxRM0XI5QyxXuZOzKOINmWurp3smXu3y5wDcJrptwpSjgXHzIQxR0omXljQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/tsx": {
      "version": "4.20.6",
      "resolved": "https://registry.npmjs.org/tsx/-/tsx-4.20.6.tgz",
      "integrity": "sha512-ytQKuwgmrrkDTFP4LjR0ToE2nqgy886GpvRSpU0JAnrdBYppuY5rLkRUYPU1yCryb24SsKBTL/hlDQAEFVwtZg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "~0.25.0",
        "get-tsconfig": "^4.7.5"
      },
      "bin": {
        "tsx": "dist/cli.mjs"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.3.tgz",
      "integrity": "sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.46.2",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.46.2.tgz",
      "integrity": "sha512-vbw8bOmiuYNdzzV3lsiWv6sRwjyuKJMQqWulBOU7M0RrxedXledX8G8kBbQeiOYDnTfiXz0Y4081E1QMNB6iQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.46.2",
        "@typescript-eslint/parser": "8.46.2",
        "@typescript-eslint/typescript-estree": "8.46.2",
        "@typescript-eslint/utils": "8.46.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/undici-types": {
      "version": "7.16.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.16.0.tgz",
      "integrity": "sha512-Zz+aZWSj8LE6zoxD+xrjh4VfkIG8Ya6LvYkZqtUQGJPZjYl53ypCaUwWqo7eI0x66KBGeRo+mlBEkMSeSZ38Nw==",
      "license": "MIT"
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.4.tgz",
      "integrity": "sha512-q0SPT4xyU84saUX+tomz1WLkxUbuaJnR1xWt17M7fJtEJigJeWUNGUqrauFXsHnqev9y9JTRGwk13tFBuKby4A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/uuid": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-11.1.0.tgz",
      "integrity": "sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/esm/bin/uuid"
      }
    },
    "node_modules/vite": {
      "version": "7.1.12",
      "resolved": "https://registry.npmjs.org/vite/-/vite-7.1.12.tgz",
      "integrity": "sha512-ZWyE8YXEXqJrrSLvYgrRP7p62OziLW7xI5HYGWFzOvupfAlrLvURSzv/FyGyy0eidogEM3ujU+kUG1zuHgb6Ug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3",
        "postcss": "^8.5.6",
        "rollup": "^4.43.0",
        "tinyglobby": "^0.2.15"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^20.19.0 || >=22.12.0",
        "jiti": ">=1.21.0",
        "less": "^4.0.0",
        "lightningcss": "^1.21.0",
        "sass": "^1.70.0",
        "sass-embedded": "^1.70.0",
        "stylus": ">=0.54.8",
        "sugarss": "^5.0.0",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/web-vitals": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/web-vitals/-/web-vitals-4.2.4.tgz",
      "integrity": "sha512-r4DIlprAGwJ7YM11VZp4R884m0Vmgr6EAKe3P+kO0PPj3Unqyvv59rczf6UiGcb9Z8QxZVcqKNwv/g0WNdWwsw==",
      "license": "Apache-2.0"
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/xml2js": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.5.0.tgz",
      "integrity": "sha512-drPFnkQJik/O+uPKpqSgr22mpuFHqKdbS835iAQrUC73L2F5WkboIRd63ai/2Yg6I1jzifPFKH2NTK+cfglkIA==",
      "license": "MIT",
      "dependencies": {
        "sax": ">=0.6.0",
        "xmlbuilder": "~11.0.0"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/xmlbuilder": {
      "version": "11.0.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}



================================================================================
FILE: package.json
================================================================================

{
  "name": "carriersignal",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  },
  "dependencies": {
    "dotenv": "^17.2.3",
    "firebase": "^12.4.0",
    "firebase-admin": "^13.5.0",
    "framer-motion": "^12.23.24",
    "lucide-react": "^0.548.0",
    "openai": "^6.7.0",
    "pptxgenjs": "^3.12.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "rss-parser": "^3.13.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@tailwindcss/vite": "^4.1.16",
    "@testing-library/jest-dom": "^6.1.5",
    "@testing-library/react": "^14.1.2",
    "@testing-library/user-event": "^14.5.1",
    "@types/jest": "^29.5.11",
    "@types/node": "^24.6.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "tailwindcss": "^4.1.16",
    "terser": "^5.44.0",
    "ts-jest": "^29.1.1",
    "tsx": "^4.19.2",
    "typescript": "~5.9.3",
    "typescript-eslint": "^8.45.0",
    "vite": "^7.1.7"
  }
}



================================================================================
FILE: performance-budget.json
================================================================================

{
  "bundles": [
    {
      "name": "main",
      "maxSize": "400kb"
    },
    {
      "name": "vendor",
      "maxSize": "300kb"
    },
    {
      "name": "react",
      "maxSize": "150kb"
    }
  ],
  "metrics": [
    {
      "name": "LCP",
      "maxValue": 2500,
      "unit": "ms"
    },
    {
      "name": "FCP",
      "maxValue": 1800,
      "unit": "ms"
    },
    {
      "name": "CLS",
      "maxValue": 0.1,
      "unit": "score"
    },
    {
      "name": "TTI",
      "maxValue": 3500,
      "unit": "ms"
    },
    {
      "name": "TBT",
      "maxValue": 300,
      "unit": "ms"
    }
  ],
  "lighthouse": {
    "performance": 90,
    "accessibility": 90,
    "best-practices": 90,
    "seo": 90
  }
}




================================================================================
FILE: public/manifest.json
================================================================================

{
  "name": "InsurNews - P&C Insurance News",
  "short_name": "InsurNews",
  "description": "Real-time P&C insurance news, regulatory updates, and catastrophe tracking with AI-powered insights",
  "start_url": "/",
  "scope": "/",
  "display": "standalone",
  "orientation": "portrait-primary",
  "background_color": "#ffffff",
  "theme_color": "#2563eb",
  "icons": [
    {
      "src": "/icon-192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "/icon-512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "/icon-192-maskable.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/icon-512-maskable.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable"
    }
  ],
  "screenshots": [
    {
      "src": "/screenshot-540.png",
      "sizes": "540x720",
      "type": "image/png",
      "form_factor": "narrow"
    },
    {
      "src": "/screenshot-1280.png",
      "sizes": "1280x720",
      "type": "image/png",
      "form_factor": "wide"
    }
  ],
  "categories": ["news", "business", "productivity"],
  "shortcuts": [
    {
      "name": "News Feed",
      "short_name": "Feed",
      "description": "View the latest P&C insurance news",
      "url": "/?view=feed",
      "icons": [
        {
          "src": "/icon-96.png",
          "sizes": "96x96",
          "type": "image/png"
        }
      ]
    },
    {
      "name": "Dashboard",
      "short_name": "Dashboard",
      "description": "View insights and analytics",
      "url": "/?view=dashboard",
      "icons": [
        {
          "src": "/icon-96.png",
          "sizes": "96x96",
          "type": "image/png"
        }
      ]
    },
    {
      "name": "Bookmarks",
      "short_name": "Bookmarks",
      "description": "View saved articles",
      "url": "/?view=bookmarks",
      "icons": [
        {
          "src": "/icon-96.png",
          "sizes": "96x96",
          "type": "image/png"
        }
      ]
    }
  ],
  "share_target": {
    "action": "/share",
    "method": "POST",
    "enctype": "multipart/form-data",
    "params": {
      "title": "title",
      "text": "text",
      "url": "url"
    }
  }
}




================================================================================
FILE: public/sw.js
================================================================================

// CarrierSignal Service Worker
// Provides offline support and caching strategy

const CACHE_NAME = 'carriersignal-v1';
const RUNTIME_CACHE = 'carriersignal-runtime-v1';
const ASSETS_TO_CACHE = [
  '/',
  '/index.html',
  '/manifest.json',
];

// Install event - cache essential assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(ASSETS_TO_CACHE);
    })
  );
  self.skipWaiting();
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME && cacheName !== RUNTIME_CACHE) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// Fetch event - network first, fallback to cache
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Skip external requests (Firebase, APIs)
  if (url.origin !== self.location.origin) {
    return;
  }

  // Cache-first for static assets (CSS, JS, images)
  if (
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'image' ||
    request.destination === 'font'
  ) {
    event.respondWith(
      caches.match(request).then((response) => {
        if (response) {
          return response;
        }
        return fetch(request).then((response) => {
          if (!response || response.status !== 200 || response.type === 'error') {
            return response;
          }
          const responseToCache = response.clone();
          caches.open(RUNTIME_CACHE).then((cache) => {
            cache.put(request, responseToCache);
          });
          return response;
        });
      })
    );
    return;
  }

  // Network-first for HTML and API calls
  event.respondWith(
    fetch(request)
      .then((response) => {
        if (!response || response.status !== 200 || response.type === 'error') {
          return response;
        }
        const responseToCache = response.clone();
        caches.open(RUNTIME_CACHE).then((cache) => {
          cache.put(request, responseToCache);
        });
        return response;
      })
      .catch(() => {
        return caches.match(request).then((response) => {
          if (response) {
            return response;
          }
          // Return offline page if available
          return caches.match('/index.html');
        });
      })
  );
});

// Handle messages from clients
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});




================================================================================
FILE: src/App.tsx
================================================================================

import { useEffect, useState } from "react";
import { Header } from "./components/Header";
import { SearchFirst } from "./components/SearchFirst";
import { BriefPanel } from "./components/BriefPanel";
import { Dashboard } from "./components/Dashboard";
import { MobileNav } from "./components/MobileNav";
import { SkeletonGrid } from "./components/SkeletonLoader";
import { CommandPalette } from "./components/CommandPalette";
import { Bookmarks } from "./components/Bookmarks";
import { SettingsPanel } from "./components/SettingsPanel";
import { useInfiniteScroll } from "./hooks/useInfiniteScroll";
import { useArticles } from "./hooks/useArticles";
import { useUI } from "./context/UIContext";
import { ErrorBoundary } from "./utils/errorBoundary";
import { logger } from "./utils/logger";
import type { Article } from "./types";
import "./index.css";

function AppContent() {
  // Use context for UI state
  const { view, setView, sortMode, setSortMode, isPaletteOpen, setIsPaletteOpen, quickReadArticleUrl, setQuickReadArticleUrl } = useUI();

  // Use custom hook for articles
  const { articles, loading, isLoadingMore, error, hasMore, loadMore } = useArticles({
    pageSize: 20,
    sortBy: 'createdAt',
    sortOrder: 'desc',
  });

  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);

  // Infinite scroll hook
  const { sentinelRef } = useInfiniteScroll({
    onLoadMore: loadMore,
    isLoading: isLoadingMore,
    hasMore,
    threshold: 0.1,
    rootMargin: '200px',
  });

  // Log errors
  useEffect(() => {
    if (error) {
      logger.error('App', 'Article loading error', { error });
    }
  }, [error]);

  // Keyboard shortcuts for Command-K and Quick Read
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Command-K or Ctrl-K to open palette
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        setIsPaletteOpen(!isPaletteOpen);
      }
      // Escape to close palette or quick read
      if (e.key === 'Escape') {
        setIsPaletteOpen(false);
        setQuickReadArticleUrl(null);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isPaletteOpen, setIsPaletteOpen, setQuickReadArticleUrl]);

  // Render
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 flex flex-col">
        <Header isLoading={true} />
        <SkeletonGrid />
      </div>
    );
  }

  return (
    <div className="min-h-screen w-full max-w-full overflow-x-hidden bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 flex flex-col">
      {/* Professional Header */}
      <Header isLoading={false} />

      {/* Main Content Area */}
      {view === 'feed' ? (
        <div className="flex-1 flex gap-0 overflow-hidden w-full max-w-full">
          {/* Left: Search Results - Full Width */}
          <div className="flex-1 overflow-y-auto w-full max-w-full overflow-x-hidden">
            <SearchFirst
              articles={articles}
              onArticleSelect={setSelectedArticle}
              selectedArticle={selectedArticle}
              sortMode={sortMode}
              onSortChange={setSortMode}
              isLoadingMore={isLoadingMore}
              hasMore={hasMore}
              sentinelRef={sentinelRef}
            />
          </div>
        </div>
      ) : view === 'dashboard' ? (
        <div className="flex-1 overflow-y-auto">
          <Dashboard articles={articles} />
        </div>
      ) : view === 'bookmarks' ? (
        <div className="flex-1 flex flex-col bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20">
          <Bookmarks onArticleSelect={setSelectedArticle} />
        </div>
      ) : view === 'settings' ? (
        <div className="flex-1 flex flex-col bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20">
          <SettingsPanel onSortChange={setSortMode} />
        </div>
      ) : null}

      {/* Article Details Modal - Desktop and Mobile */}
      {selectedArticle && (
        <div
          className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center lg:items-end p-4 lg:p-0 animate-fadeIn overflow-hidden"
          onClick={() => setSelectedArticle(null)}
        >
          <div
            className="w-full lg:w-full lg:rounded-t-3xl lg:max-h-[90vh] max-w-2xl lg:max-w-none liquid-glass-ultra rounded-3xl lg:rounded-t-3xl max-h-[90vh] border border-[#C7D2E1]/30 lg:border-t lg:border-l-0 lg:border-r-0 lg:border-b-0 animate-slideInUp lg:animate-slideInUp flex flex-col"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="overflow-y-auto flex-1">
              <BriefPanel article={selectedArticle} />
            </div>
          </div>
        </div>
      )}

      {/* Quick Read Modal */}
      {quickReadArticleUrl && (
        <div
          className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4 animate-fadeIn overflow-hidden"
          onClick={() => setQuickReadArticleUrl(null)}
        >
          <div
            className="w-full max-w-2xl liquid-glass-ultra rounded-3xl max-h-[90vh] shadow-2xl border border-[#C7D2E1]/30 animate-scaleIn flex flex-col"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="overflow-y-auto flex-1">
              {/* Quick Read content will be rendered here by QuickReadModal component */}
              <div className="p-6 text-center text-[#64748B]">
                <p>Quick Read feature coming soon...</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Command Palette */}
      <CommandPalette
        isOpen={isPaletteOpen}
        onClose={() => setIsPaletteOpen(false)}
        articles={articles}
        onArticleSelect={setSelectedArticle}
      />

      {/* Mobile Navigation */}
      <MobileNav onViewChange={setView} currentView={view} />
    </div>
  );
}

export default function App() {
  return (
    <ErrorBoundary>
      <AppContent />
    </ErrorBoundary>
  );
}



================================================================================
FILE: src/components/ArticleCard.tsx
================================================================================

/**
 * Enhanced Article Card Component
 * Displays article with liquid glass styling, animations, and interactions
 * Features: Micro-animations, accessibility, responsive design, loading states
 */

import { Bookmark, Share2, TrendingUp, AlertCircle } from 'lucide-react';
import { useState } from 'react';
import type { Article } from '../types';
import { Badge } from './primitives/Badge';
import { GlassCard } from './primitives/GlassCard';
import { Tooltip } from './primitives/Tooltip';
import { getTimeAgo } from '../utils/validation';

interface ArticleCardProps {
  article: Article;
  isSelected?: boolean;
  isLoading?: boolean;
  onClick?: () => void;
  onBookmark?: () => void;
  onShare?: () => void;
  ariaLabel?: string;
}

export function ArticleCard({
  article,
  isSelected = false,
  isLoading = false,
  onClick,
  onBookmark,
  onShare,
  ariaLabel,
}: ArticleCardProps) {
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [isSharing, setIsSharing] = useState(false);

  const score = article.smartScore || article.aiScore || 0;
  const scoreColor = score >= 75 ? 'text-green-600' : score >= 50 ? 'text-amber-600' : 'text-red-600';

  // RAG quality indicator
  const ragQualityScore = typeof (article as unknown as Record<string, unknown>).ragQualityScore === 'number'
    ? ((article as unknown as Record<string, unknown>).ragQualityScore as number)
    : 100;
  const hasQualityIssues = ragQualityScore < 70;

  const handleBookmark = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsBookmarked(!isBookmarked);
    onBookmark?.();
  };

  const handleShare = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsSharing(true);
    onShare?.();
    setTimeout(() => setIsSharing(false), 1000);
  };

  return (
    <GlassCard
      variant={isSelected ? 'premium' : 'default'}
      interactive
      onClick={onClick}
      className={`group cursor-pointer transition-all duration-300 hover:shadow-lg hover:shadow-[#5AA6FF]/10 ${
        isSelected ? 'ring-2 ring-[#5AA6FF] shadow-lg shadow-[#5AA6FF]/20' : 'hover:ring-1 hover:ring-[#5AA6FF]/30'
      } ${isLoading ? 'opacity-60 pointer-events-none' : ''} animate-fadeIn`}
      role="article"
      aria-label={ariaLabel || `Article: ${article.title}`}
      aria-selected={isSelected}
    >
      <div className="space-y-3">
        {/* Header with source and date */}
        <div className="flex items-start justify-between gap-2">
          <div className="flex-1 min-w-0">
            <p className="text-xs font-semibold text-[#5AA6FF] uppercase tracking-wide truncate group-hover:text-[#3B82F6] transition-colors duration-200">
              {article.source}
            </p>
            <p className="text-xs text-[#94A3B8] mt-0.5 group-hover:text-[#64748B] transition-colors duration-200">
              {article.publishedAt ? getTimeAgo(article.publishedAt) : 'Recently'}
            </p>
          </div>
          {score > 0 && (
            <Tooltip content={`Relevance Score: ${Math.round(score)}`}>
              <div className={`flex items-center gap-1 px-2 py-1 rounded-lg bg-[#E8F2FF] ${scoreColor} transition-all duration-200 group-hover:shadow-md group-hover:shadow-[#5AA6FF]/20 animate-scoreGlow`}>
                <TrendingUp size={14} className="group-hover:scale-110 transition-transform duration-200" />
                <span className="text-xs font-semibold">{Math.round(score)}</span>
              </div>
            </Tooltip>
          )}
        </div>

        {/* Title */}
        <h3 className="text-sm font-semibold text-[#0F172A] line-clamp-2 group-hover:text-[#5AA6FF] transition-colors duration-200">
          {article.title}
        </h3>

        {/* Description */}
        {article.description && (
          <p className="text-xs text-[#64748B] line-clamp-2 group-hover:text-[#475569] transition-colors duration-200">
            {article.description}
          </p>
        )}

        {/* Tags with staggered animation */}
        {article.tags && (
          <div className="flex flex-wrap gap-1.5">
            {article.tags.perils && article.tags.perils.slice(0, 2).map((peril, idx) => (
              <Badge key={peril} variant="warning" size="sm" className="animate-slideInUp" style={{ animationDelay: `${idx * 50}ms` }}>
                {peril}
              </Badge>
            ))}
            {article.tags.lob && article.tags.lob.slice(0, 1).map((lob, idx) => (
              <Badge key={lob} variant="info" size="sm" className="animate-slideInUp" style={{ animationDelay: `${(idx + 2) * 50}ms` }}>
                {lob}
              </Badge>
            ))}
            {article.tags.regions && article.tags.regions.slice(0, 1).map((region, idx) => (
              <Badge key={region} variant="default" size="sm" className="animate-slideInUp" style={{ animationDelay: `${(idx + 3) * 50}ms` }}>
                {region}
              </Badge>
            ))}
          </div>
        )}

        {/* Quality indicator */}
        {hasQualityIssues && (
          <Tooltip content={`RAG Quality: ${ragQualityScore}/100`}>
            <div className="flex items-center gap-1 text-xs text-amber-600 group-hover:text-amber-700 transition-colors duration-200">
              <AlertCircle size={14} className="group-hover:animate-pulse" />
              <span>Quality: {ragQualityScore}/100</span>
            </div>
          </Tooltip>
        )}

        {/* Action buttons with enhanced hover effects */}
        <div className="flex items-center gap-2 pt-2 border-t border-[#C7D2E1]/20 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
          {onBookmark && (
            <Tooltip content={isBookmarked ? 'Remove bookmark' : 'Bookmark article'}>
              <button
                onClick={handleBookmark}
                className={`p-1.5 rounded-lg transition-all duration-200 transform hover:scale-110 ${
                  isBookmarked
                    ? 'bg-[#5AA6FF] text-white shadow-md shadow-[#5AA6FF]/30'
                    : 'hover:bg-[#E8F2FF] text-[#64748B] hover:shadow-sm hover:shadow-[#5AA6FF]/20'
                }`}
                aria-label={isBookmarked ? 'Remove bookmark' : 'Bookmark article'}
                aria-pressed={isBookmarked}
              >
                <Bookmark size={16} fill={isBookmarked ? 'currentColor' : 'none'} />
              </button>
            </Tooltip>
          )}
          {onShare && (
            <Tooltip content="Share article">
              <button
                onClick={handleShare}
                disabled={isSharing}
                className={`p-1.5 rounded-lg transition-all duration-200 transform hover:scale-110 ${
                  isSharing
                    ? 'bg-green-100 text-green-600 shadow-md shadow-green-500/30'
                    : 'hover:bg-[#E8F2FF] text-[#64748B] hover:shadow-sm hover:shadow-[#5AA6FF]/20'
                }`}
                aria-label="Share article"
              >
                <Share2 size={16} />
              </button>
            </Tooltip>
          )}
        </div>
      </div>
    </GlassCard>
  );
}




================================================================================
FILE: src/components/Bookmarks.tsx
================================================================================

import { useEffect, useState } from 'react';
import { collection, query, where, onSnapshot, deleteDoc, doc } from 'firebase/firestore';
import { db } from '../firebase';
import { Bookmark, Trash2, ExternalLink, Calendar } from 'lucide-react';

interface BookmarkedArticle {
  id: string;
  url: string;
  title: string;
  source: string;
  clusterId?: string;
  savedAt: Date;
}

interface BookmarksProps {
  onArticleSelect?: (article: any) => void;
}

export function Bookmarks({ onArticleSelect }: BookmarksProps) {
  const [bookmarks, setBookmarks] = useState<BookmarkedArticle[]>([]);
  const [loading, setLoading] = useState(true);
  const [deviceId, setDeviceId] = useState<string>('');

  // Initialize device ID from localStorage
  useEffect(() => {
    let id = localStorage.getItem('carriersignal_device_id');
    if (!id) {
      id = `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('carriersignal_device_id', id);
    }
    setDeviceId(id);
  }, []);

  // Listen to bookmarks from Firestore
  useEffect(() => {
    if (!deviceId) return;

    const q = query(
      collection(db, 'bookmarks'),
      where('deviceId', '==', deviceId)
    );

    const unsubscribe = onSnapshot(
      q,
      (snapshot) => {
        const items = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          savedAt: doc.data().savedAt?.toDate?.() || new Date(),
        })) as BookmarkedArticle[];

        setBookmarks(items.sort((a, b) => b.savedAt.getTime() - a.savedAt.getTime()));
        setLoading(false);
      },
      (error) => {
        console.error('Error fetching bookmarks:', error);
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, [deviceId]);

  const handleRemoveBookmark = async (bookmarkId: string) => {
    try {
      await deleteDoc(doc(db, 'bookmarks', bookmarkId));
    } catch (error) {
      console.error('Error removing bookmark:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex-1 flex items-center justify-center p-6">
        <div className="text-center">
          <div className="w-12 h-12 rounded-full liquid-glass-premium flex items-center justify-center mx-auto mb-3 animate-pulse border border-[#5AA6FF]/30">
            <Bookmark size={24} className="text-[#5AA6FF]" />
          </div>
          <p className="text-[#64748B]">Loading bookmarks...</p>
        </div>
      </div>
    );
  }

  if (bookmarks.length === 0) {
    return (
      <div className="flex-1 flex items-center justify-center p-6">
        <div className="text-center">
          <div className="w-16 h-16 rounded-full liquid-glass-light flex items-center justify-center mx-auto mb-4 border border-[#C7D2E1]/30">
            <Bookmark size={32} className="text-[#D4DFE8]" />
          </div>
          <h3 className="text-lg font-semibold text-[#0F172A] mb-1">No bookmarks yet</h3>
          <p className="text-sm text-[#64748B]">Save articles to read them later</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 overflow-y-auto">
      <div className="p-4 space-y-3">
        {bookmarks.map(bookmark => (
          <div
            key={bookmark.id}
            className="p-4 rounded-lg border border-[#C7D2E1]/40 hover:border-[#5AA6FF]/60 hover:shadow-md transition-all duration-300 liquid-glass-light micro-glow hover:bg-gradient-to-r hover:from-[#F9FBFF]/20 hover:to-[#E8F2FF]/10"
          >
            <div className="flex items-start justify-between gap-3">
              <div className="flex-1 min-w-0">
                <button
                  onClick={() => onArticleSelect?.({url: bookmark.url, title: bookmark.title})}
                  className="text-left hover:text-[#5AA6FF] transition-colors"
                >
                  <h3 className="font-semibold text-[#0F172A] line-clamp-2 hover:underline">
                    {bookmark.title}
                  </h3>
                </button>
                <p className="text-sm text-[#64748B] mt-1">{bookmark.source}</p>
                <div className="flex items-center gap-2 mt-2 text-xs text-[#94A3B8]">
                  <Calendar size={12} />
                  <span>{bookmark.savedAt.toLocaleDateString()}</span>
                </div>
              </div>

              <div className="flex items-center gap-2 flex-shrink-0">
                <a
                  href={bookmark.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="p-2 hover:liquid-glass-premium rounded-lg transition-all border border-[#5AA6FF]/30 hover:border-[#5AA6FF]/60 hover:shadow-sm animate-iconGlow"
                  title="Open in new tab"
                >
                  <ExternalLink size={16} className="text-[#5AA6FF]" />
                </a>
                <button
                  onClick={() => handleRemoveBookmark(bookmark.id)}
                  className="p-2 hover:liquid-glass-premium rounded-lg transition-all border border-[#EF4444]/30 hover:border-[#EF4444]/60 hover:shadow-sm"
                  title="Remove bookmark"
                >
                  <Trash2 size={16} className="text-[#EF4444]" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}




================================================================================
FILE: src/components/BriefPanel.tsx
================================================================================

import { AlertTriangle, ExternalLink, Eye } from 'lucide-react';

interface Article {
  title: string;
  url: string;
  source: string;
  publishedAt?: string;
  bullets5?: string[];
  whyItMatters?: Record<string, string>;
  citations?: string[];
  impactScore?: number;
  impactBreakdown?: {
    market: number;
    regulatory: number;
    catastrophe: number;
    technology: number;
  };
  confidenceRationale?: string;
  leadQuote?: string;
  disclosure?: string;
  stormName?: string;
  regionsNormalized?: string[];
  companiesNormalized?: string[];
  tags?: {
    lob?: string[];
    perils?: string[];
    regulations?: string[];
  };
}

interface BriefPanelProps {
  article: Article | null;
  onReaderView?: (url: string) => void;
}

export function BriefPanel({
  article,
  onReaderView,
}: BriefPanelProps) {
  if (!article) {
    return (
      <div className="flex flex-col w-full lg:w-1/2 bg-white border-l border-[#C7D2E1]/30 p-6 items-center justify-center text-[#5AA6FF]" role="complementary" aria-label="Article details panel">
        <p className="text-sm font-medium">Select an article to view details</p>
      </div>
    );
  }

  const publishDate = article.publishedAt ? new Date(article.publishedAt).toLocaleDateString() : 'Unknown';
  const timeAgo = article.publishedAt ? getTimeAgo(new Date(article.publishedAt)) : '';

  return (
    <div className="flex flex-col w-full max-w-full lg:w-1/2 liquid-glass-ultra lg:border-l border-[#C7D2E1]/30 lg:overflow-y-auto overflow-x-hidden animate-slideInRight" role="complementary" aria-label="Article details panel">
      {/* Header with Title and Metadata */}
      <div className="sticky top-0 liquid-glass-premium border-b border-[#C7D2E1]/30 p-4 sm:p-6 shadow-sm z-10 w-full max-w-full overflow-x-hidden">
        <div className="flex items-start justify-between gap-3 mb-3">
          <h2 className="text-lg sm:text-xl font-bold text-[#0F172A] leading-tight break-words flex-1">{article.title}</h2>
          <div className="flex gap-2 flex-shrink-0">
            {onReaderView && (
              <button
                onClick={() => onReaderView(article.url)}
                className="p-2 rounded-lg hover:bg-[#E8F2FF] transition-colors"
                aria-label="Open reader view"
                title="Reader view"
              >
                <Eye size={18} className="text-[#5AA6FF]" />
              </button>
            )}
            <a
              href={article.url}
              target="_blank"
              rel="noopener noreferrer"
              className="p-2 rounded-lg hover:bg-[#E8F2FF] transition-colors"
              aria-label="Open original article"
              title="Open original"
            >
              <ExternalLink size={18} className="text-[#5AA6FF]" />
            </a>
          </div>
        </div>
        <div className="flex items-center gap-2 sm:gap-3 text-xs sm:text-sm text-[#64748B] flex-wrap w-full max-w-full overflow-x-hidden">
          <span className="inline-flex items-center gap-1.5 px-2 sm:px-3 py-1 sm:py-1.5 rounded-full liquid-glass-light text-[#5AA6FF] font-semibold text-xs truncate border border-[#5AA6FF]/30">
            <svg className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="truncate">{article.source}</span>
          </span>
          <span className="text-[#94A3B8] flex-shrink-0">•</span>
          <span className="flex-shrink-0">{publishDate}</span>
          {timeAgo && (
            <>
              <span className="text-[#94A3B8] flex-shrink-0">•</span>
              <span className="flex-shrink-0">{timeAgo}</span>
            </>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-4 sm:p-6 space-y-6 lg:overflow-y-auto w-full max-w-full overflow-x-hidden">
        {/* Lead Quote with Enhanced Styling */}
        {article.leadQuote && (
          <div className="liquid-glass-premium rounded-2xl border-l-4 border-[#5AA6FF] p-5 shadow-sm hover:shadow-lg transition-all duration-300 border border-[#5AA6FF]/40">
            <div className="flex items-start gap-3">
              <svg className="w-6 h-6 text-[#5AA6FF] flex-shrink-0 mt-1 animate-iconGlow" fill="currentColor" viewBox="0 0 24 24">
                <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h3.983v10h-9.983z" />
              </svg>
              <p className="text-base italic text-[#0F172A] leading-relaxed font-medium">{article.leadQuote}</p>
            </div>
          </div>
        )}

        {/* Storm Name Badge */}
        {article.stormName && (
          <div className="liquid-glass-premium rounded-xl px-5 py-3 border border-[#F59E0B]/50 flex items-center gap-2 hover:shadow-lg transition-all duration-300 hover:scale-105 w-fit">
            <AlertTriangle size={16} className="text-[#F59E0B]" />
            <p className="text-sm font-bold text-[#F59E0B]">{article.stormName}</p>
          </div>
        )}


        {/* AI-Generated Summary - Enhanced */}
        {article.bullets5 && article.bullets5.length > 0 && (
          <section className="space-y-4 p-5 liquid-glass-premium rounded-2xl border border-[#5AA6FF]/40 shadow-sm hover:shadow-md transition-all duration-300" aria-labelledby="summary-heading">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-full bg-gradient-primary flex items-center justify-center shadow-md animate-iconGlow">
                <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              </div>
              <h3 id="summary-heading" className="font-bold text-[#0F172A] text-base">AI-Generated Summary</h3>
            </div>
            <ul className="space-y-3">
              {article.bullets5.map((bullet, idx) => (
                <li key={idx} className="flex gap-3 text-sm text-[#0F172A] leading-relaxed hover:text-[#0F172A] transition-colors duration-300 hover:translate-x-1">
                  <span className="font-bold text-[#5AA6FF] flex-shrink-0 mt-0.5" aria-hidden="true">→</span>
                  <span className="flex-1">{bullet}</span>
                </li>
              ))}
            </ul>
          </section>
        )}

        {/* Why It Matters - Professional Insights */}
        {article.whyItMatters && Object.keys(article.whyItMatters).length > 0 && (
          <div className="space-y-4 p-5 bg-gradient-to-br from-[#E8F2FF] to-[#E8F2FF] rounded-2xl border border-[#5AA6FF]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2">
              <svg className="w-6 h-6 text-[#5AA6FF]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              <h3 className="font-bold text-[#0F172A] text-base">Why It Matters</h3>
            </div>
            <div className="space-y-3">
              {Object.entries(article.whyItMatters).map(([role, insight]) => (
                <div key={role} className="bg-white/60 rounded-xl p-3 hover:bg-white/80 transition-all duration-300">
                  <p className="text-xs font-bold text-[#5AA6FF] uppercase tracking-wider mb-1">{role}</p>
                  <p className="text-sm text-[#0F172A] leading-relaxed">{insight}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Confidence Rationale - Enhanced */}
        {article.confidenceRationale && (
          <div className="p-5 bg-gradient-to-br from-[#F9FBFF] to-[#E8F2FF] rounded-2xl border border-[#C7D2E1]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2 mb-3">
              <svg className="w-5 h-5 text-[#64748B]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-sm font-bold text-[#0F172A]">Confidence Rationale</p>
            </div>
            <p className="text-sm text-[#0F172A] leading-relaxed">{article.confidenceRationale}</p>
          </div>
        )}

        {/* Disclosure - Enhanced */}
        {article.disclosure && (
          <div className="p-5 bg-gradient-to-br from-[#FEF3C7] to-[#FEF3C7] rounded-2xl border border-[#F59E0B]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2 mb-3">
              <AlertTriangle size={18} className="text-[#F59E0B]" />
              <p className="text-sm font-bold text-[#F59E0B]">Disclosure</p>
            </div>
            <p className="text-sm text-[#F59E0B] leading-relaxed">{article.disclosure}</p>
          </div>
        )}

        {/* Tags - Enhanced Styling */}
        {article.tags && (
          <div className="space-y-4 p-5 bg-gradient-to-br from-[#E8F2FF] to-[#E8F2FF] rounded-2xl border border-[#5AA6FF]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-[#5AA6FF]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              <h3 className="font-bold text-[#0F172A] text-base">Tags</h3>
            </div>
            <div className="space-y-3">
              {article.tags.lob && article.tags.lob.length > 0 && (
                <div>
                  <p className="text-xs font-bold text-[#64748B] mb-2 uppercase tracking-wider">Lines of Business</p>
                  <div className="flex flex-wrap gap-2">
                    {article.tags.lob.map(tag => (
                      <span key={tag} className="tag-pill tag-lob hover:shadow-lg hover:scale-110 transition-all duration-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              {article.tags.perils && article.tags.perils.length > 0 && (
                <div>
                  <p className="text-xs font-bold text-[#64748B] mb-2 uppercase tracking-wider">Perils</p>
                  <div className="flex flex-wrap gap-2">
                    {article.tags.perils.map(tag => (
                      <span key={tag} className="tag-pill tag-peril hover:shadow-lg hover:scale-110 transition-all duration-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              {article.tags.regulations && article.tags.regulations.length > 0 && (
                <div>
                  <p className="text-xs font-bold text-[#64748B] mb-2 uppercase tracking-wider">Regulations</p>
                  <div className="flex flex-wrap gap-2">
                    {article.tags.regulations.map(tag => (
                      <span key={tag} className="tag-pill tag-regulation hover:shadow-lg hover:scale-110 transition-all duration-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}


      </div>
    </div>
  );
}

// Helper function for time ago
function getTimeAgo(date: Date): string {
  const now = new Date();
  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (seconds < 60) return 'just now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  if (seconds < 604800) return `${Math.floor(seconds / 86400)}d ago`;

  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
}




================================================================================
FILE: src/components/CommandPalette.tsx
================================================================================

import { useEffect, useState, useRef } from 'react';
import { Search, Loader, AlertCircle } from 'lucide-react';

interface Article {
  id?: string;
  title: string;
  url: string;
  source: string;
  bullets5?: string[];
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    companies?: string[];
    trends?: string[];
  };
}

interface CommandPaletteProps {
  isOpen: boolean;
  onClose: () => void;
  articles: Article[];
  onArticleSelect: (article: Article) => void;
}

export function CommandPalette({
  isOpen,
  onClose,
  articles,
  onArticleSelect,
}: CommandPaletteProps) {
  const [query, setQuery] = useState('');
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<Article[]>([]);
  const inputRef = useRef<HTMLInputElement>(null);

  // Focus input when palette opens
  useEffect(() => {
    if (isOpen) {
      setTimeout(() => inputRef.current?.focus(), 100);
    }
  }, [isOpen]);

  // Search articles
  useEffect(() => {
    if (!query.trim()) {
      setResults(articles.slice(0, 8));
      setSelectedIndex(0);
      return;
    }

    setIsLoading(true);
    const timer = setTimeout(() => {
      const queryLower = query.toLowerCase();
      const filtered = articles.filter(article =>
        article.title.toLowerCase().includes(queryLower) ||
        article.source.toLowerCase().includes(queryLower) ||
        article.bullets5?.some(b => b.toLowerCase().includes(queryLower)) ||
        article.tags?.companies?.some(c => c.toLowerCase().includes(queryLower)) ||
        article.tags?.trends?.some(t => t.toLowerCase().includes(queryLower))
      );
      setResults(filtered.slice(0, 8));
      setSelectedIndex(0);
      setIsLoading(false);
    }, 300);

    return () => clearTimeout(timer);
  }, [query, articles]);

  // Handle keyboard navigation
  const handleKeyDown = (e: React.KeyboardEvent) => {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedIndex(prev => (prev + 1) % results.length);
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedIndex(prev => (prev - 1 + results.length) % results.length);
        break;
      case 'Enter':
        e.preventDefault();
        if (results[selectedIndex]) {
          onArticleSelect(results[selectedIndex]);
          onClose();
        }
        break;
      case 'Escape':
        e.preventDefault();
        onClose();
        break;
      default:
        break;
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 bg-black/45 backdrop-blur-lg flex items-start justify-center pt-20"
      onClick={onClose}
    >
      <div
        className="w-full max-w-2xl liquid-glass-ultra rounded-2xl shadow-2xl overflow-hidden border border-[#C7D2E1]/40 animate-commandPaletteSlideIn"
        onClick={e => e.stopPropagation()}
      >
        {/* Search Input */}
        <div className="border-b border-[#C7D2E1]/30 p-4 liquid-glass-premium">
          <div className="flex items-center gap-3">
            <Search size={20} className="text-[#64748B] animate-iconGlow" />
            <input
              ref={inputRef}
              type="text"
              placeholder="Search articles, companies, trends..."
              value={query}
              onChange={e => setQuery(e.target.value)}
              onKeyDown={handleKeyDown}
              className="flex-1 bg-transparent text-lg outline-none text-[#0F172A] placeholder-[#94A3B8]"
            />
            {isLoading && <Loader size={20} className="text-[#5AA6FF] animate-spin" />}
          </div>
        </div>

        {/* Results */}
        <div className="max-h-96 overflow-y-auto">
          {results.length === 0 ? (
            <div className="p-8 text-center">
              <AlertCircle size={32} className="mx-auto text-[#D4DFE8] mb-2" />
              <p className="text-[#94A3B8]">No articles found</p>
            </div>
          ) : (
            <div className="divide-y divide-[#C7D2E1]/40">
              {results.map((article, idx) => (
                <button
                  key={article.id}
                  onClick={() => {
                    onArticleSelect(article);
                    onClose();
                  }}
                  className={`w-full text-left p-4 transition-all duration-200 ${
                    idx === selectedIndex
                      ? 'liquid-glass-premium border-l-4 border-[#5AA6FF] bg-gradient-to-r from-[#F9FBFF]/40 to-[#E8F2FF]/20'
                      : 'hover:liquid-glass-light hover:bg-gradient-to-r hover:from-[#F9FBFF]/20 hover:to-[#E8F2FF]/10'
                  }`}
                >
                  <div className="flex items-start justify-between gap-3">
                    <div className="flex-1 min-w-0">
                      <h3 className="font-semibold text-[#0F172A] line-clamp-2">
                        {article.title}
                      </h3>
                      <p className="text-sm text-[#64748B] mt-1">{article.source}</p>
                      {article.bullets5?.[0] && (
                        <p className="text-sm text-[#2D3748] mt-2 line-clamp-1">
                          {article.bullets5[0]}
                        </p>
                      )}
                    </div>
                    {article.tags?.companies && article.tags.companies.length > 0 && (
                      <div className="flex gap-1 flex-wrap justify-end">
                        {article.tags.companies.slice(0, 2).map(company => (
                          <span
                            key={company}
                            className="text-xs liquid-glass-light text-[#0F172A] px-2 py-1 rounded border border-[#C7D2E1]/30"
                          >
                            {company}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="border-t border-[#C7D2E1]/20 liquid-glass-premium px-4 py-3 text-xs text-[#64748B] flex items-center justify-between">
          <div className="flex gap-4">
            <span>↑↓ Navigate</span>
            <span>⏎ Select</span>
            <span>ESC Close</span>
          </div>
          <span>{results.length} results</span>
        </div>
      </div>
    </div>
  );
}




================================================================================
FILE: src/components/Dashboard.tsx
================================================================================

import { TrendingUp, AlertTriangle, Zap, BarChart3, Globe, Shield, Cloud, FileText, Clock } from 'lucide-react';

interface Article {
  title: string;
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    trends?: string[];
    regulations?: string[];
  };
  impactScore?: number;
  regulatory?: boolean;
  stormName?: string;
}

interface DashboardProps {
  articles: Article[];
}

export function Dashboard({ articles }: DashboardProps) {
  // Calculate statistics
  const stats = {
    totalArticles: articles.length,
    highImpact: articles.filter(a => (a.impactScore || 0) > 75).length,
    regulatory: articles.filter(a => a.regulatory).length,
    catastrophes: articles.filter(a => a.stormName).length,
  };

  // Extract top trends
  const trends = new Map<string, number>();
  articles.forEach(article => {
    article.tags?.trends?.forEach(trend => {
      trends.set(trend, (trends.get(trend) || 0) + 1);
    });
  });
  const topTrends = Array.from(trends.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  // Extract top perils
  const perils = new Map<string, number>();
  articles.forEach(article => {
    article.tags?.perils?.forEach(peril => {
      perils.set(peril, (perils.get(peril) || 0) + 1);
    });
  });
  const topPerils = Array.from(perils.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  // Extract top LOBs
  const lobs = new Map<string, number>();
  articles.forEach(article => {
    article.tags?.lob?.forEach(lob => {
      lobs.set(lob, (lobs.get(lob) || 0) + 1);
    });
  });
  const topLobs = Array.from(lobs.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  // Extract top regions
  const regions = new Map<string, number>();
  articles.forEach(article => {
    article.tags?.regions?.forEach(region => {
      regions.set(region, (regions.get(region) || 0) + 1);
    });
  });
  const topRegions = Array.from(regions.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5);

  // Extract catastrophes (storms)
  const storms = articles
    .filter(a => a.stormName)
    .map(a => a.stormName)
    .filter((s, i, arr) => arr.indexOf(s) === i)
    .slice(0, 5);

  // Extract regulatory items (this week)
  const regulatoryItems = articles
    .filter(a => a.regulatory)
    .slice(0, 5);

  return (
    <div className="space-y-6 p-6">
      {/* Today's Signal - Key Metrics */}
      <div>
        <h2 className="text-2xl font-bold text-[#0F172A] mb-4 flex items-center gap-2">
          <Zap size={28} className="text-[#5AA6FF]" />
          Today's Signal
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <MetricCard
            icon={<BarChart3 size={24} />}
            label="Total Articles"
            value={stats.totalArticles}
            color="blue"
          />
          <MetricCard
            icon={<Zap size={24} />}
            label="High Impact"
            value={stats.highImpact}
            color="red"
          />
          <MetricCard
            icon={<AlertTriangle size={24} />}
            label="Regulatory"
            value={stats.regulatory}
            color="orange"
          />
          <MetricCard
            icon={<Shield size={24} />}
            label="Catastrophes"
            value={stats.catastrophes}
            color="blue"
          />
        </div>
      </div>

      {/* CAT Ticker & Regulatory Tracker */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* CAT Ticker */}
        <InsightCard title="Active Catastrophes" icon={<Cloud size={20} />} color="blue">
          {storms.length > 0 ? (
            <div className="space-y-3">
              {storms.map((storm, idx) => (
                <div key={idx} className="flex items-center justify-between p-3 bg-[#F9FBFF]/50 rounded-lg hover:bg-[#F9FBFF]/80 transition-all duration-300">
                  <div className="flex items-center gap-2">
                    <Cloud size={16} className="text-[#5AA6FF]" />
                    <span className="text-sm font-semibold text-[#0F172A]">{storm}</span>
                  </div>
                  <span className="px-2.5 py-1 rounded-full bg-gradient-to-r from-[#E8F2FF] to-[#E8F2FF] text-[#5AA6FF] text-xs font-bold">Active</span>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-[#64748B] italic">No active catastrophes tracked</p>
          )}
        </InsightCard>

        {/* Regulatory Tracker */}
        <InsightCard title="Regulatory Updates" icon={<FileText size={20} />} color="red">
          {regulatoryItems.length > 0 ? (
            <div className="space-y-3">
              {regulatoryItems.map((item, idx) => (
                <div key={idx} className="flex items-start justify-between p-3 bg-[#F9FBFF]/50 rounded-lg hover:bg-[#F9FBFF]/80 transition-all duration-300">
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-semibold text-[#0F172A] line-clamp-2">{item.title}</p>
                    <p className="text-xs text-[#64748B] mt-1">{item.tags?.regulations?.[0] || 'Regulatory'}</p>
                  </div>
                  <Clock size={14} className="text-[#EF4444] flex-shrink-0 ml-2" />
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-[#64748B] italic">No regulatory updates this week</p>
          )}
        </InsightCard>
      </div>

      {/* Insights Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Top Trends */}
        <InsightCard title="Top Trends" icon={<TrendingUp size={20} />} color="blue">
          <div className="space-y-3">
            {topTrends.map(([trend, count]) => (
              <div key={trend} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{trend}</span>
                <span className="px-2.5 py-1 rounded-full bg-gradient-to-r from-[#E8F2FF] to-[#E8F2FF] text-[#5AA6FF] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>

        {/* Top Perils */}
        <InsightCard title="Top Perils" icon={<AlertTriangle size={20} />} color="red">
          <div className="space-y-3">
            {topPerils.map(([peril, count]) => (
              <div key={peril} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{peril}</span>
                <span className="px-2.5 py-1 rounded-full bg-[#FEE2E2] text-[#EF4444] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>

        {/* Top States */}
        <InsightCard title="Top States" icon={<Globe size={20} />} color="green">
          <div className="space-y-3">
            {topRegions.map(([region, count]) => (
              <div key={region} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{region}</span>
                <span className="px-2.5 py-1 rounded-full bg-[#DCFCE7] text-[#16A34A] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>

        {/* Top LOBs */}
        <InsightCard title="Top Lines of Business" icon={<Shield size={20} />} color="blue">
          <div className="space-y-3">
            {topLobs.map(([lob, count]) => (
              <div key={lob} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{lob}</span>
                <span className="px-2.5 py-1 rounded-full bg-[#E8F2FF] text-[#5AA6FF] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>
      </div>
    </div>
  );
}

interface MetricCardProps {
  icon: React.ReactNode;
  label: string;
  value: number;
  color: 'blue' | 'red' | 'orange';
}

function MetricCard({ icon, label, value, color }: MetricCardProps) {
  const colorClasses = {
    blue: 'from-[#E8F2FF]/60 to-[#E8F2FF]/40 border-[#5AA6FF]/50 text-[#5AA6FF]',
    red: 'from-[#FEE2E2]/60 to-[#FEE2E2]/40 border-[#EF4444]/50 text-[#EF4444]',
    orange: 'from-[#FEF3C7]/60 to-[#FEF3C7]/40 border-[#F59E0B]/50 text-[#F59E0B]',
  };

  return (
    <div className={`liquid-glass-premium rounded-xl border p-6 bg-gradient-to-br ${colorClasses[color]} hover:shadow-lg transition-all duration-300 animate-enhancedPremiumGlow elevated-glow`}>
      <div className="flex items-start justify-between mb-4">
        <div className={`p-3 rounded-lg liquid-glass-light ${colorClasses[color].split(' ')[2]} animate-iconGlow shadow-md border border-white/60`}>
          {icon}
        </div>
      </div>
      <p className="text-sm font-semibold text-[#64748B] mb-1">{label}</p>
      <p className="text-3xl font-bold bg-gradient-to-r from-[#0F172A] via-[#5AA6FF] to-[#0F172A] bg-clip-text text-transparent">{value}</p>
    </div>
  );
}

interface InsightCardProps {
  title: string;
  icon: React.ReactNode;
  color: 'blue' | 'red' | 'green';
  children: React.ReactNode;
}

function InsightCard({ title, icon, color, children }: InsightCardProps) {
  const colorClasses = {
    blue: 'from-[#E8F2FF]/60 to-[#E8F2FF]/40 border-[#5AA6FF]/50 text-[#5AA6FF]',
    red: 'from-[#FEE2E2]/60 to-[#FEE2E2]/40 border-[#EF4444]/50 text-[#EF4444]',
    green: 'from-[#DCFCE7]/60 to-[#DCFCE7]/40 border-[#16A34A]/50 text-[#16A34A]',
  };

  return (
    <div className={`liquid-glass-premium rounded-xl border p-6 bg-gradient-to-br ${colorClasses[color]} hover:shadow-lg transition-all duration-300 animate-enhancedPremiumGlow elevated-glow`}>
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 rounded-lg liquid-glass-light animate-iconGlow shadow-md border border-white/60">
          {icon}
        </div>
        <h3 className="text-lg font-bold text-[#0F172A]">{title}</h3>
      </div>
      {children}
    </div>
  );
}




================================================================================
FILE: src/components/FeedHealthPanel.tsx
================================================================================

/**
 * Feed Health Admin Panel
 * Monitors RSS feed health, circuit breaker status, and processing metrics
 */

import { useState, useEffect } from 'react';
import { AlertTriangle, CheckCircle, Clock, RefreshCw } from 'lucide-react';
import { GlassCard } from './primitives/GlassCard';
import { Spinner } from './primitives/Spinner';

interface FeedHealthData {
  url: string;
  successCount: number;
  failureCount: number;
  successRate: string;
  lastSuccess?: string;
  lastFailure?: string;
  lastError?: string;
  status: 'HEALTHY' | 'UNHEALTHY' | 'UNKNOWN';
}

interface FeedHealthResponse {
  success: boolean;
  timestamp: string;
  totalFeeds: number;
  monitoredFeeds: number;
  feeds: FeedHealthData[];
}

export function FeedHealthPanel() {
  const [data, setData] = useState<FeedHealthResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);

  const fetchFeedHealth = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/feedHealthReport');
      if (!response.ok) throw new Error('Failed to fetch feed health');
      const result = await response.json();
      setData(result);
      setLastRefresh(new Date());
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchFeedHealth();
    const interval = setInterval(fetchFeedHealth, 60000); // Refresh every minute
    return () => clearInterval(interval);
  }, []);

  if (loading && !data) {
    return (
      <GlassCard variant="premium" className="w-full">
        <div className="flex items-center justify-center py-12">
          <Spinner />
        </div>
      </GlassCard>
    );
  }

  if (error) {
    return (
      <GlassCard variant="premium" className="w-full border-red-200">
        <div className="flex items-center gap-3 text-red-600">
          <AlertTriangle size={20} />
          <p className="text-sm font-medium">{error}</p>
        </div>
      </GlassCard>
    );
  }

  if (!data) return null;

  const healthyCount = data.feeds.filter(f => f.status === 'HEALTHY').length;
  const unhealthyCount = data.feeds.filter(f => f.status === 'UNHEALTHY').length;

  return (
    <div className="space-y-4">
      <GlassCard variant="premium" className="w-full">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-[#0F172A]">Feed Health Monitor</h3>
          <button
            onClick={fetchFeedHealth}
            disabled={loading}
            className="p-2 rounded-lg hover:bg-[#E8F2FF] transition-colors disabled:opacity-50"
            aria-label="Refresh feed health"
          >
            <RefreshCw size={18} className={`text-[#5AA6FF] ${loading ? 'animate-spin' : ''}`} />
          </button>
        </div>

        {/* Summary Stats */}
        <div className="grid grid-cols-3 gap-4 mb-6">
          <div className="p-3 bg-[#E8F2FF]/50 rounded-lg">
            <p className="text-xs text-[#64748B] mb-1">Total Feeds</p>
            <p className="text-2xl font-bold text-[#5AA6FF]">{data.totalFeeds}</p>
          </div>
          <div className="p-3 bg-[#DCFCE7]/50 rounded-lg">
            <p className="text-xs text-[#64748B] mb-1">Healthy</p>
            <p className="text-2xl font-bold text-[#16A34A]">{healthyCount}</p>
          </div>
          <div className="p-3 bg-[#FEE2E2]/50 rounded-lg">
            <p className="text-xs text-[#64748B] mb-1">Unhealthy</p>
            <p className="text-2xl font-bold text-[#EF4444]">{unhealthyCount}</p>
          </div>
        </div>

        {/* Last Refresh */}
        {lastRefresh && (
          <p className="text-xs text-[#94A3B8] mb-4">
            Last updated: {lastRefresh.toLocaleTimeString()}
          </p>
        )}
      </GlassCard>

      {/* Feed List */}
      <div className="space-y-2">
        {data.feeds.map((feed) => (
          <FeedHealthRow key={feed.url} feed={feed} />
        ))}
      </div>
    </div>
  );
}

function FeedHealthRow({ feed }: { feed: FeedHealthData }) {
  const isHealthy = feed.status === 'HEALTHY';
  const statusIcon = isHealthy ? (
    <CheckCircle size={16} className="text-[#16A34A]" />
  ) : (
    <AlertTriangle size={16} className="text-[#EF4444]" />
  );

  return (
    <GlassCard variant="default" className="p-4">
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-2 mb-2">
            {statusIcon}
            <p className="text-sm font-semibold text-[#0F172A] truncate">{feed.url}</p>
          </div>
          <div className="grid grid-cols-2 gap-2 text-xs text-[#64748B]">
            <p>Success: {feed.successCount}</p>
            <p>Failure: {feed.failureCount}</p>
            <p>Rate: {feed.successRate}</p>
            {feed.lastSuccess && (
              <p className="flex items-center gap-1">
                <Clock size={12} />
                {new Date(feed.lastSuccess).toLocaleTimeString()}
              </p>
            )}
          </div>
          {feed.lastError && (
            <p className="text-xs text-[#EF4444] mt-2 truncate">Error: {feed.lastError}</p>
          )}
        </div>
        <div className={`px-3 py-1 rounded-full text-xs font-semibold whitespace-nowrap ${
          isHealthy
            ? 'bg-[#DCFCE7] text-[#16A34A]'
            : 'bg-[#FEE2E2] text-[#EF4444]'
        }`}>
          {feed.status}
        </div>
      </div>
    </GlassCard>
  );
}




================================================================================
FILE: src/components/Header.tsx
================================================================================

import { Shield } from 'lucide-react';

interface HeaderProps {
  isLoading: boolean;
}

export function Header({
  isLoading,
}: HeaderProps) {
  return (
    <header
      className="sticky top-0 z-50 liquid-glass-ultra border-b border-[#C7D2E1]/25 transition-all duration-350 backdrop-blur-2xl"
      style={{ paddingTop: 'env(safe-area-inset-top)' }}
    >
      <div className="mx-auto w-full max-w-full px-4 sm:px-6 lg:px-8 relative z-10 overflow-x-hidden">
        <div className="flex items-center justify-center h-16 sm:h-20 gap-4 touch-manipulation relative w-full max-w-full overflow-x-hidden">
          {/* Center: Logo & Branding - Centered */}
          <div className="flex items-center justify-center gap-3 group flex-shrink-0">
            {/* Shield Icon with Blue Background */}
            <div className="relative w-8 h-8 sm:w-10 sm:h-10 rounded-xl bg-[#5AA6FF] flex items-center justify-center shadow-lg group-hover:shadow-2xl group-hover:scale-110 transition-all duration-300 hover:shadow-[0_0_20px_rgba(90,166,255,0.4)]">
              {/* Glow backdrop - subtle Aurora glow */}
              <div className="absolute inset-0 rounded-xl bg-[#5AA6FF] opacity-0 group-hover:opacity-30 blur-xl transition-opacity duration-300"></div>
              <Shield size={16} className="text-white sm:w-5 sm:h-5 relative z-10" />
            </div>

            {/* Title & Tagline */}
            <div className="flex flex-col justify-center items-center">
              <h1
                className="text-xs sm:text-base font-bold tracking-tight transition-all duration-350 group-hover:scale-105 whitespace-nowrap"
                style={{
                  fontFamily: '"Inter", "Helvetica Neue", sans-serif',
                  fontWeight: 700,
                  letterSpacing: '-0.01em',
                  background: 'linear-gradient(135deg, #5AA6FF 0%, #3B82F6 50%, #2563EB 100%)',
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  backgroundClip: 'text',
                }}
              >
                AI-Curated Insurance News
              </h1>
            </div>
          </div>

          {/* Right: Status Indicators */}
          <div className="flex items-center gap-2 flex-shrink-0 absolute right-0">
            {isLoading && (
              <div className="flex items-center gap-2 px-3 py-1.5 liquid-glass-light rounded-full">
                <div className="relative w-2 h-2">
                  <div className="absolute inset-0 bg-gradient-primary rounded-full animate-pulse"></div>
                  <div className="absolute inset-0 bg-gradient-primary rounded-full animate-pulseGlow opacity-50"></div>
                </div>
                <span className="text-xs font-semibold text-[#5AA6FF] hidden sm:inline">Analyzing…</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
}




================================================================================
FILE: src/components/InfiniteScrollLoader.tsx
================================================================================

/**
 * Infinite Scroll Loading Component
 * 
 * Displays loading states for infinite scroll:
 * - Loading skeleton cards
 * - End of list indicator
 * - Error states
 * - Empty states
 */

import { AlertCircle, CheckCircle2 } from 'lucide-react';

interface InfiniteScrollLoaderProps {
  isLoading?: boolean;
  hasMore?: boolean;
  error?: string | null;
  isEmpty?: boolean;
  itemCount?: number;
}

export function InfiniteScrollLoader({
  isLoading = false,
  hasMore = true,
  error = null,
  isEmpty = false,
  itemCount = 3,
}: InfiniteScrollLoaderProps) {
  // Error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-12 px-4">
        <div className="rounded-full liquid-glass-light p-3 mb-4 border border-[#EF4444]/40 animate-iconGlow">
          <AlertCircle className="w-6 h-6 text-[#EF4444]" />
        </div>
        <p className="text-sm font-semibold text-[#0F172A] mb-1">Failed to load articles</p>
        <p className="text-xs text-[#64748B] text-center">{error}</p>
      </div>
    );
  }

  // Empty state
  if (isEmpty) {
    return (
      <div className="flex flex-col items-center justify-center py-12 px-4">
        <div className="rounded-full liquid-glass-premium p-3 mb-4 border border-[#5AA6FF]/40 animate-iconGlow">
          <CheckCircle2 className="w-6 h-6 text-[#5AA6FF]" />
        </div>
        <p className="text-sm font-semibold text-[#0F172A]">No articles found</p>
        <p className="text-xs text-[#64748B] mt-1">Try adjusting your filters</p>
      </div>
    );
  }

  // End of list
  if (!hasMore && !isLoading) {
    return (
      <div className="flex flex-col items-center justify-center py-12 px-4">
        <div className="rounded-full liquid-glass-light p-3 mb-4 border border-[#5AA6FF]/40 animate-iconGlow">
          <CheckCircle2 className="w-6 h-6 text-[#5AA6FF]" />
        </div>
        <p className="text-sm font-semibold text-[#0F172A]">You've reached the end</p>
        <p className="text-xs text-[#64748B] mt-1">No more articles to load</p>
      </div>
    );
  }

  // Loading state - show skeleton cards
  if (isLoading) {
    return (
      <div className="space-y-3 w-full max-w-full px-4 pb-20">
        {Array.from({ length: itemCount }).map((_, idx) => (
          <SkeletonCard key={idx} delay={idx * 50} />
        ))}
      </div>
    );
  }

  return null;
}

/**
 * Skeleton card for loading state
 */
function SkeletonCard({ delay = 0 }: { delay?: number }) {
  return (
    <div
      style={{ animationDelay: `${delay}ms` }}
      className="w-full max-w-full rounded-xl border-2 border-[#C7D2E1]/40 overflow-hidden animate-slideInWithBounce liquid-glass"
    >
      {/* Gradient Accent Top - Aurora Colors */}
      <div className="h-2 w-full bg-gradient-primary opacity-85"></div>

      {/* Content Section */}
      <div className="p-4 space-y-3 flex-1 flex flex-col bg-gradient-to-br from-white via-[#F9FBFF]/25 to-[#E8F2FF]/15 w-full max-w-full overflow-x-hidden">
        {/* Header */}
        <div className="flex items-start justify-between gap-3 w-full max-w-full overflow-x-hidden">
          <div className="flex-1 min-w-0 overflow-hidden">
            <div className="h-4 bg-[#D4DFE8] rounded-full w-24 animate-shimmer"></div>
          </div>
          <div className="h-4 bg-[#D4DFE8] rounded-full w-16 animate-shimmer flex-shrink-0"></div>
        </div>

        {/* Title */}
        <div className="space-y-2">
          <div className="h-5 bg-[#D4DFE8] rounded-lg w-full animate-shimmer"></div>
          <div className="h-5 bg-[#D4DFE8] rounded-lg w-5/6 animate-shimmer"></div>
        </div>

        {/* Summary Lines */}
        <div className="space-y-2 py-3 border-t border-[#C7D2E1]/30 pt-3">
          <div className="h-4 bg-[#E8F2FF] rounded-lg w-full animate-shimmer"></div>
          <div className="h-4 bg-[#E8F2FF] rounded-lg w-5/6 animate-shimmer"></div>
          <div className="h-4 bg-[#E8F2FF] rounded-lg w-4/5 animate-shimmer"></div>
        </div>

        {/* Buttons */}
        <div className="flex gap-2 pt-4 mt-auto border-t border-[#C7D2E1]/30 pt-3">
          <div className="flex-1 h-10 bg-[#E8F2FF] rounded-lg animate-shimmer"></div>
          <div className="flex-1 h-10 bg-[#E8F2FF] rounded-lg animate-shimmer"></div>
        </div>
      </div>
    </div>
  );
}

/**
 * Loading indicator for scroll sentinel
 */
export function ScrollSentinelLoader() {
  return (
    <div className="flex items-center justify-center py-8 px-4">
      <div className="flex items-center gap-2">
        <div className="w-2 h-2 rounded-full bg-[#5AA6FF] animate-pulse"></div>
        <div className="w-2 h-2 rounded-full bg-[#8B7CFF] animate-pulse" style={{ animationDelay: '0.2s' }}></div>
        <div className="w-2 h-2 rounded-full bg-[#B08CFF] animate-pulse" style={{ animationDelay: '0.4s' }}></div>
      </div>
      <span className="ml-3 text-xs font-medium text-[#64748B]">Loading more...</span>
    </div>
  );
}




================================================================================
FILE: src/components/MobileNav.tsx
================================================================================

import { useState, useEffect } from 'react';
import { Search, BarChart3, Bookmark, Settings, X } from 'lucide-react';

interface MobileNavProps {
  onViewChange?: (view: 'feed' | 'dashboard' | 'bookmarks' | 'settings') => void;
  currentView?: 'feed' | 'dashboard' | 'bookmarks' | 'settings';
}

export function MobileNav({ onViewChange, currentView = 'feed' }: MobileNavProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);

  // Handle swipe gestures
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientY);
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    setTouchEnd(e.changedTouches[0].clientY);
    handleSwipe();
  };

  const handleSwipe = () => {
    if (!touchStart || !touchEnd) return;
    const distance = touchStart - touchEnd;
    const isUpSwipe = distance > 50;
    const isDownSwipe = distance < -50;

    if (isUpSwipe && !isOpen) {
      setIsOpen(true);
    } else if (isDownSwipe && isOpen) {
      setIsOpen(false);
    }
  };

  // Close on escape key
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') setIsOpen(false);
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  const handleNavClick = (view: 'feed' | 'dashboard' | 'bookmarks' | 'settings') => {
    onViewChange?.(view);
    setIsOpen(false);
  };

  return (
    <>
      {/* Bottom Sheet Trigger - Visible on Mobile */}
      <div className="md:hidden fixed bottom-0 left-0 right-0 z-40 pointer-events-none">
        {/* Swipe Indicator - Hidden */}
        <div
          className="h-0 pointer-events-auto cursor-grab active:cursor-grabbing"
          onTouchStart={handleTouchStart}
          onTouchEnd={handleTouchEnd}
        />

        {/* Bottom Sheet */}
        <div
          className={`pointer-events-auto transition-all duration-300 ease-out ${
            isOpen ? 'translate-y-0' : 'translate-y-full'
          }`}
        >
          <div className="liquid-glass-ultra border-t border-[#C7D2E1]/25 rounded-t-3xl shadow-2xl animate-enhancedPremiumGlow">
            {/* Handle Bar - Aurora Gradient */}
            <div className="flex justify-center pt-3 pb-2">
              <div className="w-12 h-1.5 bg-gradient-primary rounded-full opacity-70" />
            </div>

            {/* Navigation Items */}
            <div className="px-4 pb-6 space-y-2">
              {/* Feed Button */}
              <button
                onClick={() => handleNavClick('feed')}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl font-semibold transition-all duration-300 ${
                  currentView === 'feed'
                    ? 'liquid-glass-premium text-[#5AA6FF] shadow-md border border-[#5AA6FF]/30'
                    : 'liquid-glass-light text-[#0F172A] hover:border-[#C7D2E1]/40'
                }`}
              >
                <Search size={20} />
                <span>News Feed</span>
              </button>

              {/* Dashboard Button */}
              <button
                onClick={() => handleNavClick('dashboard')}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl font-semibold transition-all duration-300 ${
                  currentView === 'dashboard'
                    ? 'liquid-glass-premium text-[#8B7CFF] shadow-md border border-[#8B7CFF]/30'
                    : 'liquid-glass-light text-[#0F172A] hover:border-[#C7D2E1]/40'
                }`}
              >
                <BarChart3 size={20} />
                <span>Dashboard</span>
              </button>

              {/* Bookmarks Button */}
              <button
                onClick={() => handleNavClick('bookmarks')}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl font-semibold transition-all duration-300 ${
                  currentView === 'bookmarks'
                    ? 'liquid-glass-premium text-[#B08CFF] shadow-md border border-[#B08CFF]/30'
                    : 'liquid-glass-light text-[#0F172A] hover:border-[#C7D2E1]/40'
                }`}
              >
                <Bookmark size={20} />
                <span>Bookmarks</span>
              </button>

              {/* Settings Button */}
              <button
                onClick={() => handleNavClick('settings')}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-xl font-semibold transition-all duration-300 ${
                  currentView === 'settings'
                    ? 'liquid-glass-premium text-[#5AA6FF] shadow-md border border-[#5AA6FF]/30'
                    : 'liquid-glass-light text-[#0F172A] hover:border-[#C7D2E1]/40'
                }`}
              >
                <Settings size={20} />
                <span>Settings</span>
              </button>

              {/* Close Button */}
              <button
                onClick={() => setIsOpen(false)}
                className="w-full flex items-center justify-center gap-2 px-4 py-3 rounded-xl font-semibold liquid-glass-light text-[#0F172A] hover:border-[#C7D2E1]/40 transition-all duration-300 mt-4 border border-[#C7D2E1]/30"
              >
                <X size={20} />
                <span>Close</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Overlay */}
      {isOpen && (
        <div
          className="md:hidden fixed inset-0 z-30 bg-black/30 backdrop-blur-sm pointer-events-auto transition-all duration-300"
          onClick={() => setIsOpen(false)}
        />
      )}
    </>
  );
}




================================================================================
FILE: src/components/SearchFirst.tsx
================================================================================

/**
 * Search-First UI Component for CarrierSignal v2
 * 
 * Innovative search interface with:
 * - Fuzzy search with typo tolerance
 * - Semantic understanding (synonyms)
 * - Real-time suggestions
 * - Visual match indicators
 * - Mobile-optimized
 */

import { useState, useEffect } from 'react';
import { Zap, Clock, ExternalLink } from 'lucide-react';
import { rankArticlesByAI, rankArticlesByRecency } from '../utils/rankingSystem';
import { InfiniteScrollLoader, ScrollSentinelLoader } from './InfiniteScrollLoader';

interface Article {
  title: string;
  url: string;
  source: string;
  publishedAt?: string;
  description?: string;
  image?: string;
  bullets5?: string[];
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    companies?: string[];
    trends?: string[];
    regulations?: string[];
  };
  smartScore?: number;
  aiScore?: number;
  impactScore?: number;
  regulatory?: boolean;
  stormName?: string;
}

interface SearchFirstProps {
  articles: Article[];
  onArticleSelect: (article: Article) => void;
  selectedArticle?: Article | null;
  sortMode?: 'smart' | 'recency';
  onSortChange?: (sort: 'smart' | 'recency') => void;
  isLoadingMore?: boolean;
  hasMore?: boolean;
  sentinelRef?: React.RefObject<HTMLDivElement | null>;
}

export function SearchFirst({
  articles,
  onArticleSelect,
  selectedArticle,
  sortMode = 'smart',
  onSortChange,
  isLoadingMore = false,
  hasMore = true,
  sentinelRef,
}: SearchFirstProps) {
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [localSortBy, setLocalSortBy] = useState<'smart' | 'recency'>(sortMode || 'smart');

  // Display articles with sorting
  useEffect(() => {
    const timer = setTimeout(() => {
      // Map to results format
      const results = articles.map(article => ({
        article,
        score: article.aiScore || article.smartScore || 0,
        matchType: 'combined',
        highlights: [],
      }));

      // Apply sorting
      const sorted = applySorting(results, localSortBy);
      setSearchResults(sorted);
    }, 300);

    return () => clearTimeout(timer);
  }, [articles, localSortBy]);

  // Sorting function
  const applySorting = (results: any[], sortType: string) => {
    const articles = results.map(r => r.article);

    let sorted;
    if (sortType === 'smart') {
      // Smart sort: blend AI relevance with recency
      sorted = rankArticlesByAI(articles);
    } else {
      // Recency sort
      sorted = rankArticlesByRecency(articles);
    }

    // Map back to result format
    return sorted.map(article => ({
      article,
      score: (article as any).finalScore || article.aiScore || 0,
      matchType: 'combined',
      highlights: [],
    }));
  };

  return (
    <div className="w-full max-w-full overflow-x-hidden space-y-0 flex flex-col h-full">

      {/* Sort Controls Header - Mobile Optimized */}
      <div className="sticky top-0 z-40 liquid-glass-premium border-b border-[#C7D2E1]/25 shadow-sm p-3 sm:p-4 flex-shrink-0 w-full max-w-full overflow-x-hidden">
        <div className="flex items-center gap-2 sm:gap-3 w-full max-w-full overflow-x-hidden">
          {/* Sort Buttons - Two Options Only */}
          <div className="flex items-center gap-1 sm:gap-1.5 liquid-glass-light rounded-lg p-1 border border-[#C7D2E1]/25 flex-shrink-0">
            <button
              onClick={() => {
                setLocalSortBy('smart');
                onSortChange?.('smart');
              }}
              className={`flex items-center gap-1 sm:gap-1.5 px-2 sm:px-3 py-1.5 rounded-md text-xs font-semibold transition-all duration-300 whitespace-nowrap flex-shrink-0 ${
                localSortBy === 'smart'
                  ? 'liquid-glass-premium text-[#5AA6FF] shadow-md border border-[#5AA6FF]/30'
                  : 'text-[#5AA6FF] hover:text-[#8B7CFF] hover:bg-[#F9FBFF]/50'
              }`}
            >
              <Zap size={13} className="hidden sm:inline flex-shrink-0" />
              <Zap size={12} className="sm:hidden flex-shrink-0" />
              <span className="hidden sm:inline">AI Sort</span>
              <span className="sm:hidden">AI</span>
            </button>
            <button
              onClick={() => {
                setLocalSortBy('recency');
                onSortChange?.('recency');
              }}
              className={`flex items-center gap-1 sm:gap-1.5 px-2 sm:px-3 py-1.5 rounded-md text-xs font-semibold transition-all duration-300 whitespace-nowrap flex-shrink-0 ${
                localSortBy === 'recency'
                  ? 'liquid-glass-premium text-[#8B7CFF] shadow-md border border-[#8B7CFF]/30'
                  : 'text-[#8B7CFF] hover:text-[#5AA6FF] hover:bg-[#F9FBFF]/50'
              }`}
            >
              <Clock size={13} className="hidden sm:inline flex-shrink-0" />
              <Clock size={12} className="sm:hidden flex-shrink-0" />
              <span className="hidden sm:inline">Recent</span>
              <span className="sm:hidden">New</span>
            </button>
          </div>

          {/* Results Count - Right Aligned */}
          <div className="ml-auto text-xs text-[#5AA6FF] font-semibold whitespace-nowrap flex-shrink-0">
            <span className="hidden sm:inline">{searchResults.length} articles</span>
            <span className="sm:hidden">{searchResults.length} ARTICLES</span>
          </div>
        </div>
      </div>

      {/* Results - Scrollable */}
      <div className="flex-1 overflow-y-auto w-full max-w-full overflow-x-hidden">
        <div className="w-full max-w-full px-4 pb-20 pt-4 overflow-x-hidden">
          <div className="space-y-3 w-full max-w-full">
            {searchResults.map((result, idx) => (
              <SearchResultCard
                key={`${result.article.url}-${idx}`}
                result={result}
                isSelected={selectedArticle?.url === result.article.url}
                onSelect={() => onArticleSelect(result.article)}
                index={idx}
              />
            ))}
          </div>

          {/* Loading indicator for infinite scroll */}
          {isLoadingMore && (
            <div className="mt-6">
              <ScrollSentinelLoader />
            </div>
          )}

          {/* Sentinel element for infinite scroll trigger */}
          <div ref={sentinelRef} className="h-4 w-full" />

          {/* End of list or error states */}
          {!isLoadingMore && (
            <InfiniteScrollLoader
              isLoading={false}
              hasMore={hasMore}
              isEmpty={searchResults.length === 0}
              itemCount={3}
            />
          )}
        </div>
      </div>

    </div>
  );
}

/**
 * Individual search result card
 */
interface SearchResultCardProps {
  result: any;
  isSelected: boolean;
  onSelect: () => void;
  index?: number;
}

function SearchResultCard({ result, isSelected, onSelect, index = 0 }: SearchResultCardProps) {
  const { article } = result;
  const timeAgo = article.publishedAt ? getTimeAgo(new Date(article.publishedAt)) : 'Unknown';

  const handleViewMore = (e: React.MouseEvent) => {
    e.stopPropagation();
    onSelect();
  };

  const handleViewArticle = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (article.url) {
      window.open(article.url, '_blank');
    }
  };

  return (
    <div
      style={{ animationDelay: `${index * 50}ms` }}
      className={`w-full max-w-full rounded-xl border-2 transition-all duration-300 animate-slideInWithBounce overflow-hidden flex flex-col ${
        isSelected
          ? 'liquid-glass-ultra border-[#5AA6FF]/60 shadow-lg animate-premiumGlow elevated-glow'
          : 'liquid-glass border-[#C7D2E1]/40 hover:border-[#5AA6FF]/60 hover:shadow-lg hover:scale-102 hover:animate-subtleGlowPulse micro-glow'
      }`}
    >
      {/* Gradient Accent Top - Aurora Colors */}
      <div className="h-1.5 w-full bg-gradient-to-r from-[#5AA6FF] via-[#8B7CFF] to-[#B08CFF] opacity-90 shadow-md"></div>

      {/* Content Section with Subtle Gradient */}
      <div className="p-4 space-y-3 flex-1 flex flex-col bg-gradient-to-br from-white via-[#F9FBFF]/25 to-[#E8F2FF]/15 w-full max-w-full overflow-x-hidden">
        {/* Header with Source and Time (moved to top right) */}
        <div className="flex items-start justify-between gap-3 w-full max-w-full overflow-x-hidden">
          <div className="flex-1 min-w-0 overflow-hidden">
            <span className="text-xs font-semibold text-[#5AA6FF] bg-gradient-to-r from-[#F9FBFF] to-[#E8F2FF] px-2.5 py-1 rounded-full inline-block truncate">
              {article.source}
            </span>
          </div>
          {timeAgo && (
            <span className="text-xs text-[#8B7CFF] font-medium flex-shrink-0 whitespace-nowrap">{timeAgo}</span>
          )}
        </div>

        {/* Title - Enhanced Typography */}
        <h3 className="font-bold text-[#0F172A] text-sm md:text-base leading-snug line-clamp-3 hover:text-[#5AA6FF] transition-colors w-full max-w-full overflow-hidden break-words">
          {article.title}
        </h3>

        {/* AI-Generated Summary - Expanded with larger font */}
        {article.bullets5 && article.bullets5.length > 0 && (
          <div className="space-y-3 py-3 border-t border-[#C7D2E1]/25 pt-3 w-full max-w-full overflow-x-hidden">
            <div className="flex items-center gap-2 w-full max-w-full overflow-x-hidden">
              <div className="w-5 h-5 rounded-full bg-gradient-primary flex items-center justify-center flex-shrink-0">
                <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              </div>
              <span className="text-xs font-bold text-[#0F172A] uppercase tracking-widest truncate">AI Summary</span>
            </div>
            <div className="space-y-2 w-full max-w-full overflow-x-hidden">
              {article.bullets5.slice(0, 3).map((bullet: string, idx: number) => (
                <div key={idx} className="flex gap-2 text-sm text-[#2D3748] leading-relaxed w-full max-w-full overflow-x-hidden">
                  <span className="text-[#5AA6FF] font-bold flex-shrink-0 mt-0.5">→</span>
                  <span className="flex-1 overflow-hidden break-words">{bullet}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Tags Section */}
        {article.tags && Object.values(article.tags).some((tagArray: any) => tagArray && tagArray.length > 0) && (
          <div className="space-y-2 py-3 border-t border-[#C7D2E1]/25 pt-3 w-full max-w-full overflow-x-hidden">
            <div className="flex flex-wrap gap-2 w-full max-w-full">
              {/* LOB Tags - Cyan */}
              {article.tags.lob && article.tags.lob.length > 0 && (
                article.tags.lob.map((tag: string, idx: number) => (
                  <span key={`lob-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#06B6D4] text-xs font-medium whitespace-nowrap border border-[#06B6D4]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Perils Tags - Indigo */}
              {article.tags.perils && article.tags.perils.length > 0 && (
                article.tags.perils.map((tag: string, idx: number) => (
                  <span key={`perils-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#5AA6FF] text-xs font-medium whitespace-nowrap border border-[#5AA6FF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Regions Tags - Aurora Blue */}
              {article.tags.regions && article.tags.regions.length > 0 && (
                article.tags.regions.map((tag: string, idx: number) => (
                  <span key={`regions-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#5AA6FF] text-xs font-medium whitespace-nowrap border border-[#5AA6FF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Companies Tags - Aurora Violet */}
              {article.tags.companies && article.tags.companies.length > 0 && (
                article.tags.companies.map((tag: string, idx: number) => (
                  <span key={`companies-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#8B7CFF] text-xs font-medium whitespace-nowrap border border-[#8B7CFF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Trends Tags - Aurora Lilac */}
              {article.tags.trends && article.tags.trends.length > 0 && (
                article.tags.trends.map((tag: string, idx: number) => (
                  <span key={`trends-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#B08CFF] text-xs font-medium whitespace-nowrap border border-[#B08CFF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Regulations Tags - Aurora Blue */}
              {article.tags.regulations && article.tags.regulations.length > 0 && (
                article.tags.regulations.map((tag: string, idx: number) => (
                  <span key={`regulations-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#5AA6FF] text-xs font-medium whitespace-nowrap border border-[#5AA6FF]/30">
                    {tag}
                  </span>
                ))
              )}
            </div>
          </div>
        )}

        {/* Bottom Action Buttons */}
        <div className="flex gap-2 pt-4 mt-auto border-t border-[#C7D2E1]/25 pt-3 w-full max-w-full overflow-x-hidden">
          <button
            onClick={handleViewMore}
            className="flex-1 px-3 py-2 text-xs font-semibold text-[#5AA6FF] liquid-glass-light rounded-lg hover:border-[#5AA6FF]/50 transition-all duration-200 min-h-[44px] touch-action-manipulation border border-[#C7D2E1]/30"
          >
            View More
          </button>
          <button
            onClick={handleViewArticle}
            className="flex-1 px-3 py-2 text-xs font-semibold text-[#5AA6FF] liquid-glass-light rounded-lg hover:border-[#5AA6FF]/50 transition-all duration-200 flex items-center justify-center gap-1 min-h-[44px] touch-action-manipulation border border-[#C7D2E1]/30"
          >
            <span className="hidden sm:inline">View Article</span>
            <span className="sm:hidden">Article</span>
            <ExternalLink size={12} className="flex-shrink-0" />
          </button>
        </div>
      </div>
    </div>
  );
}

/**
 * Utility: Format time ago
 */
function getTimeAgo(date: Date): string {
  const now = new Date();
  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (seconds < 60) return 'now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  if (seconds < 604800) return `${Math.floor(seconds / 86400)}d ago`;
  return date.toLocaleDateString();
}




================================================================================
FILE: src/components/SettingsPanel.tsx
================================================================================

import { useEffect, useState } from 'react';
import { Settings, Save, Sparkles, Clock, Check } from 'lucide-react';

interface SettingsPanelProps {
  onSortChange?: (sort: 'smart' | 'recency') => void;
}

const SORT_OPTIONS = [
  { id: 'smart', label: 'AI Sort (AI + Recency)', icon: Sparkles },
  { id: 'recency', label: 'Recent', icon: Clock },
];

export function SettingsPanel({
  onSortChange,
}: SettingsPanelProps) {
  const [selectedSort, setSelectedSort] = useState<'smart' | 'recency'>('smart');
  const [saved, setSaved] = useState(false);

  // Load settings from localStorage
  useEffect(() => {
    const sort = localStorage.getItem('carriersignal_sort') as any;

    if (sort) setSelectedSort(sort);
  }, []);

  const handleSave = () => {
    localStorage.setItem('carriersignal_sort', selectedSort);

    onSortChange?.(selectedSort);

    setSaved(true);
    setTimeout(() => setSaved(false), 2000);
  };

  return (
    <div className="flex-1 overflow-y-auto">
      <div className="max-w-2xl mx-auto p-6 space-y-8">
        {/* Header */}
        <div className="flex items-center gap-3 mb-8">
          <div className="w-10 h-10 rounded-lg liquid-glass-premium flex items-center justify-center border border-[#5AA6FF]/40 animate-iconGlow">
            <Settings size={20} className="text-[#5AA6FF]" />
          </div>
          <h2 className="text-2xl font-bold text-[#0F172A]">Settings</h2>
        </div>

        {/* Sort Preference */}
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-[#0F172A]">Default Sort</h3>
          <p className="text-sm text-[#64748B]">Choose how articles are sorted by default</p>
          <div className="space-y-2">
            {SORT_OPTIONS.map(sort => {
              const IconComponent = sort.icon;
              return (
                <button
                  key={sort.id}
                  onClick={() => setSelectedSort(sort.id as any)}
                  className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left flex items-center gap-3 ${
                    selectedSort === sort.id
                      ? 'liquid-glass-premium border-[#5AA6FF]/60 bg-gradient-to-r from-[#E8F2FF]/40 to-[#E8F2FF]/20'
                      : 'liquid-glass-light border-[#C7D2E1]/40 hover:border-[#5AA6FF]/60 hover:bg-gradient-to-r hover:from-[#E8F2FF]/20 hover:to-[#E8F2FF]/10'
                  }`}
                >
                  <div className="text-[#5AA6FF] animate-iconGlow">
                    <IconComponent size={20} />
                  </div>
                  <div>
                    <div className="font-semibold text-[#0F172A]">{sort.label}</div>
                  </div>
                </button>
              );
            })}
          </div>
        </div>

        {/* Save Button */}
        <div className="flex gap-3 pt-6 border-t border-[#C7D2E1]/30">
          <button
            onClick={handleSave}
            className="flex-1 flex items-center justify-center gap-2 px-6 py-3 liquid-glass-premium text-[#5AA6FF] rounded-lg hover:border-[#5AA6FF]/60 transition-all duration-300 font-semibold border border-[#5AA6FF]/40 elevated-glow hover:shadow-lg"
          >
            <Save size={18} />
            Save Settings
          </button>
          {saved && (
            <div className="flex items-center gap-2 px-4 py-3 liquid-glass-light text-[#16A34A] rounded-lg text-sm font-medium border border-[#16A34A]/40 animate-slideInRight">
              <Check size={18} />
              Saved
            </div>
          )}
        </div>
      </div>
    </div>
  );
}




================================================================================
FILE: src/components/SkeletonLoader.tsx
================================================================================

/**
 * Skeleton Loader Components
 * Provides shimmer animations for loading states with liquid glass aesthetic
 */

export function SkeletonLoader() {
  return (
    <div className="liquid-glass-premium rounded-3xl border border-[#C7D2E1]/40 overflow-hidden hover:shadow-xl transition-all duration-400 animate-slideInWithBounce animate-enhancedPremiumGlow" role="status" aria-label="Loading article details">
      {/* Premium accent line with Aurora gradient */}
      <div className="h-2 bg-gradient-primary opacity-85 animate-liquidGlassShimmer"></div>

      {/* Header with liquid glass effect */}
      <div className="px-7 py-6 border-b border-[#C7D2E1]/30 bg-gradient-to-br from-white/40 to-[#F9FBFF]/20 backdrop-blur-sm">
        <div className="h-6 bg-gradient-to-r from-[#D4DFE8] via-[#C7D2E1] to-[#D4DFE8] rounded-lg w-3/4 mb-4 animate-shimmer"></div>
        <div className="flex items-center justify-between">
          <div className="h-4 bg-[#D4DFE8] rounded-lg w-1/4 animate-shimmer"></div>
          <div className="h-4 bg-[#D4DFE8] rounded-lg w-1/5 animate-shimmer"></div>
        </div>
      </div>

      {/* Content */}
      <div className="px-7 py-6">
        {/* Key Points */}
        <div className="mb-6 p-6 glass rounded-2xl border border-[#C7D2E1]/40 bg-gradient-to-br from-[#F9FBFF]/60 to-[#E8F2FF]/40 backdrop-blur-sm">
          <div className="h-3 bg-[#D4DFE8] rounded-lg w-1/6 mb-4 animate-shimmer"></div>
          <div className="space-y-3.5">
            <div className="h-4 bg-[#E8F2FF] rounded-lg w-full animate-shimmer"></div>
            <div className="h-4 bg-[#E8F2FF] rounded-lg w-5/6 animate-shimmer"></div>
            <div className="h-4 bg-[#E8F2FF] rounded-lg w-4/5 animate-shimmer"></div>
          </div>
        </div>

        {/* Why It Matters */}
        <div className="border-t border-[#C7D2E1]/30 pt-6">
          <div className="h-4 bg-[#D4DFE8] rounded-lg w-1/4 animate-shimmer"></div>
        </div>
      </div>

      {/* Tags */}
      <div className="px-7 py-6 bg-gradient-to-r from-[#F9FBFF]/40 to-[#E8F2FF]/30 border-t border-[#C7D2E1]/30 backdrop-blur-sm">
        <div className="flex flex-wrap gap-2.5">
          <div className="h-6 bg-[#D4DFE8] rounded-full w-16 animate-shimmer"></div>
          <div className="h-6 bg-[#D4DFE8] rounded-full w-20 animate-shimmer"></div>
          <div className="h-6 bg-[#D4DFE8] rounded-full w-24 animate-shimmer"></div>
        </div>
      </div>
    </div>
  );
}

/**
 * Card Skeleton - Compact loading state for article cards
 */
export function CardSkeleton() {
  return (
    <div className="glass rounded-2xl border border-[#C7D2E1]/40 p-4 space-y-3" role="status" aria-label="Loading article card">
      {/* Header */}
      <div className="flex items-start justify-between gap-2">
        <div className="flex-1">
          <div className="h-3 bg-[#D4DFE8] rounded-lg w-1/3 mb-2 animate-shimmer"></div>
          <div className="h-2 bg-[#E8F2FF] rounded-lg w-1/4 animate-shimmer"></div>
        </div>
        <div className="h-6 bg-[#E8F2FF] rounded-lg w-12 animate-shimmer"></div>
      </div>

      {/* Title */}
      <div className="space-y-2">
        <div className="h-4 bg-[#D4DFE8] rounded-lg w-full animate-shimmer"></div>
        <div className="h-4 bg-[#D4DFE8] rounded-lg w-5/6 animate-shimmer"></div>
      </div>

      {/* Description */}
      <div className="space-y-2">
        <div className="h-3 bg-[#E8F2FF] rounded-lg w-full animate-shimmer"></div>
        <div className="h-3 bg-[#E8F2FF] rounded-lg w-4/5 animate-shimmer"></div>
      </div>

      {/* Tags */}
      <div className="flex gap-2 pt-2">
        <div className="h-5 bg-[#D4DFE8] rounded-full w-12 animate-shimmer"></div>
        <div className="h-5 bg-[#D4DFE8] rounded-full w-16 animate-shimmer"></div>
        <div className="h-5 bg-[#D4DFE8] rounded-full w-14 animate-shimmer"></div>
      </div>
    </div>
  );
}

/**
 * Grid of card skeletons for article lists
 */
export function SkeletonGrid({ count = 3, variant = 'card' }: { count?: number; variant?: 'card' | 'full' }) {
  return (
    <div className={variant === 'card' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-4'}>
      {Array.from({ length: count }).map((_, i) => (
        variant === 'card' ? <CardSkeleton key={i} /> : <SkeletonLoader key={i} />
      ))}
    </div>
  );
}




================================================================================
FILE: src/components/features/AdvancedFilter.tsx
================================================================================

/**
 * Advanced Filter Component
 * Multi-faceted filtering for articles and events
 */

import { useState } from 'react';
import { GlassCard, GlowButton, Badge, Input } from '../primitives';
import { ChevronDown } from 'lucide-react';

export interface FilterState {
  lob: string[];
  perils: string[];
  regions: string[];
  companies: string[];
  riskPulse: string[];
  dateRange: {
    start: string;
    end: string;
  };
}

interface AdvancedFilterProps {
  onFilterChange: (filters: FilterState) => void;
  onSave?: (name: string) => void;
}

const LOB_OPTIONS = [
  'Commercial Auto',
  'General Liability',
  'Property',
  'Workers Comp',
  'Cyber',
  'Professional Liability',
];

const PERIL_OPTIONS = [
  'Wildfire',
  'Hurricane',
  'Flood',
  'Earthquake',
  'Hail',
  'Tornado',
  'Winter Storm',
];

const REGION_OPTIONS = [
  'Northeast',
  'Southeast',
  'Midwest',
  'Southwest',
  'West Coast',
  'National',
];

const RISK_PULSE_OPTIONS = ['LOW', 'MEDIUM', 'HIGH'];

export function AdvancedFilter({ onFilterChange, onSave }: AdvancedFilterProps) {
  const [filters, setFilters] = useState<FilterState>({
    lob: [],
    perils: [],
    regions: [],
    companies: [],
    riskPulse: [],
    dateRange: {
      start: '',
      end: '',
    },
  });

  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    lob: true,
    perils: true,
    regions: false,
    companies: false,
    riskPulse: false,
    dateRange: false,
  });

  const [filterName, setFilterName] = useState('');
  const [showSaveDialog, setShowSaveDialog] = useState(false);

  const toggleSection = (section: string) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const toggleFilter = (category: keyof Omit<FilterState, 'dateRange'>, value: string) => {
    setFilters((prev) => {
      const updated = { ...prev };
      const arr = updated[category] as string[];
      const index = arr.indexOf(value);
      if (index > -1) {
        arr.splice(index, 1);
      } else {
        arr.push(value);
      }
      onFilterChange(updated);
      return updated;
    });
  };

  const updateDateRange = (field: 'start' | 'end', value: string) => {
    setFilters((prev) => {
      const updated = {
        ...prev,
        dateRange: { ...prev.dateRange, [field]: value },
      };
      onFilterChange(updated);
      return updated;
    });
  };

  const clearFilters = () => {
    const empty: FilterState = {
      lob: [],
      perils: [],
      regions: [],
      companies: [],
      riskPulse: [],
      dateRange: { start: '', end: '' },
    };
    setFilters(empty);
    onFilterChange(empty);
  };

  const handleSaveFilter = () => {
    if (filterName.trim() && onSave) {
      onSave(filterName);
      setFilterName('');
      setShowSaveDialog(false);
    }
  };

  const activeFilterCount = [
    ...filters.lob,
    ...filters.perils,
    ...filters.regions,
    ...filters.companies,
    ...filters.riskPulse,
  ].length;

  return (
    <GlassCard variant="premium" className="w-full">
      <div className="space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-[#0F172A]">Advanced Filters</h3>
          {activeFilterCount > 0 && (
            <div className="flex items-center gap-2">
              <Badge variant="info" size="sm">
                {activeFilterCount} active
              </Badge>
              <button
                onClick={clearFilters}
                className="text-xs text-[#64748B] hover:text-[#5AA6FF] transition-colors"
              >
                Clear all
              </button>
            </div>
          )}
        </div>

        {/* LOB Filter */}
        <FilterSection
          title="Lines of Business"
          expanded={expandedSections.lob}
          onToggle={() => toggleSection('lob')}
        >
          <div className="grid grid-cols-2 gap-2">
            {LOB_OPTIONS.map((lob) => (
              <label key={lob} className="flex items-center gap-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={filters.lob.includes(lob)}
                  onChange={() => toggleFilter('lob', lob)}
                  className="w-4 h-4 rounded border-[#C7D2E1] text-[#5AA6FF]"
                />
                <span className="text-sm text-[#0F172A]">{lob}</span>
              </label>
            ))}
          </div>
        </FilterSection>

        {/* Peril Filter */}
        <FilterSection
          title="Perils"
          expanded={expandedSections.perils}
          onToggle={() => toggleSection('perils')}
        >
          <div className="grid grid-cols-2 gap-2">
            {PERIL_OPTIONS.map((peril) => (
              <label key={peril} className="flex items-center gap-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={filters.perils.includes(peril)}
                  onChange={() => toggleFilter('perils', peril)}
                  className="w-4 h-4 rounded border-[#C7D2E1] text-[#5AA6FF]"
                />
                <span className="text-sm text-[#0F172A]">{peril}</span>
              </label>
            ))}
          </div>
        </FilterSection>

        {/* Region Filter */}
        <FilterSection
          title="Regions"
          expanded={expandedSections.regions}
          onToggle={() => toggleSection('regions')}
        >
          <div className="grid grid-cols-2 gap-2">
            {REGION_OPTIONS.map((region) => (
              <label key={region} className="flex items-center gap-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={filters.regions.includes(region)}
                  onChange={() => toggleFilter('regions', region)}
                  className="w-4 h-4 rounded border-[#C7D2E1] text-[#5AA6FF]"
                />
                <span className="text-sm text-[#0F172A]">{region}</span>
              </label>
            ))}
          </div>
        </FilterSection>

        {/* Risk Pulse Filter */}
        <FilterSection
          title="Risk Pulse"
          expanded={expandedSections.riskPulse}
          onToggle={() => toggleSection('riskPulse')}
        >
          <div className="flex gap-2">
            {RISK_PULSE_OPTIONS.map((pulse) => (
              <button
                key={pulse}
                onClick={() => toggleFilter('riskPulse', pulse)}
                className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all ${
                  filters.riskPulse.includes(pulse)
                    ? 'bg-[#5AA6FF] text-white'
                    : 'bg-[#E8F2FF] text-[#5AA6FF] hover:bg-[#D8E8FF]'
                }`}
              >
                {pulse}
              </button>
            ))}
          </div>
        </FilterSection>

        {/* Date Range Filter */}
        <FilterSection
          title="Date Range"
          expanded={expandedSections.dateRange}
          onToggle={() => toggleSection('dateRange')}
        >
          <div className="grid grid-cols-2 gap-3">
            <Input
              type="date"
              value={filters.dateRange.start}
              onChange={(e) => updateDateRange('start', e.target.value)}
              label="From"
            />
            <Input
              type="date"
              value={filters.dateRange.end}
              onChange={(e) => updateDateRange('end', e.target.value)}
              label="To"
            />
          </div>
        </FilterSection>

        {/* Action Buttons */}
        <div className="flex gap-2 pt-4 border-t border-[#C7D2E1]/20">
          <GlowButton
            variant="primary"
            size="sm"
            onClick={() => setShowSaveDialog(true)}
            disabled={activeFilterCount === 0}
          >
            Save Filter
          </GlowButton>
          <GlowButton variant="secondary" size="sm" onClick={clearFilters}>
            Reset
          </GlowButton>
        </div>

        {/* Save Dialog */}
        {showSaveDialog && (
          <div className="p-3 bg-[#F9FBFF] border border-[#C7D2E1] rounded-lg space-y-2">
            <Input
              placeholder="Filter name (e.g., 'High Risk Catastrophes')"
              value={filterName}
              onChange={(e) => setFilterName(e.target.value)}
            />
            <div className="flex gap-2">
              <GlowButton variant="primary" size="sm" onClick={handleSaveFilter}>
                Save
              </GlowButton>
              <GlowButton variant="ghost" size="sm" onClick={() => setShowSaveDialog(false)}>
                Cancel
              </GlowButton>
            </div>
          </div>
        )}
      </div>
    </GlassCard>
  );
}

interface FilterSectionProps {
  title: string;
  expanded: boolean;
  onToggle: () => void;
  children: React.ReactNode;
}

function FilterSection({ title, expanded, onToggle, children }: FilterSectionProps) {
  return (
    <div className="border-b border-[#C7D2E1]/20 pb-3 last:border-b-0">
      <button
        onClick={onToggle}
        className="flex items-center justify-between w-full text-sm font-semibold text-[#0F172A] hover:text-[#5AA6FF] transition-colors"
      >
        {title}
        <ChevronDown
          size={16}
          className={`transition-transform ${expanded ? 'rotate-180' : ''}`}
        />
      </button>
      {expanded && <div className="mt-3 space-y-2">{children}</div>}
    </div>
  );
}




================================================================================
FILE: src/components/features/Bookmarks.tsx
================================================================================

/**
 * Bookmarks Component
 * Manage saved articles and events
 */

import { useState } from 'react';
import { GlassCard, GlowButton, Badge } from '../primitives';
import { Bookmark, Trash2, Share2, Download } from 'lucide-react';

export interface BookmarkedItem {
  id: string;
  url: string;
  title: string;
  source: string;
  savedAt: string;
  notes?: string;
  tags?: string[];
}

interface BookmarksProps {
  items: BookmarkedItem[];
  onRemove: (id: string) => void;
  onExport?: (format: 'pdf' | 'csv' | 'json') => void;
}

export function Bookmarks({ items, onRemove, onExport }: BookmarksProps) {
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());
  const [sortBy, setSortBy] = useState<'date' | 'title'>('date');
  const [filterTag, setFilterTag] = useState<string | null>(null);

  const allTags = Array.from(new Set(items.flatMap((item) => item.tags || [])));

  const filteredItems = filterTag
    ? items.filter((item) => item.tags?.includes(filterTag))
    : items;

  const sortedItems = [...filteredItems].sort((a, b) => {
    if (sortBy === 'date') {
      return new Date(b.savedAt).getTime() - new Date(a.savedAt).getTime();
    }
    return a.title.localeCompare(b.title);
  });

  const toggleSelect = (id: string) => {
    const newSelected = new Set(selectedItems);
    if (newSelected.has(id)) {
      newSelected.delete(id);
    } else {
      newSelected.add(id);
    }
    setSelectedItems(newSelected);
  };

  const toggleSelectAll = () => {
    if (selectedItems.size === sortedItems.length) {
      setSelectedItems(new Set());
    } else {
      setSelectedItems(new Set(sortedItems.map((item) => item.id)));
    }
  };

  const handleRemoveSelected = () => {
    selectedItems.forEach((id) => onRemove(id));
    setSelectedItems(new Set());
  };

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Bookmark size={24} className="text-[#5AA6FF]" />
          <h2 className="text-2xl font-bold text-[#0F172A]">Bookmarks</h2>
          <Badge variant="info">{items.length}</Badge>
        </div>
      </div>

      {items.length === 0 ? (
        <GlassCard variant="premium" className="text-center py-12">
          <Bookmark size={48} className="mx-auto text-[#C7D2E1] mb-4" />
          <p className="text-[#64748B]">No bookmarks yet. Save articles to get started.</p>
        </GlassCard>
      ) : (
        <>
          {/* Controls */}
          <GlassCard variant="default" className="flex items-center justify-between gap-4">
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={selectedItems.size === sortedItems.length && sortedItems.length > 0}
                onChange={toggleSelectAll}
                className="w-4 h-4 rounded border-[#C7D2E1] text-[#5AA6FF]"
              />
              <span className="text-sm text-[#64748B]">
                {selectedItems.size > 0 ? `${selectedItems.size} selected` : 'Select all'}
              </span>
            </div>

            <div className="flex items-center gap-2">
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as 'date' | 'title')}
                className="px-3 py-1.5 text-sm rounded-lg bg-[#F9FBFF] border border-[#C7D2E1] text-[#0F172A]"
              >
                <option value="date">Sort by Date</option>
                <option value="title">Sort by Title</option>
              </select>

              {selectedItems.size > 0 && (
                <>
                  <GlowButton
                    variant="secondary"
                    size="sm"
                    icon={<Download size={16} />}
                    onClick={() => onExport?.('pdf')}
                  >
                    Export
                  </GlowButton>
                  <GlowButton
                    variant="danger"
                    size="sm"
                    icon={<Trash2 size={16} />}
                    onClick={handleRemoveSelected}
                  >
                    Delete
                  </GlowButton>
                </>
              )}
            </div>
          </GlassCard>

          {/* Tag Filter */}
          {allTags.length > 0 && (
            <div className="flex flex-wrap gap-2">
              <button
                onClick={() => setFilterTag(null)}
                className={`px-3 py-1.5 rounded-full text-sm font-medium transition-all ${
                  filterTag === null
                    ? 'bg-[#5AA6FF] text-white'
                    : 'bg-[#E8F2FF] text-[#5AA6FF] hover:bg-[#D8E8FF]'
                }`}
              >
                All
              </button>
              {allTags.map((tag) => (
                <button
                  key={tag}
                  onClick={() => setFilterTag(tag)}
                  className={`px-3 py-1.5 rounded-full text-sm font-medium transition-all ${
                    filterTag === tag
                      ? 'bg-[#5AA6FF] text-white'
                      : 'bg-[#E8F2FF] text-[#5AA6FF] hover:bg-[#D8E8FF]'
                  }`}
                >
                  {tag}
                </button>
              ))}
            </div>
          )}

          {/* Bookmarks List */}
          <div className="space-y-2">
            {sortedItems.map((item) => (
              <GlassCard
                key={item.id}
                variant="default"
                className="flex items-start gap-4 p-4 hover:shadow-md transition-all"
              >
                <input
                  type="checkbox"
                  checked={selectedItems.has(item.id)}
                  onChange={() => toggleSelect(item.id)}
                  className="w-4 h-4 rounded border-[#C7D2E1] text-[#5AA6FF] mt-1"
                />

                <div className="flex-1 min-w-0">
                  <a
                    href={item.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-sm font-semibold text-[#5AA6FF] hover:underline line-clamp-2"
                  >
                    {item.title}
                  </a>
                  <p className="text-xs text-[#64748B] mt-1">{item.source}</p>
                  {item.notes && <p className="text-xs text-[#0F172A] mt-2 italic">{item.notes}</p>}
                  {item.tags && item.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      {item.tags.map((tag) => (
                        <Badge key={tag} variant="default" size="sm">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  )}
                  <p className="text-xs text-[#94A3B8] mt-2">
                    Saved {new Date(item.savedAt).toLocaleDateString()}
                  </p>
                </div>

                <div className="flex items-center gap-1">
                  <button
                    onClick={() => {
                      navigator.share({ url: item.url, title: item.title });
                    }}
                    className="p-2 hover:bg-[#E8F2FF] rounded-lg transition-colors"
                    title="Share"
                  >
                    <Share2 size={16} className="text-[#64748B]" />
                  </button>
                  <button
                    onClick={() => onRemove(item.id)}
                    className="p-2 hover:bg-[#FEE2E2] rounded-lg transition-colors"
                    title="Remove"
                  >
                    <Trash2 size={16} className="text-[#EF4444]" />
                  </button>
                </div>
              </GlassCard>
            ))}
          </div>
        </>
      )}
    </div>
  );
}




================================================================================
FILE: src/components/features/index.ts
================================================================================

/**
 * Features Components Export
 * Professional UX features for CarrierSignal
 */

export { AdvancedFilter } from './AdvancedFilter';
export type { FilterState } from './AdvancedFilter';

export { Bookmarks } from './Bookmarks';
export type { BookmarkedItem } from './Bookmarks';




================================================================================
FILE: src/components/primitives/Badge.tsx
================================================================================

/**
 * Badge Component
 * Reusable badge for tags, labels, and status indicators
 * Supports LOB, peril, region, and semantic variants
 * Features glow effects, micro-animations, and accessibility
 */

import type { ReactNode, HTMLAttributes, KeyboardEvent } from 'react';

export interface BadgeProps extends HTMLAttributes<HTMLSpanElement> {
  children: ReactNode;
  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info' | 'lob' | 'peril' | 'region' | 'company' | 'trend' | 'regulation';
  size?: 'sm' | 'md';
  className?: string;
  interactive?: boolean;
  onClick?: () => void;
  glow?: boolean;
  ariaLabel?: string;
}

export function Badge({
  children,
  variant = 'default',
  size = 'sm',
  className = '',
  interactive = false,
  onClick,
  glow = false,
  ariaLabel,
  ...props
}: BadgeProps) {
  const baseClasses = 'inline-flex items-center font-medium rounded-full transition-all duration-200 will-change-transform';

  const variantClasses = {
    default: 'bg-[#E8F2FF] text-[#5AA6FF] border border-[#C7D2E1]',
    success: 'bg-[#D1FAE5] text-[#059669] border border-[#6EE7B7]',
    warning: 'bg-[#FEF3C7] text-[#D97706] border border-[#FCD34D]',
    danger: 'bg-[#FEE2E2] text-[#DC2626] border border-[#FCA5A5]',
    info: 'bg-[#E0E7FF] text-[#4F46E5] border border-[#A5B4FC]',
    lob: 'bg-gradient-to-r from-[#E0E7FF] to-[#C7D2FE] text-[#4338CA] border border-[#A5B4FC]',
    peril: 'bg-gradient-to-r from-[#FEE2E2] to-[#FECACA] text-[#991B1B] border border-[#FCA5A5]',
    region: 'bg-gradient-to-r from-[#D1FAE5] to-[#A7F3D0] text-[#065F46] border border-[#6EE7B7]',
    company: 'bg-gradient-to-r from-[#E0F2FE] to-[#F0F7FF] text-[#0369A1] border border-[#7DD3FC]',
    trend: 'bg-gradient-to-r from-[#FEF3C7] to-[#FDE68A] text-[#92400E] border border-[#FCD34D]',
    regulation: 'bg-gradient-to-r from-[#F1F5F9] to-[#E2E8F0] text-[#334155] border border-[#CBD5E1]',
  };

  const sizeClasses = {
    sm: 'px-2 py-1 text-xs',
    md: 'px-3 py-1.5 text-sm',
  };

  const glowClasses = glow
    ? 'shadow-md shadow-[#5AA6FF]/20 hover:shadow-lg hover:shadow-[#5AA6FF]/30'
    : '';

  const interactiveClasses = interactive
    ? 'cursor-pointer hover:scale-105 active:scale-95 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF]'
    : '';

  const handleKeyDown = (e: KeyboardEvent<HTMLSpanElement>) => {
    if (interactive && (e.key === 'Enter' || e.key === ' ')) {
      e.preventDefault();
      onClick?.();
    }
  };

  return (
    <span
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${glowClasses} ${interactiveClasses} ${className}`}
      onClick={onClick}
      onKeyDown={handleKeyDown}
      role={interactive ? 'button' : 'status'}
      tabIndex={interactive ? 0 : undefined}
      aria-label={ariaLabel}
      {...props}
    >
      {children}
    </span>
  );
}




================================================================================
FILE: src/components/primitives/GlassCard.tsx
================================================================================

/**
 * GlassCard Component
 * Reusable liquid glass card primitive with consistent styling
 * Supports three glass effect intensities: default, premium, ultra
 * Fully accessible with keyboard navigation and ARIA support
 */

import type { ReactNode, HTMLAttributes, KeyboardEvent } from 'react';

export interface GlassCardProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode;
  className?: string;
  variant?: 'default' | 'premium' | 'ultra';
  interactive?: boolean;
  onClick?: () => void;
  ariaLabel?: string;
  ariaDescribedBy?: string;
}

export function GlassCard({
  children,
  className = '',
  variant = 'default',
  interactive = false,
  onClick,
  ariaLabel,
  ariaDescribedBy,
  ...props
}: GlassCardProps) {
  const baseClasses = 'rounded-xl p-4 transition-all duration-300 will-change-transform';

  const variantClasses = {
    default: 'liquid-glass',
    premium: 'liquid-glass-premium',
    ultra: 'liquid-glass-ultra',
  };

  const interactiveClasses = interactive
    ? 'cursor-pointer hover:shadow-lg hover:scale-[1.02] active:scale-[0.98] focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF]'
    : '';

  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {
    if (interactive && (e.key === 'Enter' || e.key === ' ')) {
      e.preventDefault();
      onClick?.();
    }
  };

  return (
    <div
      className={`${baseClasses} ${variantClasses[variant]} ${interactiveClasses} ${className}`}
      onClick={onClick}
      onKeyDown={handleKeyDown}
      role={interactive ? 'button' : undefined}
      tabIndex={interactive ? 0 : undefined}
      aria-label={ariaLabel}
      aria-describedby={ariaDescribedBy}
      {...props}
    >
      {children}
    </div>
  );
}




================================================================================
FILE: src/components/primitives/GlowButton.tsx
================================================================================

/**
 * GlowButton Component
 * Reusable button with glow effects and Aurora color support
 * Supports primary (gradient), secondary (light), and ghost variants
 * Fully accessible with ARIA attributes and keyboard support
 */

import type { ReactNode, ButtonHTMLAttributes } from 'react';

export interface GlowButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'ghost' | 'danger' | 'success';
  size?: 'sm' | 'md' | 'lg';
  glow?: boolean;
  loading?: boolean;
  icon?: ReactNode;
  ariaLabel?: string;
  ariaDescribedBy?: string;
}

export function GlowButton({
  children,
  variant = 'primary',
  size = 'md',
  glow = true,
  loading = false,
  icon,
  className = '',
  disabled,
  ariaLabel,
  ariaDescribedBy,
  ...props
}: GlowButtonProps) {
  const baseClasses = 'font-medium rounded-lg transition-all duration-300 flex items-center justify-center gap-2 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF] will-change-transform';

  const variantClasses = {
    primary: 'bg-gradient-to-r from-[#5AA6FF] to-[#8B7CFF] text-white hover:shadow-lg hover:shadow-[#5AA6FF]/40 active:scale-95',
    secondary: 'bg-[#E8F2FF] text-[#5AA6FF] border border-[#C7D2E1] hover:bg-[#D8E8FF] active:bg-[#C8DEFF]',
    ghost: 'text-[#5AA6FF] hover:bg-[#E8F2FF]/50 active:bg-[#D8E8FF]',
    danger: 'bg-[#EF4444] text-white hover:bg-[#DC2626] active:scale-95',
    success: 'bg-[#06B6D4] text-white hover:bg-[#0891B2] active:scale-95',
  };

  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm min-h-[44px] min-w-[44px]',
    md: 'px-4 py-2 text-base min-h-[44px] min-w-[44px]',
    lg: 'px-6 py-3 text-lg min-h-[48px] min-w-[48px]',
  };

  const glowClasses = glow && (variant === 'primary' || variant === 'success')
    ? 'shadow-lg shadow-[#5AA6FF]/30 hover:shadow-xl hover:shadow-[#5AA6FF]/40'
    : '';

  const disabledClasses = disabled || loading
    ? 'opacity-50 cursor-not-allowed'
    : '';

  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${glowClasses} ${disabledClasses} ${className}`}
      disabled={disabled || loading}
      aria-label={ariaLabel}
      aria-describedby={ariaDescribedBy}
      aria-busy={loading}
      {...props}
    >
      {loading && (
        <div
          className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"
          role="status"
          aria-label="Loading"
        />
      )}
      {icon && !loading && <span className="flex items-center" aria-hidden="true">{icon}</span>}
      {children}
    </button>
  );
}




================================================================================
FILE: src/components/primitives/Input.tsx
================================================================================

/**
 * Input Component
 * Reusable form input with liquid glass styling
 * Supports error states, helper text, and icons
 * WCAG 2.1 compliant with proper ARIA attributes
 */

import type { InputHTMLAttributes } from 'react';
import { useId } from 'react';
import { AlertCircle, CheckCircle } from 'lucide-react';

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
  icon?: React.ReactNode;
  variant?: 'default' | 'filled';
  success?: boolean;
}

export function Input({
  label,
  error,
  helperText,
  icon,
  variant = 'default',
  success = false,
  className = '',
  id: providedId,
  ...props
}: InputProps) {
  const generatedId = useId();
  const id = providedId || generatedId;
  const errorId = `${id}-error`;
  const helperId = `${id}-helper`;

  const variantClasses = {
    default: 'liquid-glass-light border border-[#C7D2E1]/30 focus:border-[#5AA6FF]/50',
    filled: 'bg-[#F9FBFF] border border-[#C7D2E1]/20 focus:border-[#5AA6FF]/50',
  };

  const stateClasses = error
    ? 'border-[#EF4444] focus:ring-[#EF4444]/20'
    : success
      ? 'border-[#06B6D4] focus:ring-[#06B6D4]/20'
      : 'focus:ring-[#5AA6FF]/20';

  const ariaDescribedBy = [
    error ? errorId : null,
    helperText && !error ? helperId : null,
  ]
    .filter(Boolean)
    .join(' ') || undefined;

  return (
    <div className="w-full">
      {label && (
        <label htmlFor={id} className="block text-sm font-semibold text-[#0F172A] mb-2">
          {label}
          {props.required && <span className="text-[#EF4444] ml-1" aria-label="required">*</span>}
        </label>
      )}
      <div className="relative">
        {icon && (
          <div className="absolute left-3 top-1/2 -translate-y-1/2 text-[#64748B] pointer-events-none" aria-hidden="true">
            {icon}
          </div>
        )}
        <input
          id={id}
          className={`
            w-full px-4 py-2.5 rounded-lg text-sm text-[#0F172A] placeholder-[#94A3B8]
            transition-all duration-300 focus:outline-none focus:ring-2 min-h-[44px]
            ${icon ? 'pl-10' : ''}
            ${success && !error ? 'pr-10' : ''}
            ${variantClasses[variant]}
            ${stateClasses}
            ${className}
          `}
          aria-invalid={error ? 'true' : 'false'}
          aria-describedby={ariaDescribedBy}
          {...props}
        />
        {success && !error && (
          <div className="absolute right-3 top-1/2 -translate-y-1/2 text-[#06B6D4] pointer-events-none" aria-hidden="true">
            <CheckCircle size={18} />
          </div>
        )}
        {error && (
          <div className="absolute right-3 top-1/2 -translate-y-1/2 text-[#EF4444] pointer-events-none" aria-hidden="true">
            <AlertCircle size={18} />
          </div>
        )}
      </div>
      {error && (
        <div id={errorId} className="flex items-center gap-1.5 mt-2 text-[#EF4444]" role="alert">
          <span className="text-xs font-medium">{error}</span>
        </div>
      )}
      {helperText && !error && (
        <p id={helperId} className="text-xs text-[#94A3B8] mt-1.5">{helperText}</p>
      )}
    </div>
  );
}




================================================================================
FILE: src/components/primitives/Modal.tsx
================================================================================

/**
 * Modal Component
 * Accessible modal dialog with liquid glass styling
 * Supports multiple sizes and keyboard navigation (Escape to close)
 * WCAG 2.1 Level AA compliant with focus management
 */

import { useEffect, useRef, useId } from 'react';
import type { ReactNode } from 'react';
import { X } from 'lucide-react';

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  closeButton?: boolean;
  closeOnEscape?: boolean;
  closeOnBackdropClick?: boolean;
  description?: string;
}

export function Modal({
  isOpen,
  onClose,
  title,
  children,
  size = 'md',
  closeButton = true,
  closeOnEscape = true,
  closeOnBackdropClick = true,
  description,
}: ModalProps) {
  const modalRef = useRef<HTMLDivElement>(null);
  const previousActiveElement = useRef<HTMLElement | null>(null);
  const descriptionId = useId();

  useEffect(() => {
    if (isOpen) {
      // Store the previously focused element
      previousActiveElement.current = document.activeElement as HTMLElement;

      // Prevent body scroll
      document.body.style.overflow = 'hidden';

      // Focus the modal or close button
      setTimeout(() => {
        if (closeButton && modalRef.current) {
          const closeBtn = modalRef.current.querySelector('button[aria-label="Close modal"]') as HTMLButtonElement;
          closeBtn?.focus();
        } else if (modalRef.current) {
          modalRef.current.focus();
        }
      }, 0);

      const handleEscape = (e: KeyboardEvent) => {
        if (closeOnEscape && e.key === 'Escape') {
          e.preventDefault();
          onClose();
        }
      };

      document.addEventListener('keydown', handleEscape);
      return () => {
        document.removeEventListener('keydown', handleEscape);
        document.body.style.overflow = 'unset';

        // Restore focus to the previously focused element
        if (previousActiveElement.current) {
          previousActiveElement.current.focus();
        }
      };
    }
  }, [isOpen, closeOnEscape, onClose, closeButton]);

  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-lg',
    xl: 'max-w-xl',
  };

  return (
    <div
      className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4 animate-fadeIn overflow-hidden"
      onClick={closeOnBackdropClick ? onClose : undefined}
      role="presentation"
      aria-hidden={!isOpen}
    >
      <div
        ref={modalRef}
        className={`w-full ${sizeClasses[size]} liquid-glass-ultra rounded-2xl shadow-2xl border border-[#C7D2E1]/30 animate-scaleIn max-h-[90vh] flex flex-col focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF]`}
        onClick={(e) => e.stopPropagation()}
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? 'modal-title' : undefined}
        aria-describedby={description ? descriptionId : undefined}
        tabIndex={-1}
      >
        {(title || closeButton) && (
          <div className="flex items-center justify-between p-6 border-b border-[#C7D2E1]/20 flex-shrink-0">
            {title && (
              <h2 id="modal-title" className="text-xl font-semibold text-[#0F172A]">
                {title}
              </h2>
            )}
            {closeButton && (
              <button
                onClick={onClose}
                className="ml-auto p-2 hover:bg-[#E8F2FF] rounded-lg transition-colors focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF] min-h-[44px] min-w-[44px] flex items-center justify-center"
                aria-label="Close modal"
              >
                <X size={20} className="text-[#64748B]" />
              </button>
            )}
          </div>
        )}
        {description && (
          <div id={descriptionId} className="sr-only">
            {description}
          </div>
        )}
        <div className="p-6 overflow-y-auto flex-1">{children}</div>
      </div>
    </div>
  );
}




================================================================================
FILE: src/components/primitives/Spinner.tsx
================================================================================

/**
 * Spinner Component
 * Loading indicator with Aurora gradient animation
 * Supports multiple sizes and variants
 * Respects prefers-reduced-motion for accessibility
 */

import type { CSSProperties } from 'react';

export interface SpinnerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  variant?: 'gradient' | 'pulse' | 'dots';
  className?: string;
  label?: string;
}

export function Spinner({
  size = 'md',
  variant = 'gradient',
  className = '',
  label,
}: SpinnerProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12',
    xl: 'w-16 h-16',
  };

  const gradientStyle: CSSProperties = {
    background: 'conic-gradient(from 0deg, #5AA6FF, #8B7CFF, #B08CFF, #5AA6FF)',
    WebkitMaskImage: 'radial-gradient(farthest-side, transparent calc(100% - 2px), #000 calc(100% - 1px))',
    maskImage: 'radial-gradient(farthest-side, transparent calc(100% - 2px), #000 calc(100% - 1px))',
    animation: 'spin 1s linear infinite',
  };

  const pulseStyle: CSSProperties = {
    background: 'linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%)',
    animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
  };

  if (variant === 'dots') {
    return (
      <div
        className={`flex items-center gap-1 ${className}`}
        role="status"
        aria-label={label || 'Loading'}
        aria-live="polite"
      >
        <div
          className={`${sizeClasses[size]} rounded-full bg-[#5AA6FF] animate-bounce`}
          style={{ animationDelay: '0s' }}
          aria-hidden="true"
        />
        <div
          className={`${sizeClasses[size]} rounded-full bg-[#8B7CFF] animate-bounce`}
          style={{ animationDelay: '0.2s' }}
          aria-hidden="true"
        />
        <div
          className={`${sizeClasses[size]} rounded-full bg-[#B08CFF] animate-bounce`}
          style={{ animationDelay: '0.4s' }}
          aria-hidden="true"
        />
      </div>
    );
  }

  return (
    <div
      className={`${sizeClasses[size]} rounded-full ${className}`}
      style={variant === 'gradient' ? gradientStyle : pulseStyle}
      role="status"
      aria-label={label || 'Loading'}
      aria-live="polite"
    />
  );
}




================================================================================
FILE: src/components/primitives/Tooltip.tsx
================================================================================

/**
 * Tooltip Component
 * Accessible tooltip with Aurora styling
 * Supports multiple positions and keyboard accessibility
 * WCAG 2.1 compliant with proper ARIA attributes
 */

import { useState, useRef, useId } from 'react';
import type { ReactNode } from 'react';

export interface TooltipProps {
  content: string;
  children: ReactNode;
  position?: 'top' | 'bottom' | 'left' | 'right';
  delay?: number;
  variant?: 'dark' | 'light';
  disabled?: boolean;
}

export function Tooltip({
  content,
  children,
  position = 'top',
  delay = 200,
  variant = 'dark',
  disabled = false,
}: TooltipProps) {
  const [isVisible, setIsVisible] = useState(false);
  const [timeoutId, setTimeoutId] = useState<ReturnType<typeof setTimeout> | null>(null);
  const triggerRef = useRef<HTMLDivElement>(null);
  const tooltipId = useId();

  const handleMouseEnter = () => {
    if (disabled) return;
    const id = setTimeout(() => setIsVisible(true), delay);
    setTimeoutId(id);
  };

  const handleMouseLeave = () => {
    if (timeoutId) clearTimeout(timeoutId);
    setIsVisible(false);
  };

  const handleFocus = () => {
    if (disabled) return;
    setIsVisible(true);
  };

  const handleBlur = () => {
    setIsVisible(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape' && isVisible) {
      setIsVisible(false);
    }
  };

  const positionClasses = {
    top: 'bottom-full mb-2 left-1/2 -translate-x-1/2',
    bottom: 'top-full mt-2 left-1/2 -translate-x-1/2',
    left: 'right-full mr-2 top-1/2 -translate-y-1/2',
    right: 'left-full ml-2 top-1/2 -translate-y-1/2',
  };

  const variantClasses = {
    dark: 'bg-[#0F172A] text-white',
    light: 'bg-[#F9FBFF] text-[#0F172A] border border-[#C7D2E1]',
  };

  const arrowClasses = {
    dark: 'bg-[#0F172A]',
    light: 'bg-[#F9FBFF] border border-[#C7D2E1]',
  };

  return (
    <div
      ref={triggerRef}
      className="relative inline-block"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      onFocus={handleFocus}
      onBlur={handleBlur}
      onKeyDown={handleKeyDown}
    >
      {children}
      {isVisible && !disabled && (
        <div
          id={tooltipId}
          className={`absolute ${positionClasses[position]} px-3 py-2 ${variantClasses[variant]} text-sm rounded-lg whitespace-nowrap shadow-lg z-50 animate-fadeIn pointer-events-none`}
          role="tooltip"
          aria-hidden={!isVisible}
        >
          {content}
          <div
            className={`absolute w-2 h-2 ${arrowClasses[variant]} transform rotate-45 ${
              position === 'top'
                ? 'top-full -mt-1 left-1/2 -translate-x-1/2'
                : position === 'bottom'
                  ? 'bottom-full mt-1 left-1/2 -translate-x-1/2'
                  : position === 'left'
                    ? 'left-full -ml-1 top-1/2 -translate-y-1/2'
                    : 'right-full ml-1 top-1/2 -translate-y-1/2'
            }`}
            aria-hidden="true"
          />
        </div>
      )}
    </div>
  );
}




================================================================================
FILE: src/components/primitives/index.ts
================================================================================

/**
 * Primitive Components Export
 * Reusable UI building blocks for the liquid glass design system
 */

export { GlassCard } from './GlassCard';
export type { GlassCardProps } from './GlassCard';

export { GlowButton } from './GlowButton';
export type { GlowButtonProps } from './GlowButton';

export { Badge } from './Badge';
export type { BadgeProps } from './Badge';

export { Input } from './Input';
export type { InputProps } from './Input';

export { Modal } from './Modal';
export type { ModalProps } from './Modal';

export { Spinner } from './Spinner';
export type { SpinnerProps } from './Spinner';

export { Tooltip } from './Tooltip';
export type { TooltipProps } from './Tooltip';

// Re-export design tokens
export * from '../../design/tokens';




================================================================================
FILE: src/config.ts
================================================================================

/**
 * Centralized Configuration for CarrierSignal
 * 
 * All configuration values are defined here for easy management
 */

// ============================================================================
// API & ENDPOINTS
// ============================================================================

export const API_CONFIG = {
  // Firebase Functions base URL
  FUNCTIONS_URL: import.meta.env.VITE_FUNCTIONS_URL || 'http://localhost:5001/carriersignal-prod/us-central1',
  
  // API endpoints
  ENDPOINTS: {
    ASK_BRIEF: '/askBrief',
    REFRESH_FEEDS: '/refreshFeedsWithBatching',
  },
};

// ============================================================================
// FIRESTORE COLLECTIONS
// ============================================================================

export const FIRESTORE_COLLECTIONS = {
  ARTICLES: 'articles',
  ARTICLE_EMBEDDINGS: 'article_embeddings',
  FEED_SOURCES: 'feed_sources',
  RATE_LIMITS: 'rate_limits',
};

// ============================================================================
// RAG & SEARCH
// ============================================================================

export const RAG_CONFIG = {
  // Hybrid retrieval parameters
  HYBRID_RETRIEVAL: {
    INITIAL_FETCH: 500,      // Fetch top 500 articles for MMR
    COSINE_SIMILARITY_TOP_K: 20,  // Top 20 for MMR re-ranking
    MMR_FINAL_K: 12,         // Final 12 articles after MMR
    MMR_LAMBDA: 0.7,         // Balance between relevance (0.7) and diversity (0.3)
  },
  
  // Cluster diversity
  CLUSTER_DIVERSITY: {
    MAX_PER_CLUSTER: 1,      // Max 1 article per cluster
  },
  
  // Recency boost
  RECENCY_BOOST: {
    WEIGHT: 0.1,             // Recency boost weight
    WINDOW_DAYS: 30,         // 30-day window for recency boost
  },
};

// ============================================================================
// RATE LIMITING
// ============================================================================

export const RATE_LIMIT_CONFIG = {
  WINDOW_MS: 60 * 1000,      // 1 minute window
  MAX_REQUESTS: 100,         // Max 100 requests per window
  TTL_SECONDS: 3600,         // 1 hour TTL for rate limit records
};

// ============================================================================
// LINK VALIDATION
// ============================================================================

export const LINK_CONFIG = {
  TRUSTED_DOMAINS: [
    'insurancejournal.com',
    'naic.org',
    'reuters.com',
    'bloomberg.com',
    'cnbc.com',
    'wsj.com',
    'ft.com',
    'bbc.com',
    'apnews.com',
    'businesswire.com',
    'prnewswire.com',
    'sec.gov',
    'treasury.gov',
    'federalreserve.gov',
  ],
  
  TRACKING_PARAMS: [
    'utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term',
    'fbclid', 'gclid', 'msclkid', 'ref', 'source', 'campaign',
    'tracking_id', 'track_id', 'cid', 'sid'
  ],
};

// ============================================================================
// AI & SUMMARIZATION
// ============================================================================

export const AI_CONFIG = {
  // OpenAI models
  MODELS: {
    SUMMARIZATION: 'gpt-4o-mini',
    EMBEDDING: 'text-embedding-3-small',
    SCORING: 'gpt-4o-mini',
  },
  
  // Embedding dimensions
  EMBEDDING_DIMENSIONS: 512,
  
  // Timeout & retry
  TIMEOUT_MS: 10000,         // 10 second timeout
  MAX_RETRIES: 2,            // Max 2 retries
  RETRY_DELAYS_MS: [1000, 2000], // 1s, 2s exponential backoff
  
  // Fallback scores
  FALLBACK_SCORE: 50,        // Default score if AI fails
};

// ============================================================================
// FEED SOURCES
// ============================================================================

export const DEFAULT_FEED_SOURCES = [
  {
    url: 'https://www.insurancejournal.com/rss/news/national/',
    category: 'news',
    priority: 1,
  },
  {
    url: 'https://www.naic.org/rss/press_releases.xml',
    category: 'regulatory',
    priority: 2,
  },
  {
    url: 'https://www.sba.gov/rss/news.xml',
    category: 'regulatory',
    priority: 3,
  },
  {
    url: 'https://www.nhc.noaa.gov/rss_besttrack.xml',
    category: 'catastrophe',
    priority: 1,
  },
  {
    url: 'https://www.usgs.gov/faqs/rss.xml',
    category: 'catastrophe',
    priority: 2,
  },
  {
    url: 'https://www.reinsurancene.ws/feed/',
    category: 'reinsurance',
    priority: 2,
  },
  {
    url: 'https://www.insurtech.news/feed/',
    category: 'technology',
    priority: 3,
  },
];

// ============================================================================
// LOGGING
// ============================================================================

export const LOGGING_CONFIG = {
  // Log levels
  LEVELS: {
    DEBUG: 'DEBUG',
    INFO: 'INFO',
    WARN: 'WARN',
    ERROR: 'ERROR',
  },
  
  // Default log level
  DEFAULT_LEVEL: 'INFO',
  
  // Include batch IDs in logs
  INCLUDE_BATCH_ID: true,
  
  // Include latency metrics
  INCLUDE_LATENCY: true,
};

// ============================================================================
// FEATURE FLAGS
// ============================================================================

export const FEATURE_FLAGS = {
  // Enable/disable features
  ENABLE_SEMANTIC_SEARCH: true,
  ENABLE_HYBRID_RETRIEVAL: true,
  ENABLE_RATE_LIMITING: true,
  ENABLE_LINK_VALIDATION: true,
  ENABLE_STRUCTURED_LOGGING: true,
};




================================================================================
FILE: src/constants/options.ts
================================================================================

/**
 * Shared constants for role and sort options
 */

import { FileText, AlertCircle, Handshake, TrendingUp, Sparkles, Clock } from 'lucide-react';
import type { RoleOption, SortOption } from '../types';

export const ROLE_OPTIONS: RoleOption[] = [
  { id: 'underwriting', label: 'Underwriting', icon: FileText },
  { id: 'claims', label: 'Claims', icon: AlertCircle },
  { id: 'brokerage', label: 'Brokerage', icon: Handshake },
  { id: 'actuarial', label: 'Actuarial', icon: TrendingUp },
];

export const SORT_OPTIONS: SortOption[] = [
  { id: 'smart', label: 'AI Sort (AI + Recency)', icon: Sparkles },
  { id: 'recency', label: 'Recent', icon: Clock },
];




================================================================================
FILE: src/context/ArticleContext.tsx
================================================================================

/**
 * Article Context Provider
 * Centralizes article state management and provides global access to article data
 */

import { createContext, useContext, useState, useCallback } from 'react';
import type { ReactNode } from 'react';
import type { Article } from '../types';

interface ArticleContextType {
  articles: Article[];
  setArticles: (articles: Article[]) => void;
  selectedArticle: Article | null;
  setSelectedArticle: (article: Article | null) => void;
  addArticles: (articles: Article[]) => void;
  removeArticle: (url: string) => void;
  updateArticle: (url: string, updates: Partial<Article>) => void;
  clearArticles: () => void;
}

const ArticleContext = createContext<ArticleContextType | undefined>(undefined);

export function ArticleProvider({ children }: { children: ReactNode }) {
  const [articles, setArticles] = useState<Article[]>([]);
  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);

  const addArticles = useCallback((newArticles: Article[]) => {
    setArticles((prev) => {
      const urls = new Set(prev.map((a) => a.url));
      const filtered = newArticles.filter((a) => !urls.has(a.url));
      return [...prev, ...filtered];
    });
  }, []);

  const removeArticle = useCallback((url: string) => {
    setArticles((prev) => prev.filter((a) => a.url !== url));
  }, []);

  const updateArticle = useCallback((url: string, updates: Partial<Article>) => {
    setArticles((prev) =>
      prev.map((a) => (a.url === url ? { ...a, ...updates } : a))
    );
  }, []);

  const clearArticles = useCallback(() => {
    setArticles([]);
    setSelectedArticle(null);
  }, []);

  const value: ArticleContextType = {
    articles,
    setArticles,
    selectedArticle,
    setSelectedArticle,
    addArticles,
    removeArticle,
    updateArticle,
    clearArticles,
  };

  return (
    <ArticleContext.Provider value={value}>
      {children}
    </ArticleContext.Provider>
  );
}

export function useArticles() {
  const context = useContext(ArticleContext);
  if (!context) {
    throw new Error('useArticles must be used within ArticleProvider');
  }
  return context;
}




================================================================================
FILE: src/context/UIContext.tsx
================================================================================

/**
 * UI Context Provider
 * Manages global UI state: view mode, sort mode, palette state, etc.
 */

import { createContext, useContext, useState } from 'react';
import type { ReactNode } from 'react';

type ViewMode = 'feed' | 'dashboard' | 'bookmarks' | 'settings';
type SortMode = 'smart' | 'recency';

interface UIContextType {
  view: ViewMode;
  setView: (view: ViewMode) => void;
  sortMode: SortMode;
  setSortMode: (mode: SortMode) => void;
  isPaletteOpen: boolean;
  setIsPaletteOpen: (open: boolean) => void;
  quickReadArticleUrl: string | null;
  setQuickReadArticleUrl: (url: string | null) => void;
}

const UIContext = createContext<UIContextType | undefined>(undefined);

export function UIProvider({ children }: { children: ReactNode }) {
  const [view, setView] = useState<ViewMode>('feed');
  const [sortMode, setSortMode] = useState<SortMode>('smart');
  const [isPaletteOpen, setIsPaletteOpen] = useState(false);
  const [quickReadArticleUrl, setQuickReadArticleUrl] = useState<string | null>(null);

  const value: UIContextType = {
    view,
    setView,
    sortMode,
    setSortMode,
    isPaletteOpen,
    setIsPaletteOpen,
    quickReadArticleUrl,
    setQuickReadArticleUrl,
  };

  return (
    <UIContext.Provider value={value}>
      {children}
    </UIContext.Provider>
  );
}

export function useUI() {
  const context = useContext(UIContext);
  if (!context) {
    throw new Error('useUI must be used within UIProvider');
  }
  return context;
}




================================================================================
FILE: src/design/tokens.ts
================================================================================

/**
 * Design System Tokens
 * Aurora-inspired liquid glass theme with blue-violet-lilac gradient
 */

export const colors = {
  // Aurora Accent Set
  aurora: {
    blue: '#5AA6FF',
    violet: '#8B7CFF',
    lilac: '#B08CFF',
  },

  // Neutral Colors (Cool Whites)
  neutral: {
    white: '#FFFFFF',
    50: '#F9FBFF',
    100: '#F0F7FF',
    200: '#E8F2FF',
    300: '#D4DFE8',
    400: '#C7D2E1',
    500: '#94A3B8',
    600: '#64748B',
    700: '#475569',
    800: '#334155',
    900: '#0F172A',
  },

  // Semantic Colors
  semantic: {
    success: '#06B6D4',
    warning: '#F59E0B',
    danger: '#EF4444',
    info: '#5AA6FF',
  },

  // Insurance-Specific
  insurance: {
    riskHigh: '#5AA6FF',
    riskMedium: '#8B7CFF',
    riskLow: '#06B6D4',
    regulatory: '#5AA6FF',
    catastrophe: '#8B7CFF',
    market: '#5AA6FF',
    technology: '#B08CFF',
  },
} as const;

export const typography = {
  fontFamily: {
    system: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  },
  fontSize: {
    xs: '0.75rem',
    sm: '0.875rem',
    base: '1rem',
    lg: '1.125rem',
    xl: '1.25rem',
    '2xl': '1.5rem',
    '3xl': '1.875rem',
    '4xl': '2.25rem',
  },
  fontWeight: {
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900,
  },
  lineHeight: {
    tight: 1.2,
    normal: 1.5,
    relaxed: 1.6,
    loose: 1.8,
  },
  letterSpacing: {
    tight: '-0.025em',
    normal: '-0.01em',
    wide: '0.01em',
  },
} as const;

export const spacing = {
  xs: '0.25rem',
  sm: '0.5rem',
  md: '1rem',
  lg: '1.5rem',
  xl: '2rem',
  '2xl': '3rem',
  '3xl': '4rem',
  '4xl': '6rem',
} as const;

export const radius = {
  sm: '0.375rem',
  md: '0.5rem',
  lg: '0.75rem',
  xl: '1rem',
  '2xl': '1.5rem',
  '3xl': '2rem',
  full: '9999px',
} as const;

export const shadows = {
  xs: '0 1px 2px 0 rgb(0 0 0 / 0.04)',
  sm: '0 2px 4px 0 rgb(0 0 0 / 0.06)',
  md: '0 4px 8px -1px rgb(0 0 0 / 0.09), 0 2px 4px -2px rgb(0 0 0 / 0.06)',
  lg: '0 12px 20px -3px rgb(0 0 0 / 0.12), 0 4px 8px -4px rgb(0 0 0 / 0.07)',
  xl: '0 24px 32px -5px rgb(0 0 0 / 0.14), 0 8px 12px -6px rgb(0 0 0 / 0.08)',
  '2xl': '0 28px 56px -12px rgb(0 0 0 / 0.18)',
  inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.06)',
  glow: '0 0 0 1px hsla(220, 90%, 66%, .35), 0 0 18px hsla(220, 90%, 66%, .35)',
} as const;

export const transitions = {
  fast: '120ms cubic-bezier(0.4, 0, 0.2, 1)',
  base: '200ms cubic-bezier(0.4, 0, 0.2, 1)',
  slow: '300ms cubic-bezier(0.4, 0, 0.2, 1)',
  slower: '500ms cubic-bezier(0.4, 0, 0.2, 1)',
  spring: '200ms cubic-bezier(0.34, 1.56, 0.64, 1)',
} as const;

export const blur = {
  sm: 'blur(12px)',
  md: 'blur(20px)',
  lg: 'blur(32px)',
  xl: 'blur(48px)',
  '2xl': 'blur(56px)',
} as const;

export const zIndex = {
  hide: -1,
  auto: 'auto',
  base: 0,
  dropdown: 1000,
  sticky: 1020,
  fixed: 1030,
  backdrop: 1040,
  modal: 1050,
  popover: 1060,
  tooltip: 1070,
} as const;

export const breakpoints = {
  xs: '320px',
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px',
} as const;

// Component-specific tokens
export const components = {
  button: {
    height: {
      sm: '32px',
      md: '40px',
      lg: '48px',
    },
    padding: {
      sm: '0.5rem 0.75rem',
      md: '0.625rem 1rem',
      lg: '0.75rem 1.5rem',
    },
  },
  input: {
    height: '40px',
    padding: '0.625rem 1rem',
    borderRadius: '0.5rem',
  },
  card: {
    padding: '1rem',
    borderRadius: '1rem',
  },
  tag: {
    padding: '0.375rem 0.75rem',
    borderRadius: '9999px',
    fontSize: '0.75rem',
  },
} as const;

// Glass effect presets
export const glass = {
  light: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.85) 0%, rgba(249,251,255,0.75) 100%)',
    backdropFilter: 'blur(20px) saturate(180%)',
    border: '1px solid rgba(90,166,255,0.1)',
  },
  standard: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.92) 0%, rgba(249,251,255,0.85) 100%)',
    backdropFilter: 'blur(32px) saturate(220%) brightness(1.15)',
    border: '1px solid rgba(90,166,255,0.16)',
  },
  premium: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(249,251,255,0.88) 100%)',
    backdropFilter: 'blur(48px) saturate(240%) brightness(1.25)',
    border: '1px solid rgba(90,166,255,0.22)',
  },
  ultra: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.97) 0%, rgba(249,251,255,0.92) 100%)',
    backdropFilter: 'blur(56px) saturate(260%) brightness(1.3)',
    border: '1px solid rgba(90,166,255,0.24)',
  },
} as const;

// Gradient presets
export const gradients = {
  aurora: 'linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%)',
  auroraAccent: 'linear-gradient(135deg, #5AA6FF 0%, #B08CFF 100%)',
  success: 'linear-gradient(135deg, #06B6D4 0%, #14B8A6 100%)',
  subtle: 'linear-gradient(135deg, #F9FBFF 0%, #F0F7FF 100%)',
} as const;

export default {
  colors,
  typography,
  spacing,
  radius,
  shadows,
  transitions,
  blur,
  zIndex,
  breakpoints,
  components,
  glass,
  gradients,
} as const;




================================================================================
FILE: src/firebase.ts
================================================================================

import {initializeApp} from "firebase/app";
import {getFirestore} from "firebase/firestore";
import {getFunctions} from "firebase/functions";

export const app = initializeApp({
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
});
export const db = getFirestore(app);

// Initialize Firebase Functions - always connects to live production functions
// Region: us-central1 (where your functions are deployed)
export const functions = getFunctions(app, "us-central1");




================================================================================
FILE: src/hooks/useArticles.ts
================================================================================

/**
 * useArticles Hook
 * Manages article fetching with pagination, error handling, and caching
 */

import { useEffect, useState, useCallback, useRef } from 'react';
import { collection, query, orderBy, limit, startAfter, getDocs } from 'firebase/firestore';
import type { QueryConstraint } from 'firebase/firestore';
import { db } from '../firebase';
import type { Article } from '../types';
import { logger } from '../utils/logger';

interface UseArticlesOptions {
  pageSize?: number;
  sortBy?: 'createdAt' | 'smartScore';
  sortOrder?: 'asc' | 'desc';
}

interface UseArticlesReturn {
  articles: Article[];
  loading: boolean;
  isLoadingMore: boolean;
  error: string | null;
  hasMore: boolean;
  loadMore: () => Promise<void>;
  refresh: () => Promise<void>;
}

export function useArticles({
  pageSize = 20,
  sortBy = 'createdAt',
  sortOrder = 'desc',
}: UseArticlesOptions = {}): UseArticlesReturn {
  const [articles, setArticles] = useState<Article[]>([]);
  const [loading, setLoading] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasMore, setHasMore] = useState(true);
  const lastCursorRef = useRef<any>(null);
  const isLoadingRef = useRef(false);
  const prefetchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);

  const loadInitial = useCallback(async () => {
    if (isLoadingRef.current) return;
    isLoadingRef.current = true;
    setLoading(true);
    setError(null);

    try {
      logger.info('useArticles', 'Loading initial articles');

      const constraints: QueryConstraint[] = [
        orderBy(sortBy, sortOrder),
        limit(pageSize),
      ];

      const q = query(collection(db, 'articles'), ...constraints);
      const snapshot = await getDocs(q);

      const docs = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate?.() || new Date(),
      })) as Article[];

      setArticles(docs);
      lastCursorRef.current = snapshot.docs[snapshot.docs.length - 1] || null;
      setHasMore(snapshot.docs.length >= pageSize);

      logger.info('useArticles', `Loaded ${docs.length} articles, hasMore: ${snapshot.docs.length >= pageSize}`);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to load articles';
      logger.error('useArticles', 'Failed to load initial articles', { error: message });
      setError(message);
    } finally {
      setLoading(false);
      isLoadingRef.current = false;
    }
  }, [pageSize, sortBy, sortOrder]);

  const loadMore = useCallback(async () => {
    if (isLoadingRef.current || !hasMore || !lastCursorRef.current) return;
    isLoadingRef.current = true;
    setIsLoadingMore(true);

    try {
      logger.info('useArticles', 'Loading more articles');

      const constraints: QueryConstraint[] = [
        orderBy(sortBy, sortOrder),
        startAfter(lastCursorRef.current),
        limit(pageSize),
      ];

      const q = query(collection(db, 'articles'), ...constraints);
      const snapshot = await getDocs(q);

      const docs = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate?.() || new Date(),
      })) as Article[];

      setArticles((prev) => [...prev, ...docs]);
      lastCursorRef.current = snapshot.docs[snapshot.docs.length - 1] || null;
      setHasMore(snapshot.docs.length >= pageSize);

      logger.info('useArticles', `Loaded ${docs.length} more articles, hasMore: ${snapshot.docs.length >= pageSize}`);

      // Prefetch next batch if we're getting close to the end
      if (docs.length > pageSize * 0.8) {
        prefetchTimeoutRef.current = setTimeout(() => {
          // Prefetch will happen automatically when user scrolls
        }, 500);
      }
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to load more articles';
      logger.error('useArticles', 'Failed to load more articles', { error: message });
      setError(message);
    } finally {
      isLoadingRef.current = false;
      setIsLoadingMore(false);
    }
  }, [pageSize, sortBy, sortOrder, hasMore]);

  const refresh = useCallback(async () => {
    lastCursorRef.current = null;
    setArticles([]);
    await loadInitial();
  }, [loadInitial]);

  useEffect(() => {
    loadInitial();

    // Cleanup prefetch timeout on unmount
    return () => {
      if (prefetchTimeoutRef.current) {
        clearTimeout(prefetchTimeoutRef.current);
      }
    };
  }, [loadInitial]);

  return {
    articles,
    loading,
    isLoadingMore,
    error,
    hasMore,
    loadMore,
    refresh,
  };
}




================================================================================
FILE: src/hooks/useInfiniteScroll.ts
================================================================================

/**
 * Modern Infinite Scroll Hook with Intersection Observer
 * 
 * Features:
 * - Efficient Intersection Observer API
 * - Virtual scrolling support
 * - Automatic pagination
 * - Loading state management
 * - Error handling
 * - Configurable thresholds
 */

import { useEffect, useRef, useCallback, useState } from 'react';

export interface UseInfiniteScrollOptions {
  threshold?: number | number[];
  rootMargin?: string;
  onLoadMore: () => void | Promise<void>;
  isLoading?: boolean;
  hasMore?: boolean;
  enabled?: boolean;
}

export interface UseInfiniteScrollReturn {
  sentinelRef: React.RefObject<HTMLDivElement | null>;
  isLoading: boolean;
  hasMore: boolean;
}

/**
 * Hook for infinite scroll with Intersection Observer
 * 
 * Usage:
 * const { sentinelRef, isLoading } = useInfiniteScroll({
 *   onLoadMore: () => fetchMoreArticles(),
 *   isLoading: loading,
 *   hasMore: articles.length < totalCount
 * });
 * 
 * Then place <div ref={sentinelRef} /> at the end of your list
 */
export function useInfiniteScroll({
  threshold = 0.1,
  rootMargin = '100px',
  onLoadMore,
  isLoading = false,
  hasMore = true,
  enabled = true,
}: UseInfiniteScrollOptions): UseInfiniteScrollReturn {
  const sentinelRef = useRef<HTMLDivElement>(null);
  const observerRef = useRef<IntersectionObserver | null>(null);
  const [localIsLoading, setLocalIsLoading] = useState(false);

  const handleIntersection = useCallback(
    (entries: IntersectionObserverEntry[]) => {
      const [entry] = entries;

      // Only trigger if:
      // 1. Element is visible
      // 2. Not already loading
      // 3. More items available
      // 4. Hook is enabled
      if (entry.isIntersecting && !isLoading && !localIsLoading && hasMore && enabled) {
        setLocalIsLoading(true);
        
        const result = onLoadMore();
        
        // Handle both sync and async callbacks
        if (result instanceof Promise) {
          result
            .catch((error) => {
              console.error('[InfiniteScroll] Error loading more items:', error);
            })
            .finally(() => {
              setLocalIsLoading(false);
            });
        } else {
          setLocalIsLoading(false);
        }
      }
    },
    [onLoadMore, isLoading, hasMore, enabled, localIsLoading]
  );

  useEffect(() => {
    // Create observer with options
    observerRef.current = new IntersectionObserver(handleIntersection, {
      threshold,
      rootMargin,
    });

    // Start observing sentinel element
    if (sentinelRef.current && enabled) {
      observerRef.current.observe(sentinelRef.current);
    }

    // Cleanup
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [handleIntersection, threshold, rootMargin, enabled]);

  return {
    sentinelRef,
    isLoading: isLoading || localIsLoading,
    hasMore,
  };
}

/**
 * Hook for virtual scrolling with dynamic item heights
 * Optimizes rendering of large lists by only rendering visible items
 */
export interface UseVirtualScrollOptions {
  items: any[];
  itemHeight?: number;
  containerHeight: number;
  overscan?: number;
}

export interface UseVirtualScrollReturn {
  visibleItems: any[];
  visibleRange: { start: number; end: number };
  totalHeight: number;
  offsetY: number;
  setScrollTop: (top: number) => void;
}

export function useVirtualScroll({
  items,
  itemHeight = 100,
  containerHeight,
  overscan = 3,
}: UseVirtualScrollOptions): UseVirtualScrollReturn {
  const [scrollTop, setScrollTop] = useState(0);

  const visibleRange = {
    start: Math.max(0, Math.floor(scrollTop / itemHeight) - overscan),
    end: Math.min(
      items.length,
      Math.ceil((scrollTop + containerHeight) / itemHeight) + overscan
    ),
  };

  const visibleItems = items.slice(visibleRange.start, visibleRange.end);
  const totalHeight = items.length * itemHeight;
  const offsetY = visibleRange.start * itemHeight;

  return {
    visibleItems,
    visibleRange,
    totalHeight,
    offsetY,
    setScrollTop,
  };
}




================================================================================
FILE: src/index.css
================================================================================

@import "tailwindcss";

/* Modern AI-Inspired Light Theme Design System */

:root {
  /* Typography - Premium System Font Stack */
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  line-height: 1.6;
  font-weight: 400;
  letter-spacing: -0.01em;

  /* Aurora Accent Set - AI-Inspired Blue → Violet → Lilac Gradient */
  --color-aurora-blue: #5AA6FF;
  --color-aurora-violet: #8B7CFF;
  --color-aurora-lilac: #B08CFF;

  /* Modern Color Palette - Apple Liquid Glass Theme with Aurora Base */
  --color-primary: #5AA6FF; /* Aurora blue primary */
  --color-primary-hover: #4A96EF;
  --color-primary-light: #E8F2FF;
  --color-primary-ultra-light: #F5F9FF;
  --color-secondary: #8B7CFF; /* Aurora violet accent */
  --color-secondary-hover: #7B6CEF;
  --color-accent: #B08CFF; /* Aurora lilac for gradients */
  --color-accent-light: #F0E8FF;
  --color-success: #06B6D4; /* Cyan for success */
  --color-warning: #F59E0B; /* Amber for warning */
  --color-danger: #EF4444; /* Red for danger */

  /* Insurance-Specific Colors - Aurora-Based */
  --color-risk-high: #5AA6FF; /* High risk - Aurora blue */
  --color-risk-medium: #8B7CFF; /* Medium risk - Aurora violet */
  --color-risk-low: #06B6D4; /* Low risk - Cyan */
  --color-regulatory: #5AA6FF; /* Regulatory - Aurora blue */
  --color-catastrophe: #8B7CFF; /* Catastrophe - Aurora violet */
  --color-market: #5AA6FF; /* Market - Aurora blue */
  --color-technology: #B08CFF; /* Technology - Aurora lilac */

  /* Neutral Colors - Apple Liquid Glass with Cool Whites */
  --color-bg-primary: #FFFFFF;
  --color-bg-secondary: #F9FBFF; /* Subtle cool white */
  --color-bg-tertiary: #F0F7FF; /* Light blue tint */
  --color-bg-quaternary: #E8F2FF; /* Lighter blue tint */
  --color-border: #C7D2E1; /* Cool neutral border */
  --color-border-light: #E8F2FF; /* Light border */
  --color-border-subtle: #D4DFE8; /* Subtle border */

  /* Text Colors - Refined Hierarchy */
  --color-text-primary: #0F172A;
  --color-text-secondary: #5AA6FF;
  --color-text-tertiary: #64748B;
  --color-text-quaternary: #94A3B8;

  /* Shadows - Premium Depth */
  --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.04);
  --shadow-sm: 0 2px 4px 0 rgb(0 0 0 / 0.06);
  --shadow-md: 0 4px 8px -1px rgb(0 0 0 / 0.09), 0 2px 4px -2px rgb(0 0 0 / 0.06);
  --shadow-lg: 0 12px 20px -3px rgb(0 0 0 / 0.12), 0 4px 8px -4px rgb(0 0 0 / 0.07);
  --shadow-xl: 0 24px 32px -5px rgb(0 0 0 / 0.14), 0 8px 12px -6px rgb(0 0 0 / 0.08);
  --shadow-2xl: 0 28px 56px -12px rgb(0 0 0 / 0.18);
  --shadow-inner: inset 0 2px 4px 0 rgb(0 0 0 / 0.06);

  /* Spacing */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;

  /* Border Radius - Modern Curves */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;
  --radius-2xl: 1.5rem;

  /* Transitions - Smooth & Responsive */
  --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);
  --transition-base: 200ms cubic-bezier(0.4, 0, 0.2, 1);
  --transition-slow: 300ms cubic-bezier(0.4, 0, 0.2, 1);
  --transition-slower: 500ms cubic-bezier(0.4, 0, 0.2, 1);

  /* Backdrop Blur */
  --backdrop-blur: blur(12px);

  /* Font rendering */
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  /* Color scheme */
  color-scheme: light;
}

* {
  box-sizing: border-box;
}

html {
  width: 100%;
  overflow-x: hidden;
}

body {
  margin: 0;
  padding: 0;
  width: 100%;
  min-width: 320px;
  min-height: 100vh;
  max-width: 100vw;
  overflow-x: hidden;
  background-color: var(--color-bg-secondary);
  color: var(--color-text-primary);
  -webkit-user-select: none;
  -webkit-touch-callout: none;
}

#root {
  min-height: 100vh;
  width: 100%;
  max-width: 100vw;
  overflow-x: hidden;
}

/* Typography Styles */
h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: 1.3;
  color: var(--color-text-primary);
}

h1 {
  font-size: 2.25rem;
  font-weight: 950;
  letter-spacing: -0.025em;
}

h2 {
  font-size: 1.875rem;
  font-weight: 800;
  letter-spacing: -0.02em;
}

h3 {
  font-size: 1.5rem;
  font-weight: 750;
  letter-spacing: -0.015em;
}

a {
  color: var(--color-primary);
  text-decoration: none;
  transition: color var(--transition-fast);
}

a:hover {
  color: var(--color-primary-hover);
}

/* Button Base Styles */
button {
  font-family: inherit;
  font-size: 0.875rem;
  font-weight: 500;
  line-height: 1.5;
  cursor: pointer;
  border: none;
  border-radius: var(--radius-md);
  padding: 0.625rem 1.25rem;
  transition: all var(--transition-base);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

button:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: transparent;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: transparent;
}

/* Selection */
::selection {
  background-color: var(--color-primary-light);
  color: var(--color-text-primary);
}

/* Focus visible for accessibility */
:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Mobile Optimization - Premium Touch Experience */
@media (max-width: 640px) {
  :root {
    font-size: 14px;
  }

  html, body, #root {
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
  }

  body {
    padding-bottom: env(safe-area-inset-bottom);
    padding-left: env(safe-area-inset-left);
    padding-right: env(safe-area-inset-right);
  }

  h1 {
    font-size: 1.75rem;
    font-weight: 900;
  }

  h2 {
    font-size: 1.5rem;
    font-weight: 800;
  }

  h3 {
    font-size: 1.25rem;
    font-weight: 700;
  }

  /* Touch-friendly button sizing - 48px minimum */
  button {
    min-height: 48px;
    min-width: 48px;
    padding: 0.875rem 1.25rem;
    font-weight: 600;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    touch-action: manipulation;
  }

  /* Touch-friendly input sizing */
  input,
  textarea,
  select {
    min-height: 48px;
    font-size: 16px; /* Prevents zoom on iOS */
    padding: 0.75rem 1rem;
    -webkit-appearance: none;
    appearance: none;
    touch-action: manipulation;
  }

  /* Improved tap targets */
  a {
    min-height: 48px;
    display: inline-flex;
    align-items: center;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }

  /* Optimize spacing for mobile */
  main {
    padding-left: 1rem;
    padding-right: 1rem;
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
  }

  /* Enhanced mobile card spacing */
  article {
    margin-bottom: 0.5rem;
    border-radius: 1.5rem;
    width: 100%;
    max-width: 100%;
    overflow: hidden;
  }

  /* Mobile-optimized grid */
  .grid {
    gap: 1rem;
    width: 100%;
    max-width: 100%;
  }

  /* Reduce animation on mobile for performance */
  @media (prefers-reduced-motion: no-preference) {
    article {
      animation: slideInUp 0.3s ease-out;
    }
  }

  /* Mobile-specific glass effects */
  .glass,
  .liquid-glass,
  .liquid-glass-premium {
    border-radius: 1.25rem;
  }

  /* Optimize touch interactions */
  button:active {
    transform: scale(0.95);
  }

  /* Mobile-specific card improvements */
  .card-premium,
  .card-premium-elevated {
    border-radius: 1rem;
    padding: 1rem;
    width: 100%;
    max-width: 100%;
    overflow: hidden;
  }

  /* Improve readability on small screens */
  p {
    line-height: 1.7;
    word-break: break-word;
    overflow-wrap: break-word;
  }

  /* Optimize badge sizing for mobile */
  .tag-pill {
    padding: 0.25rem 0.625rem;
    font-size: 0.65rem;
  }

  /* Better spacing for mobile lists */
  ul, ol {
    margin-left: 1rem;
    padding-right: 1rem;
  }

  /* Optimize header for mobile */
  header {
    padding: 0.75rem 0;
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
  }

  /* Improve scrolling performance */
  * {
    -webkit-overflow-scrolling: touch;
  }

  /* Prevent horizontal scrolling on all elements */
  * {
    max-width: 100%;
    overflow-x: hidden;
  }

  /* Optimize images for mobile */
  img {
    max-width: 100%;
    height: auto;
    display: block;
  }

  /* Optimize containers */
  .container, [class*="container"] {
    width: 100%;
    max-width: 100%;
    padding-left: 1rem;
    padding-right: 1rem;
    margin-left: 0;
    margin-right: 0;
  }

  /* Reduce animations for better performance */
  .animate-slideInUp,
  .animate-slideInDown,
  .animate-slideInLeft,
  .animate-slideInRight,
  .animate-scaleIn,
  .animate-fadeInScale {
    animation-duration: 0.2s;
  }

  /* Disable hover effects on touch devices */
  @media (hover: none) {
    button:hover,
    a:hover,
    .card-premium:hover,
    .card-premium-elevated:hover {
      transform: none;
      box-shadow: none;
    }
  }
}

/* Tablet Optimization */
@media (min-width: 641px) and (max-width: 1024px) {
  :root {
    font-size: 15px;
  }
}

/* Large Screen Optimization */
@media (min-width: 1025px) {
  :root {
    font-size: 16px;
  }
}

/* Landscape Mobile */
@media (max-height: 500px) and (orientation: landscape) {
  header {
    padding: 0.5rem 0;
  }

  main {
    padding-top: 1rem;
    padding-bottom: 1rem;
  }
}

/* High DPI Screens */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  /* Thinner borders for high DPI */
  border {
    border-width: 0.5px;
  }
}

/* Premium Animations & Transitions */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(12px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-12px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-12px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(12px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes pulse-subtle {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes shimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-8px);
  }
}

@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 0 0 rgba(90, 166, 255, 0.4);
  }
  50% {
    box-shadow: 0 0 0 8px rgba(90, 166, 255, 0);
  }
}

/* Enhanced Micro-Interactions */
@keyframes cardHoverLift {
  from {
    transform: translateY(0px);
  }
  to {
    transform: translateY(-4px);
  }
}

@keyframes smoothPulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.85;
    transform: scale(1.02);
  }
}

@keyframes shimmerGradient {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.92);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes borderGlow {
  0%, 100% {
    border-color: rgba(90, 166, 255, 0.3);
    box-shadow: 0 0 0 0 rgba(90, 166, 255, 0.1);
  }
  50% {
    border-color: rgba(90, 166, 255, 0.6);
    box-shadow: 0 0 12px rgba(90, 166, 255, 0.2);
  }
}

@keyframes aiGradientShift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

@keyframes subtleFloat {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-2px);
  }
}

@keyframes enhancedCardHover {
  from {
    transform: translateY(0px);
    box-shadow: 0 12px 32px -6px rgba(0, 0, 0, 0.1);
  }
  to {
    transform: translateY(-8px);
    box-shadow: 0 28px 56px -12px rgba(0, 0, 0, 0.18);
  }
}

@keyframes smoothScale {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.02);
  }
}

/* Liquid Glass Animations */
@keyframes liquidGlassShimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

@keyframes liquidGlassGlow {
  0%, 100% {
    box-shadow:
      0 12px 48px 0 rgba(90, 166, 255, 0.15),
      inset 0 1px 2px 0 rgba(255, 255, 255, 0.6);
  }
  50% {
    box-shadow:
      0 16px 64px 0 rgba(139, 124, 255, 0.2),
      inset 0 1px 2px 0 rgba(255, 255, 255, 0.7);
  }
}

/* Premium Glow Effects - AI Polished with Aurora Gradient */
@keyframes premiumGlow {
  0%, 100% {
    box-shadow:
      0 0 20px rgba(90, 166, 255, 0.15),
      0 0 40px rgba(139, 124, 255, 0.08),
      0 0 60px rgba(176, 140, 255, 0.04),
      inset 0 1px 2px rgba(255, 255, 255, 0.5);
  }
  50% {
    box-shadow:
      0 0 30px rgba(90, 166, 255, 0.25),
      0 0 60px rgba(139, 124, 255, 0.12),
      0 0 90px rgba(176, 140, 255, 0.08),
      inset 0 1px 2px rgba(255, 255, 255, 0.6);
  }
}

@keyframes subtleGlowPulse {
  0%, 100% {
    box-shadow:
      0 0 15px rgba(90, 166, 255, 0.1),
      0 0 30px rgba(139, 124, 255, 0.05),
      0 0 45px rgba(176, 140, 255, 0.02);
  }
  50% {
    box-shadow:
      0 0 25px rgba(90, 166, 255, 0.15),
      0 0 45px rgba(139, 124, 255, 0.08),
      0 0 65px rgba(176, 140, 255, 0.04);
  }
}

/* Enhanced Glow for Premium Cards - Aurora Theme */
@keyframes enhancedPremiumGlow {
  0%, 100% {
    box-shadow:
      0 0 20px rgba(90, 166, 255, 0.2),
      0 0 40px rgba(139, 124, 255, 0.1),
      0 0 60px rgba(176, 140, 255, 0.05),
      inset 0 1px 2px rgba(255, 255, 255, 0.6);
  }
  50% {
    box-shadow:
      0 0 35px rgba(90, 166, 255, 0.3),
      0 0 70px rgba(139, 124, 255, 0.15),
      0 0 100px rgba(176, 140, 255, 0.08),
      inset 0 1px 2px rgba(255, 255, 255, 0.7);
  }
}

/* Soft Glow for Subtle Elements - Aurora Theme */
@keyframes softGlow {
  0%, 100% {
    box-shadow:
      0 0 10px rgba(90, 166, 255, 0.08),
      0 0 20px rgba(139, 124, 255, 0.04);
  }
  50% {
    box-shadow:
      0 0 15px rgba(90, 166, 255, 0.12),
      0 0 30px rgba(139, 124, 255, 0.06);
  }
}

/* Deep Glow for High-Impact Elements - Aurora Theme */
@keyframes deepGlow {
  0%, 100% {
    box-shadow:
      0 0 25px rgba(90, 166, 255, 0.25),
      0 0 50px rgba(139, 124, 255, 0.12),
      0 0 75px rgba(176, 140, 255, 0.06),
      inset 0 1px 2px rgba(255, 255, 255, 0.5);
  }
  50% {
    box-shadow:
      0 0 40px rgba(90, 166, 255, 0.35),
      0 0 80px rgba(139, 124, 255, 0.18),
      0 0 120px rgba(176, 140, 255, 0.1),
      inset 0 1px 2px rgba(255, 255, 255, 0.6);
  }
}

@keyframes cardGradientShift {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

@keyframes iconGlow {
  0%, 100% {
    filter: drop-shadow(0 0 8px rgba(90, 166, 255, 0.3)) drop-shadow(0 0 4px rgba(139, 124, 255, 0.2));
  }
  50% {
    filter: drop-shadow(0 0 16px rgba(90, 166, 255, 0.5)) drop-shadow(0 0 8px rgba(139, 124, 255, 0.3));
  }
}

@keyframes cardLiquidLift {
  from {
    transform: translateY(0px) scale(1);
    opacity: 0.95;
  }
  to {
    transform: translateY(-12px) scale(1.01);
    opacity: 1;
  }
}

@keyframes subtleRotate {
  0%, 100% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(1deg);
  }
}

@keyframes pulseGlow {
  0%, 100% {
    box-shadow: 0 0 0 0 rgba(90, 166, 255, 0.4);
  }
  50% {
    box-shadow: 0 0 0 12px rgba(90, 166, 255, 0);
  }
}

@keyframes slideInWithBounce {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  60% {
    opacity: 1;
    transform: translateY(-4px);
  }
  80% {
    transform: translateY(2px);
  }
  100% {
    transform: translateY(0px);
  }
}

@keyframes fadeInWithScale {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes rotateIn {
  from {
    opacity: 0;
    transform: rotate(-10deg) scale(0.9);
  }
  to {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }
}

@keyframes expandIn {
  from {
    opacity: 0;
    transform: scaleX(0.8) scaleY(0.9);
  }
  to {
    opacity: 1;
    transform: scaleX(1) scaleY(1);
  }
}

/* Apply animations to key elements */
article {
  animation: slideInUp 0.4s ease-out;
}

section {
  animation: fadeIn 0.3s ease-out;
}

header {
  animation: slideInDown 0.3s ease-out;
}

/* Animation utility classes */
.animate-slideInUp {
  animation: slideInUp 0.3s ease-out;
}

.animate-slideInDown {
  animation: slideInDown 0.3s ease-out;
}

.animate-slideInLeft {
  animation: slideInLeft 0.3s ease-out;
}

.animate-slideInRight {
  animation: slideInRight 0.3s ease-out;
}

.animate-scaleIn {
  animation: scaleIn 0.3s ease-out;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite;
}

.animate-cardHoverLift {
  animation: cardHoverLift 0.3s ease-out forwards;
}

.animate-smoothPulse {
  animation: smoothPulse 2s ease-in-out infinite;
}

.animate-fadeInScale {
  animation: fadeInScale 0.4s ease-out;
}

.animate-borderGlow {
  animation: borderGlow 2s ease-in-out infinite;
}

.animate-enhancedCardHover {
  animation: enhancedCardHover 0.35s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-smoothScale {
  animation: smoothScale 0.35s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-liquidGlassShimmer {
  animation: liquidGlassShimmer 3s ease-in-out infinite;
}

.animate-liquidGlassGlow {
  animation: liquidGlassGlow 3s ease-in-out infinite;
}

.animate-cardLiquidLift {
  animation: cardLiquidLift 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-subtleRotate {
  animation: subtleRotate 4s ease-in-out infinite;
}

.animate-pulseGlow {
  animation: pulseGlow 2s ease-in-out infinite;
}

.animate-slideInWithBounce {
  animation: slideInWithBounce 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-fadeInWithScale {
  animation: fadeInWithScale 0.4s ease-out forwards;
}

.animate-rotateIn {
  animation: rotateIn 0.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-expandIn {
  animation: expandIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-premiumGlow {
  animation: premiumGlow 3s ease-in-out infinite;
}

.animate-subtleGlowPulse {
  animation: subtleGlowPulse 4s ease-in-out infinite;
}

.animate-enhancedPremiumGlow {
  animation: enhancedPremiumGlow 3.5s ease-in-out infinite;
}

.animate-softGlow {
  animation: softGlow 3s ease-in-out infinite;
}

.animate-deepGlow {
  animation: deepGlow 4.5s ease-in-out infinite;
}

.animate-cardGradientShift {
  animation: cardGradientShift 6s ease-in-out infinite;
}

.animate-iconGlow {
  animation: iconGlow 2.5s ease-in-out infinite;
}

/* Stagger animations for lists */
.stagger-children > * {
  animation: slideInUp 0.4s ease-out;
}

.stagger-children > *:nth-child(1) { animation-delay: 0ms; }
.stagger-children > *:nth-child(2) { animation-delay: 50ms; }
.stagger-children > *:nth-child(3) { animation-delay: 100ms; }
.stagger-children > *:nth-child(4) { animation-delay: 150ms; }
.stagger-children > *:nth-child(5) { animation-delay: 200ms; }
.stagger-children > *:nth-child(6) { animation-delay: 250ms; }
.stagger-children > *:nth-child(7) { animation-delay: 300ms; }
.stagger-children > *:nth-child(8) { animation-delay: 350ms; }
.stagger-children > *:nth-child(9) { animation-delay: 400ms; }
.stagger-children > *:nth-child(10) { animation-delay: 450ms; }
.stagger-children > *:nth-child(11) { animation-delay: 500ms; }
.stagger-children > *:nth-child(12) { animation-delay: 550ms; }

/* Command-K Palette Animations */
@keyframes commandPaletteSlideIn {
  from {
    opacity: 0;
    transform: scale(0.95) translateY(-20px);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}

.animate-commandPaletteSlideIn {
  animation: commandPaletteSlideIn 0.3s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Micro-Glow Effect for Interactive Elements - Aurora Theme */
@keyframes microGlowPulse {
  0%, 100% {
    box-shadow: 0 0 8px rgba(90, 166, 255, 0.15), 0 0 16px rgba(139, 124, 255, 0.08);
  }
  50% {
    box-shadow: 0 0 12px rgba(90, 166, 255, 0.25), 0 0 24px rgba(139, 124, 255, 0.12);
  }
}

.micro-glow {
  animation: microGlowPulse 3s ease-in-out infinite;
}

/* Elevated Glow for Premium Elements - Aurora Theme */
@keyframes elevatedGlowPulse {
  0%, 100% {
    box-shadow:
      0 0 12px rgba(90, 166, 255, 0.2),
      0 0 24px rgba(139, 124, 255, 0.12),
      0 0 36px rgba(176, 140, 255, 0.08);
  }
  50% {
    box-shadow:
      0 0 16px rgba(90, 166, 255, 0.3),
      0 0 32px rgba(139, 124, 255, 0.18),
      0 0 48px rgba(176, 140, 255, 0.12);
  }
}

.elevated-glow {
  animation: elevatedGlowPulse 3.5s ease-in-out infinite;
}

/* Quick Read Slide-In Animation */
@keyframes quickReadSlideIn {
  from {
    opacity: 0;
    transform: translateX(100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-quickReadSlideIn {
  animation: quickReadSlideIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Citation Hover Tooltip */
@keyframes citationTooltipFadeIn {
  from {
    opacity: 0;
    transform: translateY(-8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-citationTooltipFadeIn {
  animation: citationTooltipFadeIn 0.2s ease-out forwards;
}

/* Tag Chip Spring Scale */
@keyframes tagChipSpringScale {
  0% {
    transform: scale(0.8);
    opacity: 0;
  }
  60% {
    transform: scale(1.08);
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.animate-tagChipSpringScale {
  animation: tagChipSpringScale 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Bookmark Add Animation */
@keyframes bookmarkPulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.15);
  }
  100% {
    transform: scale(1);
  }
}

.animate-bookmarkPulse {
  animation: bookmarkPulse 0.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Share Button Feedback */
@keyframes shareFeedback {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.animate-shareFeedback {
  animation: shareFeedback 0.4s ease-out forwards;
}

/* Score Glow Animation - Aurora Theme */
@keyframes scoreGlow {
  0%, 100% {
    box-shadow: 0 0 8px rgba(90, 166, 255, 0.2), 0 0 16px rgba(139, 124, 255, 0.1);
  }
  50% {
    box-shadow: 0 0 12px rgba(90, 166, 255, 0.35), 0 0 24px rgba(139, 124, 255, 0.18);
  }
}

.animate-scoreGlow {
  animation: scoreGlow 2s ease-in-out infinite;
}

/* Liquid Glass & Glassmorphism Effects - Apple-Inspired with Blue Accents */
.glass {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.85) 0%, rgba(240, 249, 255, 0.75) 100%);
  backdrop-filter: blur(28px) saturate(210%) brightness(1.1);
  -webkit-backdrop-filter: blur(28px) saturate(210%) brightness(1.1);
  border: 1px solid rgba(37, 99, 235, 0.18);
  box-shadow:
    0 8px 32px 0 rgba(37, 99, 235, 0.1),
    0 0 20px rgba(59, 130, 246, 0.06),
    0 0 40px rgba(96, 165, 250, 0.03),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.7),
    inset 0 -1px 1px 0 rgba(0, 0, 0, 0.01);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
  will-change: transform, box-shadow;
}

.glass:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(240, 249, 255, 0.85) 100%);
  border-color: rgba(37, 99, 235, 0.25);
  box-shadow:
    0 12px 48px 0 rgba(37, 99, 235, 0.12),
    0 0 30px rgba(59, 130, 246, 0.06),
    0 0 50px rgba(96, 165, 250, 0.03),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.7),
    inset 0 -1px 1px 0 rgba(0, 0, 0, 0.03);
  transform: translateY(-2px);
}

/* .glass-dark - REMOVED: Light theme only, use .glass instead */

/* Liquid Glass - Premium Frosted Effect with Aurora Accent Glow */
.liquid-glass {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.92) 0%, rgba(249, 251, 255, 0.85) 100%);
  backdrop-filter: blur(32px) saturate(220%) brightness(1.15);
  -webkit-backdrop-filter: blur(32px) saturate(220%) brightness(1.15);
  border: 1px solid rgba(90, 166, 255, 0.16);
  box-shadow:
    0 8px 32px 0 rgba(90, 166, 255, 0.08),
    0 0 20px rgba(139, 124, 255, 0.05),
    0 0 40px rgba(176, 140, 255, 0.03),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.75),
    inset 0 -1px 1px 0 rgba(0, 0, 0, 0.01);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.liquid-glass:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.97) 0%, rgba(245, 250, 255, 0.92) 100%);
  border-color: rgba(90, 166, 255, 0.28);
  box-shadow:
    0 12px 48px 0 rgba(90, 166, 255, 0.12),
    0 0 30px rgba(139, 124, 255, 0.08),
    0 0 50px rgba(176, 140, 255, 0.04),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.85),
    inset 0 -1px 1px 0 rgba(0, 0, 0, 0.02);
}

/* Ultra Premium Liquid Glass with Aurora Accent Glow */
.liquid-glass-premium {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(249, 251, 255, 0.88) 100%);
  backdrop-filter: blur(48px) saturate(240%) brightness(1.25);
  -webkit-backdrop-filter: blur(48px) saturate(240%) brightness(1.25);
  border: 1px solid rgba(90, 166, 255, 0.22);
  box-shadow:
    0 16px 64px 0 rgba(90, 166, 255, 0.14),
    0 0 50px rgba(139, 124, 255, 0.1),
    0 0 80px rgba(176, 140, 255, 0.05),
    inset 0 1px 3px 0 rgba(255, 255, 255, 0.85),
    inset 0 -2px 2px 0 rgba(0, 0, 0, 0.01);
  position: relative;
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.liquid-glass-premium::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.1) 0%, transparent 50%, rgba(176, 140, 255, 0.05) 100%);
  pointer-events: none;
}

.liquid-glass-premium:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.99) 0%, rgba(245, 250, 255, 0.96) 100%);
  border-color: rgba(90, 166, 255, 0.36);
  box-shadow:
    0 20px 80px 0 rgba(90, 166, 255, 0.18),
    0 0 70px rgba(139, 124, 255, 0.12),
    0 0 100px rgba(176, 140, 255, 0.06),
    inset 0 1px 3px 0 rgba(255, 255, 255, 0.92),
    inset 0 -2px 2px 0 rgba(0, 0, 0, 0.02);
  transform: translateY(-3px);
}

/* Ultra Liquid Glass - Maximum Frosted Effect with Aurora Glow */
.liquid-glass-ultra {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.97) 0%, rgba(249, 251, 255, 0.92) 100%);
  backdrop-filter: blur(56px) saturate(260%) brightness(1.3);
  -webkit-backdrop-filter: blur(56px) saturate(260%) brightness(1.3);
  border: 1px solid rgba(90, 166, 255, 0.24);
  box-shadow:
    0 20px 80px 0 rgba(90, 166, 255, 0.16),
    0 0 60px rgba(139, 124, 255, 0.12),
    0 0 100px rgba(176, 140, 255, 0.06),
    inset 0 1px 4px 0 rgba(255, 255, 255, 0.9),
    inset 0 -2px 3px 0 rgba(0, 0, 0, 0.01);
  position: relative;
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.liquid-glass-ultra::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.12) 0%, transparent 50%, rgba(176, 140, 255, 0.06) 100%);
  pointer-events: none;
}

.liquid-glass-ultra:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.99) 0%, rgba(240, 249, 255, 0.98) 100%);
  border-color: rgba(90, 166, 255, 0.4);
  box-shadow:
    0 24px 96px 0 rgba(90, 166, 255, 0.2),
    0 0 80px rgba(139, 124, 255, 0.14),
    0 0 120px rgba(176, 140, 255, 0.08),
    inset 0 1px 4px 0 rgba(255, 255, 255, 0.96),
    inset 0 -2px 3px 0 rgba(0, 0, 0, 0.02);
  transform: translateY(-4px);
}

/* Premium Gradient Backgrounds - Aurora-Based Modern Theme */
.gradient-primary {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
}

.gradient-accent {
  background: linear-gradient(135deg, #5AA6FF 0%, #B08CFF 100%);
}

.gradient-success {
  background: linear-gradient(135deg, #06B6D4 0%, #14B8A6 100%);
}

.gradient-subtle {
  background: linear-gradient(135deg, #F9FBFF 0%, #F0F7FF 100%);
}

/* AI-Inspired Animated Background - Aurora Theme */
.ai-gradient-bg {
  background: linear-gradient(
    -45deg,
    #F9FBFF 0%,
    #F0F7FF 20%,
    #F5F9FF 40%,
    #E8F2FF 60%,
    #F9FBFF 100%
  );
  background-size: 400% 400%;
  animation: aiGradientShift 20s ease-in-out infinite;
  position: relative;
}

.ai-gradient-bg::before {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(
    circle at 20% 50%,
    rgba(90, 166, 255, 0.12) 0%,
    rgba(90, 166, 255, 0.04) 30%,
    transparent 60%
  );
  pointer-events: none;
  animation: subtleFloat 8s ease-in-out infinite;
}

.ai-gradient-bg::after {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(
    circle at 80% 80%,
    rgba(139, 124, 255, 0.08) 0%,
    rgba(139, 124, 255, 0.02) 30%,
    transparent 60%
  );
  pointer-events: none;
  animation: subtleFloat 10s ease-in-out infinite reverse;
}

/* Enhanced AI Gradient Background with Multi-Layer Glow - Aurora Theme */
.ai-gradient-bg-enhanced {
  background: linear-gradient(
    135deg,
    #F9FBFF 0%,
    #F0F7FF 25%,
    #F5F9FF 50%,
    #E8F2FF 75%,
    #F9FBFF 100%
  );
  background-size: 400% 400%;
  animation: aiGradientShift 25s ease-in-out infinite;
  position: relative;
  overflow: hidden;
}

.ai-gradient-bg-enhanced::before {
  content: '';
  position: absolute;
  inset: 0;
  background:
    radial-gradient(circle at 15% 40%, rgba(90, 166, 255, 0.12) 0%, transparent 40%),
    radial-gradient(circle at 85% 60%, rgba(139, 124, 255, 0.08) 0%, transparent 40%);
  pointer-events: none;
  animation: subtleFloat 12s ease-in-out infinite;
}

.ai-gradient-bg-enhanced::after {
  content: '';
  position: absolute;
  inset: 0;
  background:
    radial-gradient(circle at 50% 50%, rgba(90, 166, 255, 0.03) 0%, transparent 50%);
  pointer-events: none;
}

/* Text Gradients - Aurora-Based */
.text-gradient {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.text-gradient-warm {
  background: linear-gradient(135deg, #5AA6FF 0%, #B08CFF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Insurance-Specific Gradients - Aurora-Based */
.gradient-risk-high {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 100%);
}

.gradient-risk-medium {
  background: linear-gradient(135deg, #8B7CFF 0%, #B08CFF 100%);
}

.gradient-risk-low {
  background: linear-gradient(135deg, #06B6D4 0%, #14B8A6 100%);
}

.gradient-regulatory {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 100%);
}

.gradient-catastrophe {
  background: linear-gradient(135deg, #8B7CFF 0%, #B08CFF 100%);
}

.gradient-market {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 100%);
}

.gradient-technology {
  background: linear-gradient(135deg, #B08CFF 0%, #06B6D4 100%);
}

/* Advanced Hover Effects */
.hover-lift {
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.hover-lift:hover {
  transform: translateY(-6px);
  box-shadow: 0 24px 32px -5px rgba(0, 0, 0, 0.14);
}

.hover-glow {
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.hover-glow:hover {
  box-shadow: 0 0 24px rgba(90, 166, 255, 0.35), 0 0 12px rgba(139, 124, 255, 0.2), inset 0 0 12px rgba(176, 140, 255, 0.05);
  border-color: rgba(139, 124, 255, 0.6);
}

/* Premium Button Styles - Aurora Gradient */
.btn-premium {
  position: relative;
  overflow: hidden;
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.25);
  box-shadow:
    0 8px 24px 0 rgba(90, 166, 255, 0.25),
    0 0 30px rgba(139, 124, 255, 0.12),
    0 0 50px rgba(176, 140, 255, 0.08),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.4);
}

.btn-premium::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
  transition: left 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.btn-premium::after {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at center, rgba(255, 255, 255, 0.15) 0%, transparent 70%);
  opacity: 0;
  transition: opacity 0.35s ease-out;
}

.btn-premium:hover {
  transform: translateY(-2px) scale(1.02);
  box-shadow:
    0 16px 40px 0 rgba(90, 166, 255, 0.35),
    0 0 50px rgba(139, 124, 255, 0.18),
    0 0 70px rgba(176, 140, 255, 0.12),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.5);
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
}

.btn-premium:hover::before {
  left: 100%;
}

.btn-premium:hover::after {
  opacity: 1;
}

.btn-premium:active {
  transform: translateY(0px) scale(0.98);
  box-shadow:
    0 4px 12px 0 rgba(90, 166, 255, 0.15),
    0 0 20px rgba(139, 124, 255, 0.08),
    0 0 30px rgba(176, 140, 255, 0.05),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.3);
}

.btn-premium:focus-visible {
  outline: 2px solid rgba(255, 255, 255, 0.5);
  outline-offset: 2px;
}

/* Enhanced Card Styles - Aurora Theme with Liquid Glass */
.card-premium {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(249, 251, 255, 0.96) 100%);
  backdrop-filter: blur(16px) saturate(160%);
  -webkit-backdrop-filter: blur(16px) saturate(160%);
  border: 1px solid rgba(90, 166, 255, 0.14);
  border-radius: 1rem;
  box-shadow:
    0 4px 12px -2px rgba(0, 0, 0, 0.05),
    0 0 20px rgba(90, 166, 255, 0.06),
    0 0 30px rgba(139, 124, 255, 0.03),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.75);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
  position: relative;
  overflow: hidden;
}

.card-premium::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, transparent, rgba(90, 166, 255, 0.35), rgba(139, 124, 255, 0.35), rgba(176, 140, 255, 0.25), transparent);
  opacity: 0;
  transition: opacity 0.35s ease-out;
}

.card-premium:hover {
  border-color: rgba(90, 166, 255, 0.26);
  box-shadow:
    0 12px 32px -4px rgba(90, 166, 255, 0.16),
    0 0 30px rgba(139, 124, 255, 0.1),
    0 0 50px rgba(176, 140, 255, 0.05),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.88);
  transform: translateY(-3px);
}

.card-premium:hover::before {
  opacity: 1;
}

.card-premium-elevated {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.99) 0%, rgba(249, 251, 255, 0.98) 100%);
  backdrop-filter: blur(20px) saturate(190%);
  -webkit-backdrop-filter: blur(20px) saturate(190%);
  border: 1px solid rgba(90, 166, 255, 0.18);
  border-radius: 1.25rem;
  box-shadow:
    0 8px 24px -4px rgba(0, 0, 0, 0.07),
    0 0 30px rgba(90, 166, 255, 0.08),
    0 0 40px rgba(139, 124, 255, 0.04),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.85);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
  position: relative;
  overflow: hidden;
}

.card-premium-elevated::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, transparent, rgba(90, 166, 255, 0.45), rgba(139, 124, 255, 0.45), rgba(176, 140, 255, 0.35), transparent);
  opacity: 0;
  transition: opacity 0.35s ease-out;
}

.card-premium-elevated:hover {
  border-color: rgba(90, 166, 255, 0.3);
  box-shadow:
    0 16px 48px -4px rgba(0, 0, 0, 0.1),
    0 0 50px rgba(90, 166, 255, 0.12),
    0 0 70px rgba(139, 124, 255, 0.06),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.92);
  transform: translateY(-4px);
}

.card-premium-elevated:hover::before {
  opacity: 1;
}

/* Smooth Transitions */
.transition-smooth {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-smooth-slow {
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Enhanced Focus States */
.focus-ring {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Backdrop Effects */
.backdrop-blur-xl {
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
}

.backdrop-blur-2xl {
  backdrop-filter: blur(40px);
  -webkit-backdrop-filter: blur(40px);
}

/* Advanced Button Interactions */
button {
  position: relative;
  overflow: hidden;
}

button::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.35);
  transform: translate(-50%, -50%);
  transition: width 0.65s cubic-bezier(0.34, 1.56, 0.64, 1), height 0.65s cubic-bezier(0.34, 1.56, 0.64, 1);
  pointer-events: none;
}

button:active::after {
  width: 300px;
  height: 300px;
}

/* Link Hover Effects */
a {
  position: relative;
}

a::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 0;
  height: 2px;
  background: currentColor;
  transition: width 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

a:hover::after {
  width: 100%;
}

/* Input Focus Effects */
input:focus,
textarea:focus,
select:focus {
  box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.12), 0 0 0 2px rgba(59, 130, 246, 0.08), inset 0 0 0 1px rgba(37, 99, 235, 0.15);
  transition: all 0.25s cubic-bezier(0.34, 1.56, 0.64, 1);
}

/* Smooth Transitions for Interactive Elements */
button,
a,
input,
textarea,
select {
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

/* Hover Scale Effect for Cards */
article {
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

article:hover {
  transform: translateY(-6px);
}



/* Enhanced Main Container */
main {
  position: relative;
  z-index: 1;
}

/* Card Enhancement Utilities */
.card-elevated {
  box-shadow: 0 12px 32px -6px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.6);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.card-elevated:hover {
  box-shadow: 0 24px 48px -12px rgba(0, 0, 0, 0.15);
  border-color: rgba(255, 255, 255, 0.8);
  transform: translateY(-4px);
}

/* Premium Dividers */
.divider-gradient {
  background: linear-gradient(90deg, transparent, rgba(37, 99, 235, 0.2), transparent);
  height: 1px;
}

/* Enhanced Typography */
.text-balance {
  text-wrap: balance;
}

.font-display {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  font-weight: 900;
  letter-spacing: -0.03em;
}

/* Smooth Scrolling */
html {
  scroll-behavior: smooth;
}

/* Slide In Down Animation */
@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-slideInDown {
  animation: slideInDown 0.4s ease-out;
}

/* Fade In Animation */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-fadeIn {
  animation: fadeIn 0.3s ease-in;
}

/* Scale In Animation */
@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-scaleIn {
  animation: scaleIn 0.3s ease-out;
}

/* Shimmer Animation for Loading States */
@keyframes shimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

.animate-shimmer {
  background: linear-gradient(
    90deg,
    #f0f0f0 0%,
    #f8f8f8 50%,
    #f0f0f0 100%
  );
  background-size: 1000px 100%;
  animation: shimmer 2s infinite;
}

/* Reduced Motion - Accessibility First */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }

  html {
    scroll-behavior: auto;
  }

  /* Disable all animations for accessibility */
  .animate-slideInWithBounce,
  .animate-fadeInWithScale,
  .animate-liquidGlassGlow,
  .animate-pulseGlow,
  .animate-slideInDown,
  .animate-slideInRight {
    animation: none !important;
  }
}

/* High Contrast Mode Support */
@media (prefers-contrast: more) {
  .glass,
  .liquid-glass,
  .liquid-glass-premium {
    border-width: 2px;
    border-color: rgba(37, 99, 235, 0.5);
  }

  button:focus-visible,
  a:focus-visible {
    outline-width: 3px;
  }
}

/* Dark Mode Support (Future-Proofing) */
@media (prefers-color-scheme: dark) {
  /* Placeholder for future dark mode implementation */
  /* Currently light-only, but structure is ready */
}

/* Accessibility - Focus Visible Styles */
*:focus-visible {
  outline: 2px solid #2563eb;
  outline-offset: 2px;
  border-radius: 4px;
}

button:focus-visible,
a:focus-visible {
  outline: 3px solid #2563eb;
  outline-offset: 3px;
}

/* Skip to Main Content Link */
.skip-to-main {
  position: absolute;
  top: -100px;
  left: 0;
  background: #1e40af;
  color: white;
  padding: 0.75rem 1.5rem;
  text-decoration: none;
  font-weight: bold;
  z-index: 100;
  border-radius: 0 0 0.5rem 0;
}

.skip-to-main:focus {
  top: 0;
}

/* Performance Optimization - GPU Acceleration */
.glass,
.liquid-glass,
.liquid-glass-premium,
article,
button,
input {
  will-change: transform, opacity;
  transform: translateZ(0);
  backface-visibility: hidden;
  -webkit-font-smoothing: antialiased;
}

/* Optimize animations for 60fps */
@media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
  }
}

/* Light Mode Only - No Dark Mode Support */

/* Premium Gradient Utilities - Aurora Theme */
.bg-gradient-premium-blue {
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.08) 0%, rgba(139, 124, 255, 0.04) 100%);
}

.bg-gradient-premium-indigo {
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.08) 0%, rgba(176, 140, 255, 0.06) 100%);
}

.text-gradient-premium {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Category Tag Styles */
.tag-pill {
  display: inline-flex;
  align-items: center;
  padding: 0.375rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 700;
  border-width: 1px;
  transition: all 300ms cubic-bezier(0.34, 1.56, 0.64, 1);
  cursor: pointer;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
}

.tag-pill:hover {
  transform: scale(1.1) translateY(-2px);
  box-shadow: 0 8px 16px -2px rgba(0, 0, 0, 0.15);
}

.tag-pill:active {
  transform: scale(0.98);
}

/* Accessibility & Performance Optimizations */

/* Focus Visible Styles - Keyboard Navigation */
:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: 4px;
}

button:focus-visible,
a:focus-visible,
input:focus-visible,
select:focus-visible,
textarea:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* High Contrast Mode Support */
@media (prefers-contrast: more) {
  :root {
    --color-text-primary: #000000;
    --color-text-secondary: #1a1a1a;
    --color-border: #000000;
  }

  .glass,
  .liquid-glass,
  .liquid-glass-premium {
    border-width: 2px;
  }
}

/* Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Dark Mode Support - DISABLED: Light theme only */
/* This application uses light theme exclusively */

/* Tap Target Sizing - Minimum 44x44px */
button,
a,
input[type="checkbox"],
input[type="radio"],
select {
  min-height: 44px;
  min-width: 44px;
}

/* Skip to Main Content Link */
.skip-to-main {
  position: absolute;
  top: -40px;
  left: 0;
  background: var(--color-primary);
  color: white;
  padding: 8px;
  text-decoration: none;
  z-index: 100;
}

.skip-to-main:focus {
  top: 0;
}

/* Sufficient Color Contrast */
.text-slate-600 {
  color: #475569;
}

.text-slate-700 {
  color: #334155;
}

.text-slate-900 {
  color: #0f172a;
}

/* Readable Font Sizes */
body {
  font-size: 16px;
  line-height: 1.6;
}

h1 {
  font-size: 2rem;
  line-height: 1.2;
}

h2 {
  font-size: 1.5rem;
  line-height: 1.3;
}

h3 {
  font-size: 1.25rem;
  line-height: 1.4;
}

/* Performance: Lazy Loading Images */
img {
  loading: lazy;
}

/* Performance: Optimize Animations */
@media (prefers-reduced-motion: no-preference) {
  /* Only apply animations if user hasn't disabled them */
  .animate-slideInUp,
  .animate-slideInDown,
  .animate-slideInLeft,
  .animate-slideInRight,
  .animate-scaleIn,
  .animate-fadeInScale {
    animation-duration: 0.3s;
    animation-timing-function: ease-out;
  }
}

/* Performance: Optimize Transitions */
* {
  transition-property: background-color, border-color, color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 200ms;
}

/* Performance: GPU Acceleration */
.glass,
.liquid-glass,
.liquid-glass-premium,
button,
a {
  will-change: transform, opacity;
  transform: translateZ(0);
  backface-visibility: hidden;
}

/* Performance: Optimize Scrolling */
main,
.overflow-y-auto {
  -webkit-overflow-scrolling: touch;
  scroll-behavior: smooth;
}

/* Accessibility: Visible Focus Indicators - Blue Theme */
*:focus-visible {
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.5);
}

/* Accessibility: Link Underlines */
a {
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-underline-offset: 4px;
}

a:hover {
  text-decoration-thickness: 3px;
}

/* Accessibility: Button Clarity */
button {
  cursor: pointer;
  font-weight: 600;
  letter-spacing: 0.5px;
}

button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Accessibility: Form Labels */
label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: var(--color-text-primary);
}

/* Accessibility: Error States */
input:invalid,
textarea:invalid,
select:invalid {
  border-color: var(--color-danger);
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

/* Accessibility: Success States */
input:valid,
textarea:valid,
select:valid {
  border-color: var(--color-success);
}

.tag-lob {
  background: linear-gradient(135deg, #e0e7ff 0%, #c7d2fe 100%);
  color: #4338ca;
  border-color: #a5b4fc;
  box-shadow:
    0 2px 8px rgba(67, 56, 202, 0.1),
    0 0 12px rgba(99, 102, 241, 0.08);
}

.tag-lob:hover {
  background: linear-gradient(135deg, #c7d2fe 0%, #a5b4fc 100%);
  box-shadow:
    0 4px 12px rgba(67, 56, 202, 0.2),
    0 0 20px rgba(99, 102, 241, 0.15);
  border-color: #818cf8;
}

.tag-peril {
  background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
  color: #991b1b;
  border-color: #fca5a5;
  box-shadow:
    0 2px 8px rgba(153, 27, 27, 0.1),
    0 0 12px rgba(239, 68, 68, 0.08);
}

.tag-peril:hover {
  background: linear-gradient(135deg, #fecaca 0%, #fca5a5 100%);
  box-shadow:
    0 4px 12px rgba(153, 27, 27, 0.2),
    0 0 20px rgba(239, 68, 68, 0.15);
  border-color: #f87171;
}

.tag-region {
  background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
  color: #065f46;
  border-color: #6ee7b7;
  box-shadow:
    0 2px 8px rgba(6, 95, 70, 0.1),
    0 0 12px rgba(16, 185, 129, 0.08);
}

.tag-region:hover {
  background: linear-gradient(135deg, #a7f3d0 0%, #6ee7b7 100%);
  box-shadow:
    0 4px 12px rgba(6, 95, 70, 0.2),
    0 0 20px rgba(16, 185, 129, 0.15);
  border-color: #34d399;
}

.tag-company {
  background: linear-gradient(135deg, #e0f2fe 0%, #f0f7ff 100%);
  color: #0369a1;
  border-color: #7dd3fc;
  box-shadow:
    0 2px 8px rgba(37, 99, 235, 0.1),
    0 0 12px rgba(59, 130, 246, 0.08);
}

.tag-company:hover {
  background: linear-gradient(135deg, #cffafe 0%, #e0f2fe 100%);
  box-shadow:
    0 4px 12px rgba(37, 99, 235, 0.2),
    0 0 20px rgba(59, 130, 246, 0.15);
  border-color: #06b6d4;
}

.tag-trend {
  background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
  color: #92400e;
  border-color: #fcd34d;
  box-shadow:
    0 2px 8px rgba(146, 64, 14, 0.1),
    0 0 12px rgba(245, 158, 11, 0.08);
}

.tag-trend:hover {
  background: linear-gradient(135deg, #fde68a 0%, #fcd34d 100%);
  box-shadow:
    0 4px 12px rgba(146, 64, 14, 0.2),
    0 0 20px rgba(245, 158, 11, 0.15);
  border-color: #fbbf24;
}

.tag-regulation {
  background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
  color: #334155;
  border-color: #cbd5e1;
  box-shadow:
    0 2px 8px rgba(51, 65, 85, 0.1),
    0 0 12px rgba(100, 116, 139, 0.06);
}

.tag-regulation:hover {
  background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
  box-shadow:
    0 4px 12px rgba(51, 65, 85, 0.2),
    0 0 20px rgba(100, 116, 139, 0.12);
  border-color: #94a3b8;
}

/* Liquid Glass Utility Classes - Aurora Theme */
.liquid-glass-light {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.85) 0%, rgba(249, 251, 255, 0.75) 100%);
  backdrop-filter: blur(20px) saturate(180%);
  -webkit-backdrop-filter: blur(20px) saturate(180%);
  border: 1px solid rgba(90, 166, 255, 0.1);
  box-shadow:
    0 4px 16px rgba(90, 166, 255, 0.06),
    0 0 20px rgba(139, 124, 255, 0.03),
    inset 0 1px 1px rgba(255, 255, 255, 0.6);
}

.liquid-glass-light:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(249, 251, 255, 0.88) 100%);
  border-color: rgba(90, 166, 255, 0.18);
  box-shadow:
    0 8px 24px rgba(90, 166, 255, 0.1),
    0 0 30px rgba(139, 124, 255, 0.05),
    inset 0 1px 1px rgba(255, 255, 255, 0.7);
}

/* Frosted Glass - Subtle Blur */
.frosted-glass {
  background: rgba(255, 255, 255, 0.7);
  backdrop-filter: blur(16px) saturate(160%);
  -webkit-backdrop-filter: blur(16px) saturate(160%);
  border: 1px solid rgba(255, 255, 255, 0.3);
  box-shadow:
    0 4px 12px rgba(0, 0, 0, 0.05),
    inset 0 1px 1px rgba(255, 255, 255, 0.5);
}

.frosted-glass:hover {
  background: rgba(255, 255, 255, 0.85);
  border-color: rgba(255, 255, 255, 0.4);
  box-shadow:
    0 8px 20px rgba(0, 0, 0, 0.08),
    inset 0 1px 1px rgba(255, 255, 255, 0.6);
}

/* Glow Container - Adds subtle glow around elements */
.glow-container {
  position: relative;
  border-radius: inherit;
}

.glow-container::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: inherit;
  background: radial-gradient(circle at 30% 30%, rgba(90, 166, 255, 0.08) 0%, transparent 50%),
              radial-gradient(circle at 70% 70%, rgba(139, 124, 255, 0.05) 0%, transparent 50%);
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.35s ease-out;
}

.glow-container:hover::after {
  opacity: 1;
}

/* Shimmer Effect - Subtle light reflection */
.shimmer-effect {
  position: relative;
  overflow: hidden;
}

.shimmer-effect::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  animation: shimmerSlide 3s infinite;
}

@keyframes shimmerSlide {
  0% {
    left: -100%;
  }
  100% {
    left: 100%;
  }
}

/* Micro Glow - Subtle glow for interactive elements - Blue Theme */
.micro-glow {
  box-shadow: 0 0 12px rgba(37, 99, 235, 0.15), 0 0 24px rgba(59, 130, 246, 0.08);
  transition: box-shadow 0.35s ease-out;
}

.micro-glow:hover {
  box-shadow: 0 0 20px rgba(37, 99, 235, 0.25), 0 0 40px rgba(59, 130, 246, 0.12);
}

/* Elevated Glow - Stronger glow for prominent elements - Blue Theme */
.elevated-glow {
  box-shadow:
    0 0 20px rgba(37, 99, 235, 0.2),
    0 0 40px rgba(59, 130, 246, 0.1),
    0 0 60px rgba(96, 165, 250, 0.05);
  transition: box-shadow 0.35s ease-out;
}

.elevated-glow:hover {
  box-shadow:
    0 0 30px rgba(37, 99, 235, 0.3),
    0 0 60px rgba(59, 130, 246, 0.15),
    0 0 90px rgba(96, 165, 250, 0.08);
}

/* ============================================================================
   ACCESSIBILITY & REDUCED MOTION SUPPORT
   ============================================================================ */

/* Respect prefers-reduced-motion for all animations */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Enhanced focus states for keyboard navigation */
:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: 0.25rem;
}

/* Focus ring for interactive elements */
button:focus-visible,
a:focus-visible,
input:focus-visible,
textarea:focus-visible,
select:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* High contrast mode support */
@media (prefers-contrast: more) {
  :root {
    --color-border: #94A3B8;
    --color-text-tertiary: #475569;
  }

  .liquid-glass,
  .liquid-glass-premium,
  .liquid-glass-ultra {
    border-width: 2px;
  }
}

/* Reduced transparency for users with vision issues */
@media (prefers-contrast: more) {
  .glass,
  .liquid-glass,
  .liquid-glass-premium,
  .liquid-glass-ultra {
    background-color: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
    -webkit-backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
  }
}

/* Forced colors mode support (Windows High Contrast) */
@media (forced-colors: active) {
  .liquid-glass,
  .liquid-glass-premium,
  .liquid-glass-ultra,
  .glass,
  .card-premium,
  .card-premium-elevated {
    border: 2px solid CanvasText;
  }

  button {
    border: 2px solid CanvasText;
  }
}

/* Screen reader only text */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

/* Skip to main content link for keyboard users */
.skip-to-main {
  position: absolute;
  top: -40px;
  left: 0;
  background: var(--color-primary);
  color: white;
  padding: 8px;
  text-decoration: none;
  z-index: 100;
  border-radius: 0 0 4px 0;
}

.skip-to-main:focus {
  top: 0;
}

/* Semantic landmark styling */
main {
  outline: none;
}

main:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Improved link underlines for accessibility */
a {
  text-decoration: underline;
  text-decoration-thickness: 1px;
  text-underline-offset: 0.25em;
}

a:hover {
  text-decoration-thickness: 2px;
}

/* Ensure sufficient color contrast */
.text-secondary {
  color: var(--color-text-secondary);
}

.text-tertiary {
  color: var(--color-text-tertiary);
}

/* Visible focus indicators for form elements */
input:focus-visible,
textarea:focus-visible,
select:focus-visible {
  box-shadow: 0 0 0 3px rgba(90, 166, 255, 0.1);
}

/* Ensure buttons have sufficient touch target size */
button,
a[role="button"],
[role="button"] {
  min-height: 44px;
  min-width: 44px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

/* Improve text selection contrast */
::selection {
  background-color: var(--color-primary);
  color: white;
}

::-moz-selection {
  background-color: var(--color-primary);
  color: white;
}

/* Ensure sufficient spacing between interactive elements */
button + button,
a + a,
button + a,
a + button {
  margin-left: 0.5rem;
}

/* Visible focus for custom components */
.glass:focus-visible,
.liquid-glass:focus-visible,
.card-premium:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Ensure proper contrast for disabled elements */
button:disabled,
input:disabled,
select:disabled,
textarea:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Improve readability of code blocks */
code {
  background-color: var(--color-bg-tertiary);
  padding: 0.125rem 0.375rem;
  border-radius: 0.25rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.875em;
}

/* Ensure proper spacing for list items */
li {
  margin-bottom: 0.5rem;
}

/* Improve table accessibility */
table {
  border-collapse: collapse;
  width: 100%;
}

th {
  text-align: left;
  font-weight: 600;
  padding: 0.75rem;
  border-bottom: 2px solid var(--color-border);
}

td {
  padding: 0.75rem;
  border-bottom: 1px solid var(--color-border-light);
}

/* Ensure proper contrast for labels */
label {
  font-weight: 500;
  color: var(--color-text-primary);
  display: block;
  margin-bottom: 0.5rem;
}

/* Improve form field styling */
input[type="text"],
input[type="email"],
input[type="password"],
input[type="search"],
input[type="url"],
textarea,
select {
  border: 1px solid var(--color-border);
  border-radius: var(--radius-md);
  padding: 0.625rem 1rem;
  font-size: 1rem;
  font-family: inherit;
  color: var(--color-text-primary);
  background-color: var(--color-bg-primary);
  transition: all 0.2s ease-out;
}

input[type="text"]:focus-visible,
input[type="email"]:focus-visible,
input[type="password"]:focus-visible,
input[type="search"]:focus-visible,
input[type="url"]:focus-visible,
textarea:focus-visible,
select:focus-visible {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(90, 166, 255, 0.1);
}

/* Ensure proper contrast for error states */
input[aria-invalid="true"],
textarea[aria-invalid="true"],
select[aria-invalid="true"] {
  border-color: var(--color-danger);
}

input[aria-invalid="true"]:focus-visible,
textarea[aria-invalid="true"]:focus-visible,
select[aria-invalid="true"]:focus-visible {
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

/* Ensure proper contrast for success states */
input[aria-invalid="false"],
textarea[aria-invalid="false"],
select[aria-invalid="false"] {
  border-color: var(--color-success);
}

input[aria-invalid="false"]:focus-visible,
textarea[aria-invalid="false"]:focus-visible,
select[aria-invalid="false"]:focus-visible {
  box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
}



================================================================================
FILE: src/main.tsx
================================================================================

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'
import { ArticleProvider } from './context/ArticleContext'
import { UIProvider } from './context/UIContext'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <ArticleProvider>
      <UIProvider>
        <App />
      </UIProvider>
    </ArticleProvider>
  </StrictMode>,
)



================================================================================
FILE: src/types/index.ts
================================================================================

/**
 * Shared type definitions for CarrierSignal
 */

export interface Article {
  id?: string;
  title: string;
  url: string;
  source: string;
  publishedAt?: string;
  description?: string;
  content?: string;
  image?: string;
  bullets5?: string[];
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    companies?: string[];
    trends?: string[];
    regulations?: string[];
  };
  smartScore?: number;
  aiScore?: number;
  impactScore?: number;
  impactBreakdown?: {
    market: number;
    regulatory: number;
    catastrophe: number;
    technology: number;
  };
  regulatory?: boolean;
  stormName?: string;
  whyItMatters?: Record<string, string>;
  citations?: string[];
  confidenceRationale?: string;
  leadQuote?: string;
  disclosure?: string;
  regionsNormalized?: string[];
  companiesNormalized?: string[];
  finalScore?: number;
  createdAt?: Date | { toDate: () => Date };
  riskPulse?: 'LOW' | 'MEDIUM' | 'HIGH';
  sentiment?: 'POSITIVE' | 'NEGATIVE' | 'NEUTRAL';
  confidence?: number;
  relevanceScore?: number;
  recencyScore?: number;
  combinedScore?: number;
  disasterScore?: number;
  weatherScore?: number;
  financialScore?: number;
  clusterId?: string;
  advisoryId?: string;
}

export interface RoleOption {
  id: string;
  label: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
}

export interface SortOption {
  id: 'smart' | 'recency';
  label: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
}




================================================================================
FILE: src/utils/api.ts
================================================================================

/**
 * API Utility Functions
 * Centralized API calls with error handling and retry logic
 */

import { logger } from './logger';
import { API_CONFIG } from '../config';

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

export interface ApiError extends Error {
  status?: number;
  code?: string;
}

const MAX_RETRIES = 3;
const RETRY_DELAY_MS = 1000;
const REQUEST_TIMEOUT_MS = 30000;

async function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function fetchWithRetry<T>(
  url: string,
  options: RequestInit = {},
  retries = 0
): Promise<T> {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT_MS);

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const error: ApiError = new Error(`HTTP ${response.status}`);
        error.status = response.status;
        throw error;
      }

      return await response.json();
    } finally {
      clearTimeout(timeoutId);
    }
  } catch (error) {
    const isRetryable =
      error instanceof TypeError ||
      (error as ApiError).status === 503 ||
      (error instanceof Error && error.name === 'AbortError');

    if (retries < MAX_RETRIES && isRetryable) {
      logger.warn('api', `Retry attempt ${retries + 1}/${MAX_RETRIES}`, { url });
      await delay(RETRY_DELAY_MS * (retries + 1));
      return fetchWithRetry<T>(url, options, retries + 1);
    }
    throw error;
  }
}

export async function askBrief(query: string): Promise<ApiResponse<unknown>> {
  try {
    if (!query || query.trim().length === 0) {
      throw new Error('Query cannot be empty');
    }

    logger.info('api', 'Calling askBrief', { query });

    const url = new URL(`${API_CONFIG.FUNCTIONS_URL}${API_CONFIG.ENDPOINTS.ASK_BRIEF}`);
    url.searchParams.append('query', query);

    const data = await fetchWithRetry<unknown>(url.toString(), {
      method: 'GET',
    });

    logger.info('api', 'askBrief success');
    return { success: true, data };
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Unknown error';
    logger.error('api', 'askBrief failed', { error: message });
    return { success: false, error: message };
  }
}

export async function getQuickRead(url: string): Promise<ApiResponse<unknown>> {
  try {
    if (!url || url.trim().length === 0) {
      throw new Error('URL cannot be empty');
    }

    // Validate URL format
    try {
      new URL(url);
    } catch {
      throw new Error('Invalid URL format');
    }

    logger.info('api', 'Calling getQuickRead', { url });

    const apiUrl = new URL(`${API_CONFIG.FUNCTIONS_URL}/getQuickRead`);
    apiUrl.searchParams.append('url', url);

    const data = await fetchWithRetry<unknown>(apiUrl.toString(), {
      method: 'GET',
    });

    logger.info('api', 'getQuickRead success');
    return { success: true, data };
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Unknown error';
    logger.error('api', 'getQuickRead failed', { error: message });
    return { success: false, error: message };
  }
}




================================================================================
FILE: src/utils/errorBoundary.tsx
================================================================================

/**
 * Error Boundary Component
 * Catches React errors and displays fallback UI with recovery options
 * Implements error logging, recovery strategies, and user-friendly messaging
 */

import React from 'react';
import type { ReactNode, ReactElement } from 'react';
import { AlertTriangle, RefreshCw, Home } from 'lucide-react';
import { logger } from './logger';

interface Props {
  children: ReactNode;
  fallback?: ReactElement;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorCount: number;
  showDetails: boolean;
}

export class ErrorBoundary extends React.Component<Props, State> {
  private resetTimeout: ReturnType<typeof setTimeout> | null = null;

  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null, errorCount: 0, showDetails: false };
  }

  static getDerivedStateFromError(error: Error): Partial<State> {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    const errorCount = this.state.errorCount + 1;
    this.setState({ errorCount });

    // Log error with context
    logger.error('ErrorBoundary', 'React component error', {
      error: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      errorCount,
      timestamp: new Date().toISOString(),
    });

    // Call custom error handler if provided
    this.props.onError?.(error, errorInfo);

    // Auto-reset after 30 seconds if error count is low
    if (errorCount < 3) {
      this.resetTimeout = setTimeout(() => {
        this.resetError();
      }, 30000);
    }
  }

  componentWillUnmount() {
    if (this.resetTimeout) {
      clearTimeout(this.resetTimeout);
    }
  }

  resetError = () => {
    this.setState({ hasError: false, error: null, showDetails: false });
  };

  goHome = () => {
    window.location.href = '/';
  };

  toggleDetails = () => {
    this.setState(prev => ({ showDetails: !prev.showDetails }));
  };

  render() {
    if (this.state.hasError) {
      return (
        this.props.fallback || (
          <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 p-4">
            <div className="max-w-md w-full">
              {/* Error Icon */}
              <div className="flex justify-center mb-6">
                <div className="p-4 rounded-full bg-[#FEE2E2] border border-[#EF4444]/30">
                  <AlertTriangle size={32} className="text-[#EF4444]" />
                </div>
              </div>

              {/* Error Message */}
              <h1 className="text-2xl font-bold text-[#0F172A] mb-2 text-center">
                Something went wrong
              </h1>
              <p className="text-[#64748B] mb-6 text-center text-sm">
                {this.state.error?.message || 'An unexpected error occurred'}
              </p>

              {/* Error Details (if enabled) */}
              {this.state.showDetails && this.state.error && (
                <div className="mb-6 p-4 bg-[#F9FBFF] rounded-lg border border-[#C7D2E1]/30 max-h-40 overflow-y-auto">
                  <p className="text-xs font-mono text-[#64748B] whitespace-pre-wrap break-words">
                    {this.state.error.stack}
                  </p>
                </div>
              )}

              {/* Error Count Warning */}
              {this.state.errorCount >= 3 && (
                <div className="mb-6 p-3 bg-[#FEF3C7] rounded-lg border border-[#F59E0B]/30">
                  <p className="text-xs text-[#92400E]">
                    Multiple errors detected. Please clear your browser cache or try a different browser.
                  </p>
                </div>
              )}

              {/* Action Buttons */}
              <div className="space-y-3">
                <button
                  onClick={this.resetError}
                  className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-[#5AA6FF] text-white rounded-lg hover:bg-[#4A96EF] transition-colors font-medium"
                  aria-label="Try again"
                >
                  <RefreshCw size={18} />
                  Try Again
                </button>
                <button
                  onClick={this.goHome}
                  className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-[#E8F2FF] text-[#5AA6FF] rounded-lg hover:bg-[#D4E5FF] transition-colors font-medium"
                  aria-label="Go to home page"
                >
                  <Home size={18} />
                  Go Home
                </button>
                <button
                  onClick={this.toggleDetails}
                  className="w-full text-xs text-[#64748B] hover:text-[#5AA6FF] transition-colors py-2"
                  aria-label={this.state.showDetails ? 'Hide error details' : 'Show error details'}
                >
                  {this.state.showDetails ? 'Hide' : 'Show'} Error Details
                </button>
              </div>
            </div>
          </div>
        )
      );
    }

    return this.props.children;
  }
}




================================================================================
FILE: src/utils/logger.ts
================================================================================

/**
 * Structured Logging Utility
 * Provides consistent logging across the application with severity levels
 */

const LogLevel = {
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR',
} as const;

type LogLevelType = typeof LogLevel[keyof typeof LogLevel];

interface LogEntry {
  timestamp: string;
  level: LogLevelType;
  module: string;
  message: string;
  data?: unknown;
}

class Logger {
  private isDevelopment = import.meta.env.DEV;

  private formatEntry(entry: LogEntry): string {
    const { timestamp, level, module, message, data } = entry;
    const dataStr = data ? ` | ${JSON.stringify(data)}` : '';
    return `[${timestamp}] [${level}] [${module}] ${message}${dataStr}`;
  }

  private log(level: LogLevelType, module: string, message: string, data?: unknown) {
    const entry: LogEntry = {
      timestamp: new Date().toISOString(),
      level,
      module,
      message,
      data,
    };

    const formatted = this.formatEntry(entry);

    switch (level) {
      case 'DEBUG':
        if (this.isDevelopment) console.debug(formatted);
        break;
      case 'INFO':
        console.info(formatted);
        break;
      case 'WARN':
        console.warn(formatted);
        break;
      case 'ERROR':
        console.error(formatted);
        break;
    }

    // TODO: Send to Sentry or other error tracking service
  }

  debug(module: string, message: string, data?: unknown) {
    this.log(LogLevel.DEBUG, module, message, data);
  }

  info(module: string, message: string, data?: unknown) {
    this.log(LogLevel.INFO, module, message, data);
  }

  warn(module: string, message: string, data?: unknown) {
    this.log(LogLevel.WARN, module, message, data);
  }

  error(module: string, message: string, data?: unknown) {
    this.log(LogLevel.ERROR, module, message, data);
  }
}

export const logger = new Logger();




================================================================================
FILE: src/utils/notifications.ts
================================================================================

/**
 * Notifications Utility
 * Handles toast notifications, alerts, and user feedback
 */

export type NotificationType = 'success' | 'error' | 'warning' | 'info';

export interface Notification {
  id: string;
  type: NotificationType;
  title: string;
  message?: string;
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
}

/**
 * Notification manager
 */
class NotificationManager {
  private notifications: Map<string, Notification> = new Map();
  private listeners: Set<(notifications: Notification[]) => void> = new Set();

  /**
   * Subscribe to notification changes
   */
  subscribe(listener: (notifications: Notification[]) => void): () => void {
    this.listeners.add(listener);
    return () => this.listeners.delete(listener);
  }

  /**
   * Notify all listeners
   */
  private notify(): void {
    const notifications = Array.from(this.notifications.values());
    this.listeners.forEach(listener => listener(notifications));
  }

  /**
   * Add notification
   */
  add(notification: Omit<Notification, 'id'>): string {
    const id = `notification-${Date.now()}-${Math.random()}`;
    const fullNotification: Notification = {
      ...notification,
      id,
      duration: notification.duration ?? 5000,
    };

    this.notifications.set(id, fullNotification);
    this.notify();

    // Auto-remove after duration
    if (fullNotification.duration && fullNotification.duration > 0) {
      setTimeout(() => this.remove(id), fullNotification.duration);
    }

    return id;
  }

  /**
   * Remove notification
   */
  remove(id: string): void {
    this.notifications.delete(id);
    this.notify();
  }

  /**
   * Clear all notifications
   */
  clear(): void {
    this.notifications.clear();
    this.notify();
  }

  /**
   * Get all notifications
   */
  getAll(): Notification[] {
    return Array.from(this.notifications.values());
  }

  /**
   * Show success notification
   */
  success(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'success',
      title,
      message,
      duration,
    });
  }

  /**
   * Show error notification
   */
  error(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'error',
      title,
      message,
      duration: duration ?? 7000, // Longer duration for errors
    });
  }

  /**
   * Show warning notification
   */
  warning(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'warning',
      title,
      message,
      duration,
    });
  }

  /**
   * Show info notification
   */
  info(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'info',
      title,
      message,
      duration,
    });
  }
}

// Export singleton instance
export const notificationManager = new NotificationManager();

/**
 * Hook for using notifications in React
 */
export function useNotifications() {
  return {
    success: (title: string, message?: string) => notificationManager.success(title, message),
    error: (title: string, message?: string) => notificationManager.error(title, message),
    warning: (title: string, message?: string) => notificationManager.warning(title, message),
    info: (title: string, message?: string) => notificationManager.info(title, message),
    remove: (id: string) => notificationManager.remove(id),
    clear: () => notificationManager.clear(),
  };
}

/**
 * Browser notification helper
 */
export async function requestNotificationPermission(): Promise<NotificationPermission> {
  if (!('Notification' in window)) {
    console.warn('Browser does not support notifications');
    return 'denied';
  }

  if (Notification.permission === 'granted') {
    return 'granted';
  }

  if (Notification.permission !== 'denied') {
    return await Notification.requestPermission();
  }

  return 'denied';
}

/**
 * Send browser notification
 */
export function sendBrowserNotification(
  title: string,
  options?: NotificationOptions
): globalThis.Notification | null {
  if (!('Notification' in window) || Notification.permission !== 'granted') {
    return null;
  }

  return new Notification(title, options);
}

/**
 * Send article notification
 */
export function notifyNewArticle(
  title: string,
  source: string,
  _articleUrl: string
): globalThis.Notification | null {
  return sendBrowserNotification(`New article from ${source}`, {
    body: title,
    icon: '/logo.png',
    badge: '/badge.png',
    tag: 'article-notification',
    requireInteraction: false,
  });
}

/**
 * Notification preferences
 */
export interface NotificationPreferences {
  enabled: boolean;
  frequency: 'realtime' | 'daily' | 'weekly';
  categories: {
    regulatory: boolean;
    market: boolean;
    technology: boolean;
    claims: boolean;
    underwriting: boolean;
  };
  quiet_hours?: {
    enabled: boolean;
    start: string; // HH:MM
    end: string; // HH:MM
  };
}

/**
 * Check if in quiet hours
 */
export function isInQuietHours(preferences: NotificationPreferences): boolean {
  if (!preferences.quiet_hours?.enabled) {
    return false;
  }

  const now = new Date();
  const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;

  const start = preferences.quiet_hours.start;
  const end = preferences.quiet_hours.end;

  if (start < end) {
    return currentTime >= start && currentTime < end;
  } else {
    // Quiet hours span midnight
    return currentTime >= start || currentTime < end;
  }
}

/**
 * Should send notification based on preferences
 */
export function shouldSendNotification(
  preferences: NotificationPreferences,
  category: keyof NotificationPreferences['categories']
): boolean {
  if (!preferences.enabled) {
    return false;
  }

  if (!preferences.categories[category]) {
    return false;
  }

  if (isInQuietHours(preferences)) {
    return false;
  }

  return true;
}




================================================================================
FILE: src/utils/rankingSystem.ts
================================================================================

/**
 * Advanced AI Ranking System for CarrierSignal
 *
 * Composite Score (0-100) balancing:
 * - AI Relevance (40%): P&C-specific embeddings and keyword matches
 * - Newsworthiness (30%): Impact, regulatory, catastrophe signals
 * - Recency (15%): Time decay function with exponential decay
 * - User Feedback (5%): Thumbs up/down with Bayesian averaging
 * - RAG Quality (10%): Factual density and source credibility
 */

interface Article {
  url: string;
  title: string;
  publishedAt?: string;
  impactScore?: number;
  impactBreakdown?: {
    market?: number;
    regulatory?: number;
    catastrophe?: number;
    technology?: number;
  };
  regulatory?: boolean;
  stormName?: string;
  aiScore?: number;
  smartScore?: number;
  source?: string;
  ragQualityScore?: number; // RAG quality score 0-100
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    companies?: string[];
    trends?: string[];
    regulations?: string[];
  };
  userFeedback?: {
    thumbsUp: number;
    thumbsDown: number;
  };
}

interface RankedArticle extends Article {
  aiRankingScore: number;
  recencyScore: number;
  newsworthinessScore: number;
  userFeedbackScore: number;
  ragQualityScore: number;
  finalScore: number;
}

/**
 * Calculate recency score with time decay
 * Recent articles get higher scores, older articles decay exponentially
 */
function calculateRecencyScore(publishedAt?: string): number {
  if (!publishedAt) return 0;

  const now = Date.now();
  const publishedTime = new Date(publishedAt).getTime();
  const ageHours = (now - publishedTime) / (1000 * 60 * 60);

  // Exponential decay: fresh articles (0-1 hour) get 100, decays to 0 after 7 days
  const maxAge = 7 * 24; // 7 days in hours
  if (ageHours > maxAge) return 0;

  // Exponential decay function
  const decayFactor = Math.exp(-ageHours / (maxAge / 3));
  return Math.max(0, decayFactor * 100);
}

/**
 * Calculate newsworthiness score based on article signals
 * Enhanced with multi-dimensional P&C-specific signals
 */
function calculateNewsworthinessScore(article: Article): number {
  let score = 0;

  // Impact breakdown scoring (regulatory, catastrophe, market, technology)
  if (article.impactBreakdown) {
    const { regulatory = 0, catastrophe = 0, market = 0, technology = 0 } = article.impactBreakdown;

    // Regulatory impact - highest priority for P&C professionals
    if (regulatory > 75) score += 25;
    else if (regulatory > 50) score += 15;
    else if (regulatory > 25) score += 8;

    // Catastrophe impact - critical for risk management
    if (catastrophe > 75) score += 25;
    else if (catastrophe > 50) score += 15;
    else if (catastrophe > 25) score += 8;

    // Market impact - affects pricing and competition
    if (market > 75) score += 15;
    else if (market > 50) score += 10;

    // Technology impact - affects operations and innovation
    if (technology > 75) score += 10;
    else if (technology > 50) score += 5;
  } else if (article.impactScore) {
    // Fallback to overall impact score
    if (article.impactScore > 75) score += 30;
    else if (article.impactScore > 50) score += 15;
  }

  // Regulatory articles - very important for P&C professionals
  if (article.regulatory) {
    score += 20;
  }

  // Catastrophe/Storm articles - critical for risk management
  if (article.stormName) {
    score += 25;
  }

  // Regulation tags - specific regulatory mentions
  if (article.tags?.regulations && article.tags.regulations.length > 0) {
    score += 15;
  }

  // Multiple tags indicate comprehensive coverage
  const tagCount = (article.tags?.lob?.length || 0) +
                   (article.tags?.perils?.length || 0) +
                   (article.tags?.regions?.length || 0);
  if (tagCount >= 4) {
    score += 12;
  } else if (tagCount >= 3) {
    score += 8;
  } else if (tagCount >= 2) {
    score += 4;
  }

  // Trending topics boost - market trends are important
  if (article.tags?.trends && article.tags.trends.length > 0) {
    score += 8;
  }

  // Company mentions (market-moving news)
  if (article.tags?.companies && article.tags.companies.length > 0) {
    score += 10;
  }

  return Math.min(score, 100);
}

/**
 * Calculate user feedback score
 * Light weighting: thumbs up/down have minimal impact on ranking
 */
function calculateUserFeedbackScore(article: Article): number {
  if (!article.userFeedback) return 50; // Neutral score

  const { thumbsUp = 0, thumbsDown = 0 } = article.userFeedback;
  const totalFeedback = thumbsUp + thumbsDown;

  if (totalFeedback === 0) return 50; // Neutral

  // Light weighting: feedback affects score by max ±10 points
  const feedbackRatio = (thumbsUp - thumbsDown) / totalFeedback;
  return 50 + feedbackRatio * 10;
}

/**
 * Calculate AI relevance score (normalized 0-100)
 */
function calculateAIRelevanceScore(article: Article): number {
  if (!article.aiScore) return 50;
  // Normalize aiScore to 0-100 range
  return Math.min(Math.max(article.aiScore, 0), 100);
}

/**
 * Calculate RAG quality score (normalized 0-100)
 * Higher quality articles are better for retrieval-augmented generation
 */
function calculateRAGQualityScore(article: Article): number {
  if (!article.ragQualityScore) return 70; // Default to acceptable quality
  // Normalize ragQualityScore to 0-100 range
  const normalized = Math.min(Math.max(article.ragQualityScore, 0), 100);
  // Apply slight boost for high-quality articles (>80)
  if (normalized >= 80) {
    return Math.min(normalized * 1.05, 100);
  }
  return normalized;
}

/**
 * Main ranking function - calculates final score for an article
 * Composite score (0-100) for P&C insurance professionals
 */
export function calculateArticleRankingScore(article: Article): RankedArticle {
  const recencyScore = calculateRecencyScore(article.publishedAt);
  const newsworthinessScore = calculateNewsworthinessScore(article);
  const userFeedbackScore = calculateUserFeedbackScore(article);
  const aiRelevanceScore = calculateAIRelevanceScore(article);
  const ragQualityScore = calculateRAGQualityScore(article);

  // Weighted combination for P&C insurance professionals:
  // - AI Relevance: 40% (core relevance to insurance domain)
  // - Newsworthiness: 30% (impact, regulatory, catastrophe - critical for decision-making)
  // - Recency: 15% (time decay - important but not dominant)
  // - RAG Quality: 10% (article quality for retrieval - ensures good context)
  // - User Feedback: 5% (light weighting - community signal)
  const finalScore =
    aiRelevanceScore * 0.40 +
    newsworthinessScore * 0.30 +
    recencyScore * 0.15 +
    ragQualityScore * 0.10 +
    userFeedbackScore * 0.05;

  return {
    ...article,
    aiRankingScore: aiRelevanceScore,
    recencyScore,
    newsworthinessScore,
    userFeedbackScore,
    ragQualityScore,
    smartScore: Math.round(finalScore * 100) / 100,
    finalScore: Math.round(finalScore * 100) / 100,
  };
}

/**
 * Rank articles by AI ranking score
 */
export function rankArticlesByAI(articles: Article[]): RankedArticle[] {
  return articles
    .map(calculateArticleRankingScore)
    .sort((a, b) => b.finalScore - a.finalScore);
}

/**
 * Rank articles by recency
 */
export function rankArticlesByRecency(articles: Article[]): RankedArticle[] {
  return articles
    .map(calculateArticleRankingScore)
    .sort((a, b) => {
      const dateA = new Date(a.publishedAt || 0).getTime();
      const dateB = new Date(b.publishedAt || 0).getTime();
      return dateB - dateA;
    });
}






================================================================================
FILE: src/utils/validation.ts
================================================================================

/**
 * Validation Utilities
 * Type-safe validation helpers for common patterns
 */

export function isValidUrl(url: string): boolean {
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
}

export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

export function sanitizeHtml(html: string): string {
  const div = document.createElement('div');
  div.textContent = html;
  return div.innerHTML;
}

export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.slice(0, maxLength - 3) + '...';
}

export function formatDate(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  return d.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
}

export function formatTime(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  return d.toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
  });
}

export function getTimeAgo(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  const now = new Date();
  const seconds = Math.floor((now.getTime() - d.getTime()) / 1000);

  if (seconds < 60) return 'just now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  if (seconds < 604800) return `${Math.floor(seconds / 86400)}d ago`;
  
  return formatDate(d);
}




================================================================================
FILE: tsconfig.app.json
================================================================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "types": ["vite/client"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"],
  "exclude": ["src/**/*.test.ts", "src/**/*.test.tsx", "src/__tests__/**/*"]
}



================================================================================
FILE: tsconfig.json
================================================================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



================================================================================
FILE: tsconfig.node.json
================================================================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "types": ["node"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}



================================================================================
FILE: vite.config.ts
================================================================================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwind from '@tailwindcss/vite'

export default defineConfig({
  plugins: [react(), tailwind()],
  build: {
    // Optimize chunk size for production
    chunkSizeWarningLimit: 1000,
    rollupOptions: {
      output: {
        // Manual chunk splitting for better caching
        manualChunks: {
          'firebase': ['firebase/firestore', 'firebase/app'],
          'react-vendor': ['react', 'react-dom'],
        },
      },
    },
    // Improve build performance
    minify: 'terser',
  },
  // Optimize for production
  define: {
    'process.env.NODE_ENV': '"production"',
  },
})

