================================================================================
                    CARRIERSIGNAL - COMPREHENSIVE CODE REVIEW
================================================================================
Generated: $(date)
Repository: CarrierSignal P&C Insurance News App
Purpose: External code review of all frontend and backend code

================================================================================
                              TABLE OF CONTENTS
================================================================================

FRONTEND CODE:
- TypeScript/React Components
- Hooks and Utilities
- Design System and Styling
- Configuration Files

BACKEND CODE:
- Firebase Cloud Functions
- Utilities and Services
- Configuration Files

================================================================================
                            FRONTEND CODE FILES
================================================================================


=================================================================================
FILE: src/App.tsx
=================================================================================

import { useEffect, useState, useRef, useCallback, lazy, Suspense } from "react";
import { Header } from "./components/Header";
import { SearchFirst } from "./components/SearchFirst";
import { BriefPanel } from "./components/BriefPanel";
import { MobileNav } from "./components/MobileNav";
import { SkeletonGrid } from "./components/SkeletonLoader";
import { CommandPalette } from "./components/CommandPalette";
import { useArticles } from "./hooks/useArticles";
import { useRealTimeScoring } from "./hooks/useRealTimeScoring";
import { useUI } from "./context/UIContext";
import { ErrorBoundary } from "./utils/errorBoundary";
import { logger } from "./utils/logger";
import type { Article } from "./types";
import "./index.css";

// Lazy load components for code splitting
const Dashboard = lazy(() => import("./components/Dashboard"));
const Bookmarks = lazy(() => import("./components/Bookmarks"));
const SettingsPanel = lazy(() => import("./components/SettingsPanel"));

function AppContent() {
  // Use context for UI state
  const { view, setView, sortMode, setSortMode, isPaletteOpen, setIsPaletteOpen, quickReadArticleUrl, setQuickReadArticleUrl } = useUI();

  // Map sort mode to query field
  const sortByField = sortMode === 'recency' ? 'publishedAt' : 'aiScore';

  // Log sort mode changes
  useEffect(() => {
    console.log('[App] Sort mode changed to:', sortMode, '-> sortByField:', sortByField);
  }, [sortMode, sortByField]);

  // Use custom hook for articles
  const { articles, loading, isLoadingMore, error, hasMore, loadMore } = useArticles({
    pageSize: 20,
    sortBy: sortByField,
    sortOrder: 'desc',
  });

  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);
  const [displayArticles, setDisplayArticles] = useState<Article[]>([]);
  const lastLoadTimeRef = useRef(0);
  const rafIdRef = useRef<number | undefined>(undefined);
  const DEBOUNCE_MS = 300;

  // Enable real-time scoring to ensure older articles naturally move down the feed
  // Recalculates scores every 60 seconds to account for article age decay
  useRealTimeScoring({
    articles,
    onScoresUpdate: setDisplayArticles,
    updateInterval: 60000, // Update every 1 minute
    enabled: sortMode === 'smart', // Only for smart sort
  });

  // Handle scroll events for infinite loading with RAF for smooth scrolling
  const handleScroll = useCallback((e: Event) => {
    if (isLoadingMore || !hasMore) return;

    // Cancel previous RAF to avoid multiple pending updates
    if (rafIdRef.current) cancelAnimationFrame(rafIdRef.current);

    rafIdRef.current = requestAnimationFrame(() => {
      const now = Date.now();
      if (now - lastLoadTimeRef.current < DEBOUNCE_MS) return;

      const container = e.target as HTMLDivElement;
      if (!container) return;

      const { scrollTop, scrollHeight, clientHeight } = container;
      const distanceFromBottom = scrollHeight - (scrollTop + clientHeight);

      console.log('[App] Scroll event - distance from bottom:', distanceFromBottom, 'isLoadingMore:', isLoadingMore, 'hasMore:', hasMore);

      if (distanceFromBottom < 500) {
        lastLoadTimeRef.current = now;
        console.log('[App] ✅ Loading more articles');
        void loadMore();
      }
    });
  }, [isLoadingMore, hasMore, loadMore]);

  // Log errors and pagination state
  useEffect(() => {
    if (error) {
      logger.error('App', 'Article loading error', { error });
    }
  }, [error]);



  // Manual test button for pagination
  const handleManualLoadMore = async () => {
    console.log('[App] Manual loadMore triggered');
    await loadMore();
  };

  // Keyboard shortcuts for Command-K and Quick Read
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Command-K or Ctrl-K to open palette
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        setIsPaletteOpen(!isPaletteOpen);
      }
      // Escape to close palette or quick read
      if (e.key === 'Escape') {
        setIsPaletteOpen(false);
        setQuickReadArticleUrl(null);
      }
      // Ctrl+Shift+T to open test view
      if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === 'T') {
        e.preventDefault();
        setView(view === 'test' ? 'feed' : 'test');
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isPaletteOpen, setIsPaletteOpen, setQuickReadArticleUrl, view, setView]);

  // Render
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 flex flex-col">
        <Header isLoading={true} />
        <SkeletonGrid />
      </div>
    );
  }

  return (
    <div className="h-screen w-full max-w-full overflow-x-hidden bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 flex flex-col">
      {/* Professional Header - Sticky */}
      <div className="sticky top-0 z-50">
        <Header isLoading={false} />
      </div>

      {/* Main Content Area */}
      {view === 'feed' ? (
        <div className="flex-1 flex gap-0 w-full max-w-full min-h-0">
          {/* Left: Search Results - Full Width */}
          <SearchFirst
            articles={sortMode === 'smart' && displayArticles.length > 0 ? displayArticles : articles}
            onArticleSelect={setSelectedArticle}
            selectedArticle={selectedArticle}
            sortMode={sortMode}
            onSortChange={setSortMode}
            isLoadingMore={isLoadingMore}
            hasMore={hasMore}
            onScroll={handleScroll}
          />
        </div>
      ) : view === 'dashboard' ? (
        <div className="flex-1 overflow-y-auto">
          <Dashboard articles={sortMode === 'smart' && displayArticles.length > 0 ? displayArticles : articles} />
        </div>
      ) : view === 'test' ? (
        <div className="flex-1 flex flex-col bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 p-4">
          <div className="space-y-4">
            <h1 className="text-2xl font-bold">Pagination Test</h1>
            <div className="space-y-2">
              <p>Articles loaded: {articles.length}</p>
              <p>Has more: {hasMore ? 'Yes' : 'No'}</p>
              <p>Is loading: {isLoadingMore ? 'Yes' : 'No'}</p>
            </div>
            <button
              onClick={handleManualLoadMore}
              disabled={isLoadingMore || !hasMore}
              className="px-4 py-2 bg-[#5AA6FF] text-white rounded-lg disabled:opacity-50"
            >
              Load More Articles
            </button>
            <div className="mt-4 space-y-2 max-h-96 overflow-y-auto">
              {articles.map((article, idx) => (
                <div key={idx} className="p-2 bg-white rounded border border-[#C7D2E1]/25">
                  <p className="font-semibold text-sm">{idx + 1}. {article.title?.substring(0, 60)}...</p>
                  <p className="text-xs text-gray-500">Score: {article.smartScore}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      ) : view === 'bookmarks' ? (
        <div className="flex-1 flex flex-col bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20">
          <Suspense fallback={<SkeletonGrid />}>
            <Bookmarks onArticleSelect={setSelectedArticle} />
          </Suspense>
        </div>
      ) : view === 'settings' ? (
        <div className="flex-1 flex flex-col bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20">
          <Suspense fallback={<SkeletonGrid />}>
            <SettingsPanel onSortChange={setSortMode} />
          </Suspense>
        </div>
      ) : null}

      {/* Article Details Modal - Desktop and Mobile */}
      {selectedArticle && (
        <div
          className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center lg:items-end p-4 lg:p-0 animate-fadeIn overflow-hidden"
          onClick={() => setSelectedArticle(null)}
        >
          <div
            className="w-full lg:w-full lg:rounded-t-3xl lg:max-h-[90vh] max-w-2xl lg:max-w-none liquid-glass-ultra rounded-3xl lg:rounded-t-3xl max-h-[90vh] border border-[#C7D2E1]/30 lg:border-t lg:border-l-0 lg:border-r-0 lg:border-b-0 animate-slideInUp lg:animate-slideInUp flex flex-col"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="overflow-y-auto flex-1">
              <BriefPanel article={selectedArticle} onClose={() => setSelectedArticle(null)} />
            </div>
          </div>
        </div>
      )}

      {/* Quick Read Modal */}
      {quickReadArticleUrl && (
        <div
          className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4 animate-fadeIn overflow-hidden"
          onClick={() => setQuickReadArticleUrl(null)}
        >
          <div
            className="w-full max-w-2xl liquid-glass-ultra rounded-3xl max-h-[90vh] shadow-2xl border border-[#C7D2E1]/30 animate-scaleIn flex flex-col"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="overflow-y-auto flex-1">
              {/* Quick Read content will be rendered here by QuickReadModal component */}
              <div className="p-6 text-center text-[#64748B]">
                <p>Quick Read feature coming soon...</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Command Palette */}
      <CommandPalette
        isOpen={isPaletteOpen}
        onClose={() => setIsPaletteOpen(false)}
        articles={articles}
        onArticleSelect={setSelectedArticle}
      />

      {/* Mobile Navigation */}
      <MobileNav onViewChange={setView} currentView={view} />
    </div>
  );
}

export default function App() {
  return (
    <ErrorBoundary>
      <AppContent />
    </ErrorBoundary>
  );
}


=================================================================================
FILE: src/main.tsx
=================================================================================

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'
import { ArticleProvider } from './context/ArticleContext'
import { UIProvider } from './context/UIContext'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <ArticleProvider>
      <UIProvider>
        <App />
      </UIProvider>
    </ArticleProvider>
  </StrictMode>,
)


=================================================================================
FILE: src/config.ts
=================================================================================

/**
 * Centralized Configuration for CarrierSignal
 * 
 * All configuration values are defined here for easy management
 */

// ============================================================================
// API & ENDPOINTS
// ============================================================================

export const API_CONFIG = {
  // Firebase Functions base URL
  FUNCTIONS_URL: import.meta.env.VITE_FUNCTIONS_URL || 'http://localhost:5001/carriersignal-prod/us-central1',
  
  // API endpoints
  ENDPOINTS: {
    ASK_BRIEF: '/askBrief',
    REFRESH_FEEDS: '/refreshFeedsWithBatching',
  },
};

// ============================================================================
// FIRESTORE COLLECTIONS
// ============================================================================

export const FIRESTORE_COLLECTIONS = {
  ARTICLES: 'articles',
  ARTICLE_EMBEDDINGS: 'article_embeddings',
  FEED_SOURCES: 'feed_sources',
  RATE_LIMITS: 'rate_limits',
};

// ============================================================================
// RAG & SEARCH
// ============================================================================

export const RAG_CONFIG = {
  // Hybrid retrieval parameters
  HYBRID_RETRIEVAL: {
    INITIAL_FETCH: 500,      // Fetch top 500 articles for MMR
    COSINE_SIMILARITY_TOP_K: 20,  // Top 20 for MMR re-ranking
    MMR_FINAL_K: 12,         // Final 12 articles after MMR
    MMR_LAMBDA: 0.7,         // Balance between relevance (0.7) and diversity (0.3)
  },
  
  // Cluster diversity
  CLUSTER_DIVERSITY: {
    MAX_PER_CLUSTER: 1,      // Max 1 article per cluster
  },
  
  // Recency boost
  RECENCY_BOOST: {
    WEIGHT: 0.1,             // Recency boost weight
    WINDOW_DAYS: 30,         // 30-day window for recency boost
  },
};

// ============================================================================
// RATE LIMITING
// ============================================================================

export const RATE_LIMIT_CONFIG = {
  WINDOW_MS: 60 * 1000,      // 1 minute window
  MAX_REQUESTS: 100,         // Max 100 requests per window
  TTL_SECONDS: 3600,         // 1 hour TTL for rate limit records
};

// ============================================================================
// LINK VALIDATION
// ============================================================================

export const LINK_CONFIG = {
  TRUSTED_DOMAINS: [
    'insurancejournal.com',
    'naic.org',
    'reuters.com',
    'bloomberg.com',
    'cnbc.com',
    'wsj.com',
    'ft.com',
    'bbc.com',
    'apnews.com',
    'businesswire.com',
    'prnewswire.com',
    'sec.gov',
    'treasury.gov',
    'federalreserve.gov',
  ],
  
  TRACKING_PARAMS: [
    'utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term',
    'fbclid', 'gclid', 'msclkid', 'ref', 'source', 'campaign',
    'tracking_id', 'track_id', 'cid', 'sid'
  ],
};

// ============================================================================
// AI & SUMMARIZATION
// ============================================================================

export const AI_CONFIG = {
  // OpenAI models
  MODELS: {
    SUMMARIZATION: 'gpt-4o-mini',
    EMBEDDING: 'text-embedding-3-small',
    SCORING: 'gpt-4o-mini',
  },
  
  // Embedding dimensions
  EMBEDDING_DIMENSIONS: 512,
  
  // Timeout & retry
  TIMEOUT_MS: 10000,         // 10 second timeout
  MAX_RETRIES: 2,            // Max 2 retries
  RETRY_DELAYS_MS: [1000, 2000], // 1s, 2s exponential backoff
  
  // Fallback scores
  FALLBACK_SCORE: 50,        // Default score if AI fails
};

// ============================================================================
// FEED SOURCES
// ============================================================================

export const DEFAULT_FEED_SOURCES = [
  {
    url: 'https://www.insurancejournal.com/rss/news/national/',
    category: 'news',
    priority: 1,
  },
  {
    url: 'https://www.naic.org/rss/press_releases.xml',
    category: 'regulatory',
    priority: 2,
  },
  {
    url: 'https://www.sba.gov/rss/news.xml',
    category: 'regulatory',
    priority: 3,
  },
  {
    url: 'https://www.nhc.noaa.gov/rss_besttrack.xml',
    category: 'catastrophe',
    priority: 1,
  },
  {
    url: 'https://www.usgs.gov/faqs/rss.xml',
    category: 'catastrophe',
    priority: 2,
  },
  {
    url: 'https://www.reinsurancene.ws/feed/',
    category: 'reinsurance',
    priority: 2,
  },
  {
    url: 'https://www.insurtech.news/feed/',
    category: 'technology',
    priority: 3,
  },
];

// ============================================================================
// LOGGING
// ============================================================================

export const LOGGING_CONFIG = {
  // Log levels
  LEVELS: {
    DEBUG: 'DEBUG',
    INFO: 'INFO',
    WARN: 'WARN',
    ERROR: 'ERROR',
  },
  
  // Default log level
  DEFAULT_LEVEL: 'INFO',
  
  // Include batch IDs in logs
  INCLUDE_BATCH_ID: true,
  
  // Include latency metrics
  INCLUDE_LATENCY: true,
};

// ============================================================================
// FEATURE FLAGS
// ============================================================================

export const FEATURE_FLAGS = {
  // Enable/disable features
  ENABLE_SEMANTIC_SEARCH: true,
  ENABLE_HYBRID_RETRIEVAL: true,
  ENABLE_RATE_LIMITING: true,
  ENABLE_LINK_VALIDATION: true,
  ENABLE_STRUCTURED_LOGGING: true,
};



=================================================================================
FILE: src/firebase.ts
=================================================================================

import {initializeApp} from "firebase/app";
import {getFirestore} from "firebase/firestore";
import {getFunctions} from "firebase/functions";

export const app = initializeApp({
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
});
export const db = getFirestore(app);

// Initialize Firebase Functions - always connects to live production functions
// Region: us-central1 (where your functions are deployed)
export const functions = getFunctions(app, "us-central1");



=================================================================================
FILE: src/components/ArticleCard.tsx
=================================================================================

/**
 * Enhanced Article Card Component
 * Displays article with liquid glass styling, animations, and interactions
 * Features: Pull-quote, AI summary bullets, micro-animations, accessibility
 */

import { Bookmark, Share2, TrendingUp, AlertCircle, ChevronDown, Sparkles } from 'lucide-react';
import { useState, memo } from 'react';
import type { Article } from '../types';
import { Badge } from './primitives/Badge';
import { GlassCard } from './primitives/GlassCard';
import { Tooltip } from './primitives/Tooltip';
import { getTimeAgo } from '../utils/validation';

interface ArticleCardProps {
  article: Article;
  isSelected?: boolean;
  isLoading?: boolean;
  onClick?: () => void;
  onBookmark?: () => void;
  onShare?: () => void;
  ariaLabel?: string;
}

function ArticleCardComponent({
  article,
  isSelected = false,
  isLoading = false,
  onClick,
  onBookmark,
  onShare,
  ariaLabel,
}: ArticleCardProps) {
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [isSharing, setIsSharing] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);

  const score = article.smartScore || article.aiScore || 0;
  const scoreColor = score >= 75 ? 'text-green-600' : score >= 50 ? 'text-amber-600' : 'text-red-600';

  // RAG quality indicator
  const ragQualityScore = typeof (article as unknown as Record<string, unknown>).ragQualityScore === 'number'
    ? ((article as unknown as Record<string, unknown>).ragQualityScore as number)
    : 100;
  const hasQualityIssues = ragQualityScore < 70;

  const handleBookmark = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsBookmarked(!isBookmarked);
    onBookmark?.();
  };

  const handleShare = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsSharing(true);
    onShare?.();
    setTimeout(() => setIsSharing(false), 1000);
  };

  return (
    <GlassCard
      variant={isSelected ? 'premium' : 'default'}
      interactive
      onClick={onClick}
      className={`group cursor-pointer transition-all duration-300 hover:shadow-lg hover:shadow-[#5AA6FF]/20 hover:scale-102 ${
        isSelected ? 'ring-2 ring-[#5AA6FF]/70 shadow-xl shadow-[#5AA6FF]/25 scale-102' : 'hover:ring-1 hover:ring-[#5AA6FF]/40'
      } ${isLoading ? 'opacity-60 pointer-events-none' : ''} animate-fadeIn`}
      role="article"
      aria-label={ariaLabel || `Article: ${article.title}`}
      aria-selected={isSelected}
    >
      <div className="space-y-3.5">
        {/* Header with source and date */}
        <div className="flex items-start justify-between gap-3">
          <div className="flex-1 min-w-0">
            <p className="text-xs font-bold text-[#5AA6FF] uppercase tracking-widest truncate group-hover:text-[#3B82F6] transition-colors duration-200">
              {article.source}
            </p>
            <p className="text-xs text-[#94A3B8] mt-1 group-hover:text-[#64748B] transition-colors duration-200 font-medium">
              {article.publishedAt ? getTimeAgo(article.publishedAt) : 'Recently'}
            </p>
          </div>
          {score > 0 && (
            <Tooltip content={`Relevance Score: ${Math.round(score)}`}>
              <div className={`flex items-center gap-1.5 px-2.5 py-1.5 rounded-lg bg-[#E8F2FF] ${scoreColor} transition-all duration-200 group-hover:shadow-md group-hover:shadow-[#5AA6FF]/25 animate-scoreGlow font-bold text-xs`}>
                <TrendingUp size={14} className="group-hover:scale-125 transition-transform duration-200" />
                <span>{Math.round(score)}</span>
              </div>
            </Tooltip>
          )}
        </div>

        {/* Title - Enhanced Typography */}
        <h3 className="text-base font-bold text-[#0F172A] line-clamp-2 group-hover:text-[#5AA6FF] transition-colors duration-200 leading-tight">
          {article.title}
        </h3>

        {/* Pull Quote - Key verbatim excerpt */}
        {(article as any).leadQuote && (
          <div className="pl-3.5 border-l-2 border-[#5AA6FF]/50 py-2.5 bg-gradient-to-r from-[#F9FBFF]/80 to-[#F0F7FF]/40 rounded-r-lg hover:from-[#F0F7FF] hover:to-[#E8F2FF]/60 transition-all duration-200">
            <p className="text-xs italic text-[#475569] line-clamp-2 group-hover:text-[#0F172A] transition-colors duration-200 leading-relaxed">
              "{(article as any).leadQuote}"
            </p>
          </div>
        )}

        {/* AI Summary Bullets - Truncated with expand */}
        {article.bullets5 && article.bullets5.length > 0 && (
          <div className="space-y-2">
            <div className="flex items-center gap-1.5 text-xs font-bold text-[#5AA6FF] uppercase tracking-wide">
              <Sparkles size={13} className="animate-pulse" />
              <span>AI Summary</span>
            </div>
            <div className={`space-y-1.5 overflow-hidden transition-all duration-300 ${isExpanded ? 'max-h-96' : 'max-h-14'}`}>
              {article.bullets5.slice(0, isExpanded ? 5 : 1).map((bullet, idx) => (
                <div key={idx} className="flex gap-2.5 text-xs text-[#64748B] group-hover:text-[#475569] transition-colors duration-200 leading-relaxed">
                  <span className="text-[#5AA6FF] font-bold flex-shrink-0 mt-0.5">•</span>
                  <span className="line-clamp-2">{bullet}</span>
                </div>
              ))}
            </div>
            {article.bullets5.length > 1 && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setIsExpanded(!isExpanded);
                }}
                className="text-xs text-[#5AA6FF] hover:text-[#3B82F6] font-bold flex items-center gap-1 transition-all duration-200 hover:gap-1.5 uppercase tracking-wide"
                aria-label={isExpanded ? 'Collapse summary' : 'Expand summary'}
              >
                {isExpanded ? 'Show less' : `Show ${article.bullets5.length - 1} more`}
                <ChevronDown size={13} className={`transition-transform duration-300 ${isExpanded ? 'rotate-180' : ''}`} />
              </button>
            )}
          </div>
        )}

        {/* Tags with staggered animation */}
        {article.tags && (
          <div className="flex flex-wrap gap-1.5">
            {article.tags.perils && article.tags.perils.slice(0, 2).map((peril, idx) => (
              <Badge key={peril} variant="warning" size="sm" className="animate-slideInUp" style={{ animationDelay: `${idx * 50}ms` }}>
                {peril}
              </Badge>
            ))}
            {article.tags.lob && article.tags.lob.slice(0, 1).map((lob, idx) => (
              <Badge key={lob} variant="info" size="sm" className="animate-slideInUp" style={{ animationDelay: `${(idx + 2) * 50}ms` }}>
                {lob}
              </Badge>
            ))}
            {article.tags.regions && article.tags.regions.slice(0, 1).map((region, idx) => (
              <Badge key={region} variant="default" size="sm" className="animate-slideInUp" style={{ animationDelay: `${(idx + 3) * 50}ms` }}>
                {region}
              </Badge>
            ))}
          </div>
        )}

        {/* Quality indicator */}
        {hasQualityIssues && (
          <Tooltip content={`RAG Quality: ${ragQualityScore}/100`}>
            <div className="flex items-center gap-1 text-xs text-amber-600 group-hover:text-amber-700 transition-colors duration-200">
              <AlertCircle size={14} className="group-hover:animate-pulse" />
              <span>Quality: {ragQualityScore}/100</span>
            </div>
          </Tooltip>
        )}

        {/* Action buttons with enhanced hover effects */}
        <div className="flex items-center gap-2.5 pt-3 border-t border-[#C7D2E1]/25 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          {onBookmark && (
            <Tooltip content={isBookmarked ? 'Remove bookmark' : 'Bookmark article'}>
              <button
                onClick={handleBookmark}
                className={`p-2 rounded-lg transition-all duration-250 transform hover:scale-120 active:scale-95 ${
                  isBookmarked
                    ? 'bg-gradient-to-br from-[#5AA6FF] to-[#4A96EF] text-white shadow-md shadow-[#5AA6FF]/40 hover:shadow-lg'
                    : 'hover:bg-[#E8F2FF] text-[#64748B] hover:shadow-md hover:shadow-[#5AA6FF]/25 hover:text-[#5AA6FF]'
                }`}
                aria-label={isBookmarked ? 'Remove bookmark' : 'Bookmark article'}
                aria-pressed={isBookmarked}
              >
                <Bookmark size={17} fill={isBookmarked ? 'currentColor' : 'none'} />
              </button>
            </Tooltip>
          )}
          {onShare && (
            <Tooltip content="Share article">
              <button
                onClick={handleShare}
                disabled={isSharing}
                className={`p-2 rounded-lg transition-all duration-250 transform hover:scale-120 active:scale-95 ${
                  isSharing
                    ? 'bg-gradient-to-br from-green-400 to-green-500 text-white shadow-md shadow-green-500/40 hover:shadow-lg'
                    : 'hover:bg-[#E8F2FF] text-[#64748B] hover:shadow-md hover:shadow-[#5AA6FF]/25 hover:text-[#5AA6FF]'
                }`}
                aria-label="Share article"
              >
                <Share2 size={17} />
              </button>
            </Tooltip>
          )}
        </div>
      </div>
    </GlassCard>
  );
}

export const ArticleCard = memo(ArticleCardComponent, (prev, next) => {
  return (
    prev.article.id === next.article.id &&
    prev.isSelected === next.isSelected &&
    prev.isLoading === next.isLoading
  );
});


=================================================================================
FILE: src/components/Bookmarks.tsx
=================================================================================

import { useEffect, useState } from 'react';
import { collection, query, where, onSnapshot, deleteDoc, doc } from 'firebase/firestore';
import { db } from '../firebase';
import { Bookmark, Trash2, ExternalLink, Calendar } from 'lucide-react';

interface BookmarkedArticle {
  id: string;
  url: string;
  title: string;
  source: string;
  clusterId?: string;
  savedAt: Date;
}

interface BookmarksProps {
  onArticleSelect?: (article: any) => void;
}

export function Bookmarks({ onArticleSelect }: BookmarksProps) {
  const [bookmarks, setBookmarks] = useState<BookmarkedArticle[]>([]);
  const [loading, setLoading] = useState(true);
  const [deviceId, setDeviceId] = useState<string>('');

  // Initialize device ID from localStorage
  useEffect(() => {
    let id = localStorage.getItem('carriersignal_device_id');
    if (!id) {
      id = `device_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('carriersignal_device_id', id);
    }
    setDeviceId(id);
  }, []);

  // Listen to bookmarks from Firestore
  useEffect(() => {
    if (!deviceId) return;

    const q = query(
      collection(db, 'bookmarks'),
      where('deviceId', '==', deviceId)
    );

    const unsubscribe = onSnapshot(
      q,
      (snapshot) => {
        const items = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
          savedAt: doc.data().savedAt?.toDate?.() || new Date(),
        })) as BookmarkedArticle[];

        setBookmarks(items.sort((a, b) => b.savedAt.getTime() - a.savedAt.getTime()));
        setLoading(false);
      },
      (error) => {
        console.error('Error fetching bookmarks:', error);
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, [deviceId]);

  const handleRemoveBookmark = async (bookmarkId: string) => {
    try {
      await deleteDoc(doc(db, 'bookmarks', bookmarkId));
    } catch (error) {
      console.error('Error removing bookmark:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex-1 flex items-center justify-center p-6">
        <div className="text-center">
          <div className="w-12 h-12 rounded-full liquid-glass-premium flex items-center justify-center mx-auto mb-3 animate-pulse border border-[#5AA6FF]/30">
            <Bookmark size={24} className="text-[#5AA6FF]" />
          </div>
          <p className="text-[#64748B]">Loading bookmarks...</p>
        </div>
      </div>
    );
  }

  if (bookmarks.length === 0) {
    return (
      <div className="flex-1 flex items-center justify-center p-6">
        <div className="text-center">
          <div className="w-16 h-16 rounded-full liquid-glass-light flex items-center justify-center mx-auto mb-4 border border-[#C7D2E1]/30">
            <Bookmark size={32} className="text-[#D4DFE8]" />
          </div>
          <h3 className="text-lg font-semibold text-[#0F172A] mb-1">No bookmarks yet</h3>
          <p className="text-sm text-[#64748B]">Save articles to read them later</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 overflow-y-auto">
      <div className="p-4 space-y-2.5">
        {bookmarks.map(bookmark => (
          <div
            key={bookmark.id}
            className="p-4 rounded-lg border border-[#C7D2E1]/30 hover:border-[#5AA6FF]/50 hover:shadow-sm transition-all duration-250 liquid-glass-light micro-glow hover:bg-gradient-to-r hover:from-[#F9FBFF]/15 hover:to-[#E8F2FF]/08"
          >
            <div className="flex items-start justify-between gap-3">
              <div className="flex-1 min-w-0">
                <button
                  onClick={() => onArticleSelect?.({url: bookmark.url, title: bookmark.title})}
                  className="text-left hover:text-[#5AA6FF] transition-colors"
                >
                  <h3 className="font-semibold text-[#0F172A] line-clamp-2 hover:underline">
                    {bookmark.title}
                  </h3>
                </button>
                <p className="text-sm text-[#64748B] mt-1">{bookmark.source}</p>
                <div className="flex items-center gap-2 mt-2 text-xs text-[#94A3B8]">
                  <Calendar size={12} />
                  <span>{bookmark.savedAt.toLocaleDateString()}</span>
                </div>
              </div>

              <div className="flex items-center gap-1.5 flex-shrink-0">
                <a
                  href={bookmark.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="p-2 hover:liquid-glass-premium rounded-lg transition-all duration-250 border border-[#5AA6FF]/25 hover:border-[#5AA6FF]/50 hover:shadow-sm animate-iconGlow"
                  title="Open in new tab"
                >
                  <ExternalLink size={16} className="text-[#5AA6FF]" />
                </a>
                <button
                  onClick={() => handleRemoveBookmark(bookmark.id)}
                  className="p-2 hover:liquid-glass-premium rounded-lg transition-all duration-250 border border-[#EF4444]/25 hover:border-[#EF4444]/50 hover:shadow-sm"
                  title="Remove bookmark"
                >
                  <Trash2 size={16} className="text-[#EF4444]" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Bookmarks;


=================================================================================
FILE: src/components/BriefPanel.tsx
=================================================================================

import { AlertTriangle, Eye, X } from 'lucide-react';

interface Article {
  title: string;
  url: string;
  source: string;
  publishedAt?: string;
  bullets5?: string[];
  whyItMatters?: Record<string, string>;
  citations?: string[];
  impactScore?: number;
  impactBreakdown?: {
    market: number;
    regulatory: number;
    catastrophe: number;
    technology: number;
  };
  confidenceRationale?: string;
  leadQuote?: string;
  disclosure?: string;
  stormName?: string;
  regionsNormalized?: string[];
  companiesNormalized?: string[];
  tags?: {
    lob?: string[];
    perils?: string[];
    regulations?: string[];
  };
}

interface BriefPanelProps {
  article: Article | null;
  onReaderView?: (url: string) => void;
  onClose?: () => void;
}

export function BriefPanel({
  article,
  onReaderView,
  onClose,
}: BriefPanelProps) {
  if (!article) {
    return (
      <div className="flex flex-col w-full lg:w-1/2 bg-white border-l border-[#C7D2E1]/30 p-6 items-center justify-center text-[#5AA6FF]" role="complementary" aria-label="Article details panel">
        <p className="text-sm font-medium">Select an article to view details</p>
      </div>
    );
  }

  const publishDate = article.publishedAt ? new Date(article.publishedAt).toLocaleDateString() : 'Unknown';
  const timeAgo = article.publishedAt ? getTimeAgo(new Date(article.publishedAt)) : '';

  return (
    <div className="flex flex-col w-full max-w-full lg:w-1/2 liquid-glass-ultra lg:border-l border-[#C7D2E1]/25 lg:overflow-y-auto overflow-x-hidden animate-slideInRight" role="complementary" aria-label="Article details panel">
      {/* Header with Title and Metadata */}
      <div className="sticky top-0 liquid-glass-premium border-b border-[#C7D2E1]/25 p-4 sm:p-6 shadow-sm shadow-[#5AA6FF]/08 z-10 w-full max-w-full overflow-x-hidden">
        <div className="flex items-start justify-between gap-3 mb-3">
          <h2 className="text-lg sm:text-xl font-bold text-[#0F172A] leading-tight break-words flex-1">{article.title}</h2>
          <div className="flex gap-2 flex-shrink-0">
            {onReaderView && (
              <button
                onClick={() => onReaderView(article.url)}
                className="p-2 rounded-lg hover:bg-[#E8F2FF] hover:shadow-md hover:shadow-[#5AA6FF]/20 transition-all"
                aria-label="Open reader view"
                title="Reader view"
              >
                <Eye size={18} className="text-[#5AA6FF] hover:scale-110 transition-transform" />
              </button>
            )}
            {onClose && (
              <button
                onClick={onClose}
                className="p-2 rounded-lg hover:bg-[#E8F2FF] hover:shadow-md hover:shadow-[#5AA6FF]/20 transition-all"
                aria-label="Close modal"
                title="Close"
              >
                <X size={18} className="text-[#5AA6FF] hover:scale-110 transition-transform" />
              </button>
            )}
          </div>
        </div>
        <div className="flex items-center gap-2 sm:gap-3 text-xs sm:text-sm text-[#64748B] flex-wrap w-full max-w-full overflow-x-hidden">
          <span className="inline-flex items-center gap-1.5 px-2 sm:px-3 py-1 sm:py-1.5 rounded-full liquid-glass-light text-[#5AA6FF] font-semibold text-xs truncate border border-[#5AA6FF]/30">
            <svg className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="truncate">{article.source}</span>
          </span>
          <span className="text-[#94A3B8] flex-shrink-0">•</span>
          <span className="flex-shrink-0">{publishDate}</span>
          {timeAgo && (
            <>
              <span className="text-[#94A3B8] flex-shrink-0">•</span>
              <span className="flex-shrink-0">{timeAgo}</span>
            </>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-4 sm:p-6 space-y-5 lg:overflow-y-auto w-full max-w-full overflow-x-hidden">
        {/* Lead Quote with Enhanced Styling */}
        {article.leadQuote && (
          <div className="liquid-glass-premium rounded-2xl border-l-4 border-[#5AA6FF] p-5 shadow-sm hover:shadow-lg transition-all duration-300 border border-[#5AA6FF]/40">
            <div className="flex items-start gap-3">
              <svg className="w-6 h-6 text-[#5AA6FF] flex-shrink-0 mt-1 animate-iconGlow" fill="currentColor" viewBox="0 0 24 24">
                <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h3.983v10h-9.983z" />
              </svg>
              <p className="text-base italic text-[#0F172A] leading-relaxed font-medium">{article.leadQuote}</p>
            </div>
          </div>
        )}

        {/* Storm Name Badge */}
        {article.stormName && (
          <div className="liquid-glass-premium rounded-xl px-5 py-3 border border-[#F59E0B]/50 flex items-center gap-2 hover:shadow-lg transition-all duration-300 hover:scale-105 w-fit">
            <AlertTriangle size={16} className="text-[#F59E0B]" />
            <p className="text-sm font-bold text-[#F59E0B]">{article.stormName}</p>
          </div>
        )}


        {/* AI-Generated Summary - Enhanced */}
        {article.bullets5 && article.bullets5.length > 0 && (
          <section className="space-y-3.5 p-5 liquid-glass-premium rounded-2xl border border-[#5AA6FF]/40 shadow-sm hover:shadow-md transition-all duration-300" aria-labelledby="summary-heading">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-full bg-gradient-primary flex items-center justify-center shadow-md animate-iconGlow">
                <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              </div>
              <h3 id="summary-heading" className="font-bold text-[#0F172A] text-base">AI-Generated Summary</h3>
            </div>
            <ul className="space-y-2.5">
              {article.bullets5.map((bullet, idx) => (
                <li key={idx} className="flex gap-3 text-sm text-[#0F172A] leading-relaxed hover:text-[#0F172A] transition-colors duration-300 hover:translate-x-1">
                  <span className="font-bold text-[#5AA6FF] flex-shrink-0 mt-0.5" aria-hidden="true">→</span>
                  <span className="flex-1">{bullet}</span>
                </li>
              ))}
            </ul>
          </section>
        )}

        {/* Why It Matters - Professional Insights */}
        {article.whyItMatters && Object.keys(article.whyItMatters).length > 0 && (
          <div className="space-y-4 p-5 bg-gradient-to-br from-[#E8F2FF] to-[#E8F2FF] rounded-2xl border border-[#5AA6FF]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2">
              <svg className="w-6 h-6 text-[#5AA6FF]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
              <h3 className="font-bold text-[#0F172A] text-base">Why It Matters</h3>
            </div>
            <div className="space-y-3">
              {Object.entries(article.whyItMatters).map(([role, insight]) => (
                <div key={role} className="bg-white/60 rounded-xl p-3 hover:bg-white/80 transition-all duration-300">
                  <p className="text-xs font-bold text-[#5AA6FF] uppercase tracking-wider mb-1">{role}</p>
                  <p className="text-sm text-[#0F172A] leading-relaxed">{insight}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Confidence Rationale - Enhanced */}
        {article.confidenceRationale && (
          <div className="p-5 bg-gradient-to-br from-[#F9FBFF] to-[#E8F2FF] rounded-2xl border border-[#C7D2E1]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2 mb-3">
              <svg className="w-5 h-5 text-[#64748B]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-sm font-bold text-[#0F172A]">Confidence Rationale</p>
            </div>
            <p className="text-sm text-[#0F172A] leading-relaxed">{article.confidenceRationale}</p>
          </div>
        )}

        {/* Disclosure - Enhanced */}
        {article.disclosure && (
          <div className="p-5 bg-gradient-to-br from-[#FEF3C7] to-[#FEF3C7] rounded-2xl border border-[#F59E0B]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2 mb-3">
              <AlertTriangle size={18} className="text-[#F59E0B]" />
              <p className="text-sm font-bold text-[#F59E0B]">Disclosure</p>
            </div>
            <p className="text-sm text-[#F59E0B] leading-relaxed">{article.disclosure}</p>
          </div>
        )}

        {/* Tags - Enhanced Styling */}
        {article.tags && (
          <div className="space-y-4 p-5 bg-gradient-to-br from-[#E8F2FF] to-[#E8F2FF] rounded-2xl border border-[#5AA6FF]/30 shadow-sm hover:shadow-md transition-all duration-300">
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5 text-[#5AA6FF]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              <h3 className="font-bold text-[#0F172A] text-base">Tags</h3>
            </div>
            <div className="space-y-3">
              {article.tags.lob && article.tags.lob.length > 0 && (
                <div>
                  <p className="text-xs font-bold text-[#64748B] mb-2 uppercase tracking-wider">Lines of Business</p>
                  <div className="flex flex-wrap gap-2">
                    {article.tags.lob.map(tag => (
                      <span key={tag} className="tag-pill tag-lob hover:shadow-lg hover:scale-110 transition-all duration-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              {article.tags.perils && article.tags.perils.length > 0 && (
                <div>
                  <p className="text-xs font-bold text-[#64748B] mb-2 uppercase tracking-wider">Perils</p>
                  <div className="flex flex-wrap gap-2">
                    {article.tags.perils.map(tag => (
                      <span key={tag} className="tag-pill tag-peril hover:shadow-lg hover:scale-110 transition-all duration-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              {article.tags.regulations && article.tags.regulations.length > 0 && (
                <div>
                  <p className="text-xs font-bold text-[#64748B] mb-2 uppercase tracking-wider">Regulations</p>
                  <div className="flex flex-wrap gap-2">
                    {article.tags.regulations.map(tag => (
                      <span key={tag} className="tag-pill tag-regulation hover:shadow-lg hover:scale-110 transition-all duration-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}


      </div>
    </div>
  );
}

// Helper function for time ago
function getTimeAgo(date: Date): string {
  const now = new Date();
  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (seconds < 60) return 'just now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  if (seconds < 604800) return `${Math.floor(seconds / 86400)}d ago`;

  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
}



=================================================================================
FILE: src/components/CommandPalette.tsx
=================================================================================

import { useEffect, useState, useRef } from 'react';
import { Search, Loader, AlertCircle } from 'lucide-react';

interface Article {
  id?: string;
  title: string;
  url: string;
  source: string;
  bullets5?: string[];
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    companies?: string[];
    trends?: string[];
  };
}

interface CommandPaletteProps {
  isOpen: boolean;
  onClose: () => void;
  articles: Article[];
  onArticleSelect: (article: Article) => void;
}

export function CommandPalette({
  isOpen,
  onClose,
  articles,
  onArticleSelect,
}: CommandPaletteProps) {
  const [query, setQuery] = useState('');
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<Article[]>([]);
  const inputRef = useRef<HTMLInputElement>(null);

  // Focus input when palette opens
  useEffect(() => {
    if (isOpen) {
      setTimeout(() => inputRef.current?.focus(), 100);
    }
  }, [isOpen]);

  // Search articles
  useEffect(() => {
    if (!query.trim()) {
      setResults(articles.slice(0, 8));
      setSelectedIndex(0);
      return;
    }

    setIsLoading(true);
    const timer = setTimeout(() => {
      const queryLower = query.toLowerCase();
      const filtered = articles.filter(article =>
        article.title.toLowerCase().includes(queryLower) ||
        article.source.toLowerCase().includes(queryLower) ||
        article.bullets5?.some(b => b.toLowerCase().includes(queryLower)) ||
        article.tags?.companies?.some(c => c.toLowerCase().includes(queryLower)) ||
        article.tags?.trends?.some(t => t.toLowerCase().includes(queryLower))
      );
      setResults(filtered.slice(0, 8));
      setSelectedIndex(0);
      setIsLoading(false);
    }, 300);

    return () => clearTimeout(timer);
  }, [query, articles]);

  // Handle keyboard navigation
  const handleKeyDown = (e: React.KeyboardEvent) => {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setSelectedIndex(prev => (prev + 1) % results.length);
        break;
      case 'ArrowUp':
        e.preventDefault();
        setSelectedIndex(prev => (prev - 1 + results.length) % results.length);
        break;
      case 'Enter':
        e.preventDefault();
        if (results[selectedIndex]) {
          onArticleSelect(results[selectedIndex]);
          onClose();
        }
        break;
      case 'Escape':
        e.preventDefault();
        onClose();
        break;
      default:
        break;
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 bg-black/40 backdrop-blur-md flex items-start justify-center pt-20"
      onClick={onClose}
    >
      <div
        className="w-full max-w-2xl liquid-glass-ultra rounded-2xl shadow-xl shadow-[#5AA6FF]/15 overflow-hidden border border-[#C7D2E1]/30 animate-commandPaletteSlideIn"
        onClick={e => e.stopPropagation()}
      >
        {/* Search Input */}
        <div className="border-b border-[#C7D2E1]/25 p-5 liquid-glass-premium">
          <div className="flex items-center gap-3">
            <Search size={20} className="text-[#5AA6FF] animate-iconGlow" />
            <input
              ref={inputRef}
              type="text"
              placeholder="Search articles, companies, trends..."
              value={query}
              onChange={e => setQuery(e.target.value)}
              onKeyDown={handleKeyDown}
              className="flex-1 bg-transparent text-base outline-none text-[#0F172A] placeholder-[#94A3B8] font-medium"
            />
            {isLoading && <Loader size={20} className="text-[#5AA6FF] animate-spin" />}
          </div>
        </div>

        {/* Results */}
        <div className="max-h-96 overflow-y-auto">
          {results.length === 0 ? (
            <div className="p-8 text-center">
              <AlertCircle size={32} className="mx-auto text-[#D4DFE8] mb-2" />
              <p className="text-[#94A3B8]">No articles found</p>
            </div>
          ) : (
            <div className="divide-y divide-[#C7D2E1]/25">
              {results.map((article, idx) => (
                <button
                  key={article.id}
                  onClick={() => {
                    onArticleSelect(article);
                    onClose();
                  }}
                  className={`w-full text-left p-4 transition-all duration-200 ${
                    idx === selectedIndex
                      ? 'liquid-glass-premium border-l-4 border-[#5AA6FF] bg-gradient-to-r from-[#F9FBFF]/30 to-[#E8F2FF]/15'
                      : 'hover:bg-gradient-to-r hover:from-[#F9FBFF]/15 hover:to-[#E8F2FF]/08'
                  }`}
                >
                  <div className="flex items-start justify-between gap-3">
                    <div className="flex-1 min-w-0">
                      <h3 className="font-semibold text-[#0F172A] line-clamp-2">
                        {article.title}
                      </h3>
                      <p className="text-sm text-[#64748B] mt-1">{article.source}</p>
                      {article.bullets5?.[0] && (
                        <p className="text-sm text-[#2D3748] mt-2 line-clamp-1">
                          {article.bullets5[0]}
                        </p>
                      )}
                    </div>
                    {article.tags?.companies && article.tags.companies.length > 0 && (
                      <div className="flex gap-1 flex-wrap justify-end">
                        {article.tags.companies.slice(0, 2).map(company => (
                          <span
                            key={company}
                            className="text-xs liquid-glass-light text-[#0F172A] px-2 py-1 rounded border border-[#C7D2E1]/30"
                          >
                            {company}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="border-t border-[#C7D2E1]/20 liquid-glass-premium px-4 py-3 text-xs text-[#64748B] flex items-center justify-between">
          <div className="flex gap-4">
            <span>↑↓ Navigate</span>
            <span>⏎ Select</span>
            <span>ESC Close</span>
          </div>
          <span>{results.length} results</span>
        </div>
      </div>
    </div>
  );
}



=================================================================================
FILE: src/components/Dashboard.tsx
=================================================================================

import { TrendingUp, AlertTriangle, Zap, BarChart3, Globe, Shield, Cloud, FileText, Clock } from 'lucide-react';
import { useMemo } from 'react';

interface Article {
  title: string;
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    trends?: string[];
    regulations?: string[];
  };
  impactScore?: number;
  regulatory?: boolean;
  stormName?: string;
}

interface DashboardProps {
  articles: Article[];
}

export function Dashboard({ articles }: DashboardProps) {
  // Calculate statistics with useMemo
  const stats = useMemo(() => ({
    totalArticles: articles.length,
    highImpact: articles.filter(a => (a.impactScore || 0) > 75).length,
    regulatory: articles.filter(a => a.regulatory).length,
    catastrophes: articles.filter(a => a.stormName).length,
  }), [articles]);

  // Extract top trends with useMemo
  const topTrends = useMemo(() => {
    const trends = new Map<string, number>();
    articles.forEach(article => {
      article.tags?.trends?.forEach(trend => {
        trends.set(trend, (trends.get(trend) || 0) + 1);
      });
    });
    return Array.from(trends.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
  }, [articles]);

  // Extract top perils with useMemo
  const topPerils = useMemo(() => {
    const perils = new Map<string, number>();
    articles.forEach(article => {
      article.tags?.perils?.forEach(peril => {
        perils.set(peril, (perils.get(peril) || 0) + 1);
      });
    });
    return Array.from(perils.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
  }, [articles]);

  // Extract top LOBs with useMemo
  const topLobs = useMemo(() => {
    const lobs = new Map<string, number>();
    articles.forEach(article => {
      article.tags?.lob?.forEach(lob => {
        lobs.set(lob, (lobs.get(lob) || 0) + 1);
      });
    });
    return Array.from(lobs.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
  }, [articles]);

  // Extract top regions with useMemo
  const topRegions = useMemo(() => {
    const regions = new Map<string, number>();
    articles.forEach(article => {
      article.tags?.regions?.forEach(region => {
        regions.set(region, (regions.get(region) || 0) + 1);
      });
    });
    return Array.from(regions.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
  }, [articles]);

  // Extract catastrophes (storms) with useMemo
  const storms = useMemo(() => articles
    .filter(a => a.stormName)
    .map(a => a.stormName)
    .filter((s, i, arr) => arr.indexOf(s) === i)
    .slice(0, 5), [articles]);

  // Extract regulatory items (this week)
  const regulatoryItems = articles
    .filter(a => a.regulatory)
    .slice(0, 5);

  return (
    <div className="space-y-6 p-6">
      {/* Today's Signal - Key Metrics */}
      <div>
        <h2 className="text-2xl font-bold text-[#0F172A] mb-4 flex items-center gap-2">
          <Zap size={28} className="text-[#5AA6FF]" />
          Today's Signal
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3.5">
          <MetricCard
            icon={<BarChart3 size={24} />}
            label="Total Articles"
            value={stats.totalArticles}
            color="blue"
          />
          <MetricCard
            icon={<Zap size={24} />}
            label="High Impact"
            value={stats.highImpact}
            color="red"
          />
          <MetricCard
            icon={<AlertTriangle size={24} />}
            label="Regulatory"
            value={stats.regulatory}
            color="orange"
          />
          <MetricCard
            icon={<Shield size={24} />}
            label="Catastrophes"
            value={stats.catastrophes}
            color="blue"
          />
        </div>
      </div>

      {/* CAT Ticker & Regulatory Tracker */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
        {/* CAT Ticker */}
        <InsightCard title="Active Catastrophes" icon={<Cloud size={20} />} color="blue">
          {storms.length > 0 ? (
            <div className="space-y-2.5">
              {storms.map((storm, idx) => (
                <div key={idx} className="flex items-center justify-between p-3 bg-[#F9FBFF]/50 rounded-lg hover:bg-[#F9FBFF]/80 transition-all duration-300">
                  <div className="flex items-center gap-2">
                    <Cloud size={16} className="text-[#5AA6FF]" />
                    <span className="text-sm font-semibold text-[#0F172A]">{storm}</span>
                  </div>
                  <span className="px-2.5 py-1 rounded-full bg-gradient-to-r from-[#E8F2FF] to-[#E8F2FF] text-[#5AA6FF] text-xs font-bold">Active</span>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-[#64748B] italic">No active catastrophes tracked</p>
          )}
        </InsightCard>

        {/* Regulatory Tracker */}
        <InsightCard title="Regulatory Updates" icon={<FileText size={20} />} color="red">
          {regulatoryItems.length > 0 ? (
            <div className="space-y-3">
              {regulatoryItems.map((item, idx) => (
                <div key={idx} className="flex items-start justify-between p-3 bg-[#F9FBFF]/50 rounded-lg hover:bg-[#F9FBFF]/80 transition-all duration-300">
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-semibold text-[#0F172A] line-clamp-2">{item.title}</p>
                    <p className="text-xs text-[#64748B] mt-1">{item.tags?.regulations?.[0] || 'Regulatory'}</p>
                  </div>
                  <Clock size={14} className="text-[#EF4444] flex-shrink-0 ml-2" />
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-[#64748B] italic">No regulatory updates this week</p>
          )}
        </InsightCard>
      </div>

      {/* Insights Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Top Trends */}
        <InsightCard title="Top Trends" icon={<TrendingUp size={20} />} color="blue">
          <div className="space-y-3">
            {topTrends.map(([trend, count]) => (
              <div key={trend} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{trend}</span>
                <span className="px-2.5 py-1 rounded-full bg-gradient-to-r from-[#E8F2FF] to-[#E8F2FF] text-[#5AA6FF] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>

        {/* Top Perils */}
        <InsightCard title="Top Perils" icon={<AlertTriangle size={20} />} color="red">
          <div className="space-y-3">
            {topPerils.map(([peril, count]) => (
              <div key={peril} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{peril}</span>
                <span className="px-2.5 py-1 rounded-full bg-[#FEE2E2] text-[#EF4444] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>

        {/* Top States */}
        <InsightCard title="Top States" icon={<Globe size={20} />} color="green">
          <div className="space-y-3">
            {topRegions.map(([region, count]) => (
              <div key={region} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{region}</span>
                <span className="px-2.5 py-1 rounded-full bg-[#DCFCE7] text-[#16A34A] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>

        {/* Top LOBs */}
        <InsightCard title="Top Lines of Business" icon={<Shield size={20} />} color="blue">
          <div className="space-y-3">
            {topLobs.map(([lob, count]) => (
              <div key={lob} className="flex items-center justify-between">
                <span className="text-sm font-medium text-[#0F172A]">{lob}</span>
                <span className="px-2.5 py-1 rounded-full bg-[#E8F2FF] text-[#5AA6FF] text-xs font-bold">{count}</span>
              </div>
            ))}
          </div>
        </InsightCard>
      </div>
    </div>
  );
}

export default Dashboard;

interface MetricCardProps {
  icon: React.ReactNode;
  label: string;
  value: number;
  color: 'blue' | 'red' | 'orange';
}

function MetricCard({ icon, label, value, color }: MetricCardProps) {
  const colorClasses = {
    blue: 'from-[#E8F2FF]/60 to-[#E8F2FF]/40 border-[#5AA6FF]/50 text-[#5AA6FF]',
    red: 'from-[#FEE2E2]/60 to-[#FEE2E2]/40 border-[#EF4444]/50 text-[#EF4444]',
    orange: 'from-[#FEF3C7]/60 to-[#FEF3C7]/40 border-[#F59E0B]/50 text-[#F59E0B]',
  };

  return (
    <div className={`liquid-glass-premium rounded-xl border p-5 bg-gradient-to-br ${colorClasses[color]} hover:shadow-md transition-all duration-250 animate-enhancedPremiumGlow elevated-glow`}>
      <div className="flex items-start justify-between mb-3">
        <div className={`p-2.5 rounded-lg liquid-glass-light ${colorClasses[color].split(' ')[2]} animate-iconGlow shadow-sm border border-white/50`}>
          {icon}
        </div>
      </div>
      <p className="text-xs font-semibold text-[#64748B] mb-1.5">{label}</p>
      <p className="text-3xl font-bold bg-gradient-to-r from-[#0F172A] via-[#5AA6FF] to-[#0F172A] bg-clip-text text-transparent">{value}</p>
    </div>
  );
}

interface InsightCardProps {
  title: string;
  icon: React.ReactNode;
  color: 'blue' | 'red' | 'green';
  children: React.ReactNode;
}

function InsightCard({ title, icon, color, children }: InsightCardProps) {
  const colorClasses = {
    blue: 'from-[#E8F2FF]/60 to-[#E8F2FF]/40 border-[#5AA6FF]/50 text-[#5AA6FF]',
    red: 'from-[#FEE2E2]/60 to-[#FEE2E2]/40 border-[#EF4444]/50 text-[#EF4444]',
    green: 'from-[#DCFCE7]/60 to-[#DCFCE7]/40 border-[#16A34A]/50 text-[#16A34A]',
  };

  return (
    <div className={`liquid-glass-premium rounded-xl border p-6 bg-gradient-to-br ${colorClasses[color]} hover:shadow-lg transition-all duration-300 animate-enhancedPremiumGlow elevated-glow`}>
      <div className="flex items-center gap-3 mb-6">
        <div className="p-2 rounded-lg liquid-glass-light animate-iconGlow shadow-md border border-white/60">
          {icon}
        </div>
        <h3 className="text-lg font-bold text-[#0F172A]">{title}</h3>
      </div>
      {children}
    </div>
  );
}



=================================================================================
FILE: src/components/FeedHealthPanel.tsx
=================================================================================

/**
 * Feed Health Admin Panel
 * Monitors RSS feed health, circuit breaker status, and processing metrics
 */

import { useState, useEffect } from 'react';
import { AlertTriangle, CheckCircle, Clock, RefreshCw } from 'lucide-react';
import { GlassCard } from './primitives/GlassCard';
import { Spinner } from './primitives/Spinner';

interface FeedHealthData {
  url: string;
  successCount: number;
  failureCount: number;
  successRate: string;
  lastSuccess?: string;
  lastFailure?: string;
  lastError?: string;
  status: 'HEALTHY' | 'UNHEALTHY' | 'UNKNOWN';
}

interface FeedHealthResponse {
  success: boolean;
  timestamp: string;
  totalFeeds: number;
  monitoredFeeds: number;
  feeds: FeedHealthData[];
}

export function FeedHealthPanel() {
  const [data, setData] = useState<FeedHealthResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);

  const fetchFeedHealth = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/feedHealthReport');
      if (!response.ok) throw new Error('Failed to fetch feed health');
      const result = await response.json();
      setData(result);
      setLastRefresh(new Date());
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchFeedHealth();
    const interval = setInterval(fetchFeedHealth, 60000); // Refresh every minute
    return () => clearInterval(interval);
  }, []);

  if (loading && !data) {
    return (
      <GlassCard variant="premium" className="w-full">
        <div className="flex items-center justify-center py-12">
          <Spinner />
        </div>
      </GlassCard>
    );
  }

  if (error) {
    return (
      <GlassCard variant="premium" className="w-full border-red-200">
        <div className="flex items-center gap-3 text-red-600">
          <AlertTriangle size={20} />
          <p className="text-sm font-medium">{error}</p>
        </div>
      </GlassCard>
    );
  }

  if (!data) return null;

  const healthyCount = data.feeds.filter(f => f.status === 'HEALTHY').length;
  const unhealthyCount = data.feeds.filter(f => f.status === 'UNHEALTHY').length;

  return (
    <div className="space-y-4">
      <GlassCard variant="premium" className="w-full">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-[#0F172A]">Feed Health Monitor</h3>
          <button
            onClick={fetchFeedHealth}
            disabled={loading}
            className="p-2 rounded-lg hover:bg-[#E8F2FF] transition-colors disabled:opacity-50"
            aria-label="Refresh feed health"
          >
            <RefreshCw size={18} className={`text-[#5AA6FF] ${loading ? 'animate-spin' : ''}`} />
          </button>
        </div>

        {/* Summary Stats */}
        <div className="grid grid-cols-3 gap-4 mb-6">
          <div className="p-3 bg-[#E8F2FF]/50 rounded-lg">
            <p className="text-xs text-[#64748B] mb-1">Total Feeds</p>
            <p className="text-2xl font-bold text-[#5AA6FF]">{data.totalFeeds}</p>
          </div>
          <div className="p-3 bg-[#DCFCE7]/50 rounded-lg">
            <p className="text-xs text-[#64748B] mb-1">Healthy</p>
            <p className="text-2xl font-bold text-[#16A34A]">{healthyCount}</p>
          </div>
          <div className="p-3 bg-[#FEE2E2]/50 rounded-lg">
            <p className="text-xs text-[#64748B] mb-1">Unhealthy</p>
            <p className="text-2xl font-bold text-[#EF4444]">{unhealthyCount}</p>
          </div>
        </div>

        {/* Last Refresh */}
        {lastRefresh && (
          <p className="text-xs text-[#94A3B8] mb-4">
            Last updated: {lastRefresh.toLocaleTimeString()}
          </p>
        )}
      </GlassCard>

      {/* Feed List */}
      <div className="space-y-2">
        {data.feeds.map((feed) => (
          <FeedHealthRow key={feed.url} feed={feed} />
        ))}
      </div>
    </div>
  );
}

function FeedHealthRow({ feed }: { feed: FeedHealthData }) {
  const isHealthy = feed.status === 'HEALTHY';
  const statusIcon = isHealthy ? (
    <CheckCircle size={16} className="text-[#16A34A]" />
  ) : (
    <AlertTriangle size={16} className="text-[#EF4444]" />
  );

  return (
    <GlassCard variant="default" className="p-4">
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-2 mb-2">
            {statusIcon}
            <p className="text-sm font-semibold text-[#0F172A] truncate">{feed.url}</p>
          </div>
          <div className="grid grid-cols-2 gap-2 text-xs text-[#64748B]">
            <p>Success: {feed.successCount}</p>
            <p>Failure: {feed.failureCount}</p>
            <p>Rate: {feed.successRate}</p>
            {feed.lastSuccess && (
              <p className="flex items-center gap-1">
                <Clock size={12} />
                {new Date(feed.lastSuccess).toLocaleTimeString()}
              </p>
            )}
          </div>
          {feed.lastError && (
            <p className="text-xs text-[#EF4444] mt-2 truncate">Error: {feed.lastError}</p>
          )}
        </div>
        <div className={`px-3 py-1 rounded-full text-xs font-semibold whitespace-nowrap ${
          isHealthy
            ? 'bg-[#DCFCE7] text-[#16A34A]'
            : 'bg-[#FEE2E2] text-[#EF4444]'
        }`}>
          {feed.status}
        </div>
      </div>
    </GlassCard>
  );
}



=================================================================================
FILE: src/components/Header.tsx
=================================================================================

import { Shield, Sparkles } from 'lucide-react';

interface HeaderProps {
  isLoading: boolean;
}

export function Header({
  isLoading,
}: HeaderProps) {
  return (
    <header
      className="w-full liquid-glass-ultra border-b border-[#C7D2E1]/25 transition-all duration-300 backdrop-blur-lg"
      style={{ paddingTop: 'env(safe-area-inset-top)' }}
    >
      <div className="mx-auto w-full max-w-full px-4 sm:px-6 lg:px-8 relative z-10 overflow-x-hidden">
        <div className="flex items-center justify-between h-16 sm:h-20 gap-4 touch-manipulation relative w-full max-w-full overflow-x-hidden">
          {/* Left: Empty space for balance */}
          <div className="flex-1 hidden sm:block" />

          {/* Center: Logo & Branding - Centered */}
          <div className="flex items-center justify-center gap-2.5 sm:gap-3 group flex-shrink-0">
            {/* Shield Icon with Blue Background - Enhanced Glow */}
            <div className="relative w-10 h-10 sm:w-12 sm:h-12 rounded-xl bg-gradient-to-br from-[#5AA6FF] via-[#6BB3FF] to-[#4A96EF] flex items-center justify-center shadow-lg group-hover:shadow-xl group-hover:scale-110 transition-all duration-300 hover:shadow-[0_0_24px_rgba(90,166,255,0.5)] animate-iconGlow">
              {/* Glow backdrop - subtle Aurora glow */}
              <div className="absolute inset-0 rounded-xl bg-[#5AA6FF] opacity-0 group-hover:opacity-40 blur-lg transition-opacity duration-300"></div>
              {/* Inner shine effect */}
              <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <Shield size={20} className="text-white sm:w-6 sm:h-6 relative z-10 group-hover:scale-110 transition-transform duration-300" />
            </div>

            {/* Title & Tagline */}
            <div className="flex flex-col justify-center items-start">
              <div className="flex items-center gap-1.5">
                <h1
                  className="font-bold tracking-tight transition-all duration-300 group-hover:scale-102 whitespace-nowrap"
                  style={{
                    fontSize: 'clamp(1.1rem, 4vw, 1.5rem)',
                    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", sans-serif',
                    fontWeight: 800,
                    letterSpacing: '-0.02em',
                    lineHeight: '1.1',
                    background: 'linear-gradient(135deg, #5AA6FF 0%, #6BB3FF 40%, #4A96EF 100%)',
                    WebkitBackgroundClip: 'text',
                    WebkitTextFillColor: 'transparent',
                    backgroundClip: 'text',
                  }}
                >
                  CarrierSignal
                </h1>
                <Sparkles size={16} className="text-[#5AA6FF] opacity-70 group-hover:opacity-100 transition-opacity duration-300 animate-pulse" />
              </div>
              <p className="text-xs font-medium text-[#5AA6FF]/70 group-hover:text-[#5AA6FF] transition-colors duration-300 tracking-wide">
                AI-Curated Insurance News
              </p>
            </div>
          </div>

          {/* Right: Status Indicators */}
          <div className="flex items-center gap-2 flex-shrink-0 flex-1 justify-end">
            {isLoading && (
              <div className="flex items-center gap-2 px-3 py-1.5 liquid-glass rounded-full border border-[#5AA6FF]/30 shadow-sm hover:shadow-md transition-all duration-300">
                <div className="relative w-2 h-2">
                  <div className="absolute inset-0 bg-gradient-to-r from-[#5AA6FF] to-[#8B7CFF] rounded-full animate-pulse"></div>
                  <div className="absolute inset-0 bg-gradient-to-r from-[#5AA6FF] to-[#8B7CFF] rounded-full animate-pulseGlow opacity-40"></div>
                </div>
                <span className="text-xs font-semibold text-[#5AA6FF] hidden sm:inline">Analyzing…</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
}



=================================================================================
FILE: src/components/InfiniteScrollLoader.tsx
=================================================================================

/**
 * Infinite Scroll Loading Component
 * 
 * Displays loading states for infinite scroll:
 * - Loading skeleton cards
 * - End of list indicator
 * - Error states
 * - Empty states
 */

import { AlertCircle, CheckCircle2 } from 'lucide-react';

interface InfiniteScrollLoaderProps {
  isLoading?: boolean;
  hasMore?: boolean;
  error?: string | null;
  isEmpty?: boolean;
  itemCount?: number;
}

export function InfiniteScrollLoader({
  isLoading = false,
  hasMore = true,
  error = null,
  isEmpty = false,
  itemCount = 3,
}: InfiniteScrollLoaderProps) {
  // Error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center py-12 px-4">
        <div className="rounded-full liquid-glass-light p-3 mb-4 border border-[#EF4444]/40 animate-iconGlow">
          <AlertCircle className="w-6 h-6 text-[#EF4444]" />
        </div>
        <p className="text-sm font-semibold text-[#0F172A] mb-1">Failed to load articles</p>
        <p className="text-xs text-[#64748B] text-center">{error}</p>
      </div>
    );
  }

  // Empty state
  if (isEmpty) {
    return (
      <div className="flex flex-col items-center justify-center py-12 px-4">
        <div className="rounded-full liquid-glass-premium p-3 mb-4 border border-[#5AA6FF]/40 animate-iconGlow">
          <CheckCircle2 className="w-6 h-6 text-[#5AA6FF]" />
        </div>
        <p className="text-sm font-semibold text-[#0F172A]">No articles found</p>
        <p className="text-xs text-[#64748B] mt-1">Try adjusting your filters</p>
      </div>
    );
  }

  // End of list
  if (!hasMore && !isLoading) {
    return (
      <div className="flex flex-col items-center justify-center py-12 px-4">
        <div className="rounded-full liquid-glass-light p-3 mb-4 border border-[#5AA6FF]/40 animate-iconGlow">
          <CheckCircle2 className="w-6 h-6 text-[#5AA6FF]" />
        </div>
        <p className="text-sm font-semibold text-[#0F172A]">You've reached the end</p>
        <p className="text-xs text-[#64748B] mt-1">No more articles to load</p>
      </div>
    );
  }

  // Loading state - show skeleton cards
  if (isLoading) {
    return (
      <div className="space-y-3 w-full max-w-full px-4 pb-20">
        {Array.from({ length: itemCount }).map((_, idx) => (
          <SkeletonCard key={idx} delay={idx * 50} />
        ))}
      </div>
    );
  }

  return null;
}

/**
 * Skeleton card for loading state
 */
function SkeletonCard({ delay = 0 }: { delay?: number }) {
  return (
    <div
      style={{ animationDelay: `${delay}ms` }}
      className="w-full max-w-full rounded-xl border-2 border-[#C7D2E1]/40 overflow-hidden animate-slideInWithBounce liquid-glass"
    >
      {/* Gradient Accent Top - Aurora Colors */}
      <div className="h-2 w-full bg-gradient-primary opacity-85"></div>

      {/* Content Section */}
      <div className="p-4 space-y-3 flex-1 flex flex-col bg-gradient-to-br from-white via-[#F9FBFF]/25 to-[#E8F2FF]/15 w-full max-w-full overflow-x-hidden">
        {/* Header */}
        <div className="flex items-start justify-between gap-3 w-full max-w-full overflow-x-hidden">
          <div className="flex-1 min-w-0 overflow-hidden">
            <div className="h-4 bg-[#D4DFE8] rounded-full w-24 animate-shimmer"></div>
          </div>
          <div className="h-4 bg-[#D4DFE8] rounded-full w-16 animate-shimmer flex-shrink-0"></div>
        </div>

        {/* Title */}
        <div className="space-y-2">
          <div className="h-5 bg-[#D4DFE8] rounded-lg w-full animate-shimmer"></div>
          <div className="h-5 bg-[#D4DFE8] rounded-lg w-5/6 animate-shimmer"></div>
        </div>

        {/* Summary Lines */}
        <div className="space-y-2 py-3 border-t border-[#C7D2E1]/30 pt-3">
          <div className="h-4 bg-[#E8F2FF] rounded-lg w-full animate-shimmer"></div>
          <div className="h-4 bg-[#E8F2FF] rounded-lg w-5/6 animate-shimmer"></div>
          <div className="h-4 bg-[#E8F2FF] rounded-lg w-4/5 animate-shimmer"></div>
        </div>

        {/* Buttons */}
        <div className="flex gap-2 pt-4 mt-auto border-t border-[#C7D2E1]/30 pt-3">
          <div className="flex-1 h-10 bg-[#E8F2FF] rounded-lg animate-shimmer"></div>
          <div className="flex-1 h-10 bg-[#E8F2FF] rounded-lg animate-shimmer"></div>
        </div>
      </div>
    </div>
  );
}

/**
 * Loading indicator for scroll sentinel
 */
export function ScrollSentinelLoader() {
  return (
    <div className="flex items-center justify-center py-8 px-4">
      <div className="flex items-center gap-2">
        <div className="w-2 h-2 rounded-full bg-[#5AA6FF] animate-pulse"></div>
        <div className="w-2 h-2 rounded-full bg-[#8B7CFF] animate-pulse" style={{ animationDelay: '0.2s' }}></div>
        <div className="w-2 h-2 rounded-full bg-[#B08CFF] animate-pulse" style={{ animationDelay: '0.4s' }}></div>
      </div>
      <span className="ml-3 text-xs font-medium text-[#64748B]">Loading more...</span>
    </div>
  );
}



=================================================================================
FILE: src/components/MobileNav.tsx
=================================================================================

import { useState, useEffect } from 'react';
import { Search, BarChart3, Bookmark, Settings, X } from 'lucide-react';

interface MobileNavProps {
  onViewChange?: (view: 'feed' | 'dashboard' | 'bookmarks' | 'settings' | 'test') => void;
  currentView?: 'feed' | 'dashboard' | 'bookmarks' | 'settings' | 'test';
}

export function MobileNav({ onViewChange, currentView = 'feed' }: MobileNavProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [touchStart, setTouchStart] = useState(0);
  const [touchEnd, setTouchEnd] = useState(0);

  // Handle swipe gestures
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientY);
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    setTouchEnd(e.changedTouches[0].clientY);
    handleSwipe();
  };

  const handleSwipe = () => {
    if (!touchStart || !touchEnd) return;
    const distance = touchStart - touchEnd;
    const isUpSwipe = distance > 50;
    const isDownSwipe = distance < -50;

    if (isUpSwipe && !isOpen) {
      setIsOpen(true);
    } else if (isDownSwipe && isOpen) {
      setIsOpen(false);
    }
  };

  // Close on escape key
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') setIsOpen(false);
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  const handleNavClick = (view: 'feed' | 'dashboard' | 'bookmarks' | 'settings' | 'test') => {
    onViewChange?.(view);
    setIsOpen(false);
  };

  return (
    <>
      {/* Bottom Sheet Trigger - Visible on Mobile */}
      <div className="md:hidden fixed bottom-0 left-0 right-0 z-40 pointer-events-none">
        {/* Swipe Indicator - Hidden */}
        <div
          className="h-0 pointer-events-auto cursor-grab active:cursor-grabbing"
          onTouchStart={handleTouchStart}
          onTouchEnd={handleTouchEnd}
        />

        {/* Bottom Sheet */}
        <div
          className={`pointer-events-auto transition-all duration-400 ease-out ${
            isOpen ? 'translate-y-0 opacity-100' : 'translate-y-full opacity-0'
          }`}
        >
          <div className="liquid-glass-ultra border-t border-[#C7D2E1]/35 rounded-t-3xl shadow-2xl shadow-[#5AA6FF]/25 animate-enhancedPremiumGlow">
            {/* Handle Bar - Aurora Gradient */}
            <div className="flex justify-center pt-5 pb-4">
              <div className="w-12 h-1.5 bg-gradient-to-r from-[#5AA6FF] via-[#8B7CFF] to-[#B08CFF] rounded-full opacity-90 transition-all duration-300 hover:opacity-100" />
            </div>

            {/* Navigation Items */}
            <div className="px-5 pb-8 space-y-2.5">
              {/* Feed Button */}
              <button
                onClick={() => handleNavClick('feed')}
                className={`w-full flex items-center gap-3.5 px-5 py-3.5 rounded-xl font-bold transition-all duration-300 transform ${
                  currentView === 'feed'
                    ? 'liquid-glass-premium text-[#5AA6FF] shadow-lg shadow-[#5AA6FF]/30 border border-[#5AA6FF]/40 scale-105'
                    : 'liquid-glass text-[#0F172A] hover:border-[#C7D2E1]/50 hover:shadow-md hover:scale-102 active:scale-98'
                }`}
              >
                <Search size={21} className="flex-shrink-0" />
                <span className="text-base">News Feed</span>
              </button>

              {/* Dashboard Button */}
              <button
                onClick={() => handleNavClick('dashboard')}
                className={`w-full flex items-center gap-3.5 px-5 py-3.5 rounded-xl font-bold transition-all duration-300 transform ${
                  currentView === 'dashboard'
                    ? 'liquid-glass-premium text-[#8B7CFF] shadow-lg shadow-[#8B7CFF]/30 border border-[#8B7CFF]/40 scale-105'
                    : 'liquid-glass text-[#0F172A] hover:border-[#C7D2E1]/50 hover:shadow-md hover:scale-102 active:scale-98'
                }`}
              >
                <BarChart3 size={21} className="flex-shrink-0" />
                <span className="text-base">Dashboard</span>
              </button>

              {/* Bookmarks Button */}
              <button
                onClick={() => handleNavClick('bookmarks')}
                className={`w-full flex items-center gap-3.5 px-5 py-3.5 rounded-xl font-bold transition-all duration-300 transform ${
                  currentView === 'bookmarks'
                    ? 'liquid-glass-premium text-[#B08CFF] shadow-lg shadow-[#B08CFF]/30 border border-[#B08CFF]/40 scale-105'
                    : 'liquid-glass text-[#0F172A] hover:border-[#C7D2E1]/50 hover:shadow-md hover:scale-102 active:scale-98'
                }`}
              >
                <Bookmark size={21} className="flex-shrink-0" />
                <span className="text-base">Bookmarks</span>
              </button>

              {/* Settings Button */}
              <button
                onClick={() => handleNavClick('settings')}
                className={`w-full flex items-center gap-3.5 px-5 py-3.5 rounded-xl font-bold transition-all duration-300 transform ${
                  currentView === 'settings'
                    ? 'liquid-glass-premium text-[#5AA6FF] shadow-lg shadow-[#5AA6FF]/30 border border-[#5AA6FF]/40 scale-105'
                    : 'liquid-glass text-[#0F172A] hover:border-[#C7D2E1]/50 hover:shadow-md hover:scale-102 active:scale-98'
                }`}
              >
                <Settings size={21} className="flex-shrink-0" />
                <span className="text-base">Settings</span>
              </button>

              {/* Close Button */}
              <button
                onClick={() => setIsOpen(false)}
                className="w-full flex items-center justify-center gap-2.5 px-5 py-3.5 rounded-xl font-bold liquid-glass text-[#0F172A] hover:border-[#C7D2E1]/50 hover:shadow-md transition-all duration-300 mt-3 border border-[#C7D2E1]/35 transform hover:scale-102 active:scale-98"
              >
                <X size={21} />
                <span className="text-base">Close</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Overlay */}
      {isOpen && (
        <div
          className="md:hidden fixed inset-0 z-30 bg-black/30 backdrop-blur-md pointer-events-auto transition-all duration-300 animate-fadeIn"
          onClick={() => setIsOpen(false)}
        />
      )}
    </>
  );
}



=================================================================================
FILE: src/components/SearchFirst.tsx
=================================================================================

/**
 * Search-First UI Component for CarrierSignal v2
 * 
 * Innovative search interface with:
 * - Fuzzy search with typo tolerance
 * - Semantic understanding (synonyms)
 * - Real-time suggestions
 * - Visual match indicators
 * - Mobile-optimized
 */

import { useState, useEffect, useRef } from 'react';
import { Zap, Clock, ExternalLink } from 'lucide-react';
import { InfiniteScrollLoader, ScrollSentinelLoader } from './InfiniteScrollLoader';
import { calculateDynamicArticleScore } from '../utils/scoring';

interface Article {
  title: string;
  url: string;
  source: string;
  publishedAt?: string;
  description?: string;
  image?: string;
  bullets5?: string[];
  tags?: {
    lob?: string[];
    perils?: string[];
    regions?: string[];
    companies?: string[];
    trends?: string[];
    regulations?: string[];
  };
  smartScore?: number;
  aiScore?: number;
  impactScore?: number;
  regulatory?: boolean;
  stormName?: string;
}

interface SearchFirstProps {
  articles: Article[];
  onArticleSelect: (article: Article) => void;
  selectedArticle?: Article | null;
  sortMode?: 'smart' | 'recency';
  onSortChange?: (sort: 'smart' | 'recency') => void;
  isLoadingMore?: boolean;
  hasMore?: boolean;
  sentinelRef?: React.RefObject<HTMLDivElement | null>;
  onScroll?: (e: Event) => void;
}

export function SearchFirst({
  articles,
  onArticleSelect,
  selectedArticle,
  sortMode = 'smart',
  onSortChange,
  isLoadingMore = false,
  hasMore = true,
  onScroll,
}: SearchFirstProps) {
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [localSortBy, setLocalSortBy] = useState<'smart' | 'recency'>(sortMode || 'smart');
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  // Display articles with dynamic scoring and sorting
  useEffect(() => {
    // Map to results format with dynamic score calculation
    let results = articles.map(article => {
      // Calculate dynamic score in real-time to account for article age
      const dynamicScore = calculateDynamicArticleScore(article);
      return {
        article,
        score: dynamicScore,
        matchType: 'combined',
        highlights: [],
      };
    });

    // Sort based on localSortBy
    // Smart sort: Uses dynamic scoring that accounts for recency decay
    // Recency sort: Uses published date
    if (localSortBy === 'smart') {
      results.sort((a, b) => b.score - a.score);
    } else if (localSortBy === 'recency') {
      results.sort((a, b) => {
        const getTime = (date: any) => {
          if (!date) return 0;
          if (date instanceof Date) return date.getTime();
          if (typeof date === 'object' && 'toDate' in date) return date.toDate().getTime();
          return new Date(date).getTime();
        };
        const dateA = getTime((a.article as any).publishedAt);
        const dateB = getTime((b.article as any).publishedAt);
        return dateB - dateA;
      });
    }

    setSearchResults(results);
  }, [articles, localSortBy]);

  // Attach scroll listener to the scrollable container with passive option for better performance
  useEffect(() => {
    const container = scrollContainerRef.current;
    if (!container || !onScroll) return;

    // Use passive listener for better scroll performance
    container.addEventListener('scroll', onScroll, { passive: true });
    return () => container.removeEventListener('scroll', onScroll, { passive: true } as any);
  }, [onScroll]);





  return (
    <div className="w-full max-w-full overflow-x-hidden space-y-0 flex flex-col h-full">
      {/* Results - Scrollable */}
      <div ref={scrollContainerRef} className="flex-1 w-full max-w-full overflow-y-auto overflow-x-hidden">
        {/* Sort Controls Header - Mobile Optimized - Scrolls with content */}
        <div className="liquid-glass-premium border-b border-[#C7D2E1]/30 shadow-md p-4 sm:p-5 flex-shrink-0 w-full max-w-full overflow-x-hidden sticky top-0 z-40 backdrop-blur-xl">
          <div className="flex items-center gap-3 sm:gap-4 w-full max-w-full overflow-x-hidden">
            {/* Sort Buttons - Two Options Only */}
            <div className="flex items-center gap-1.5 sm:gap-2 liquid-glass-light rounded-xl p-1.5 border border-[#C7D2E1]/35 flex-shrink-0 shadow-sm">
              <button
                onClick={() => {
                  console.log('[SearchFirst] Changing sort to smart');
                  setLocalSortBy('smart');
                  onSortChange?.('smart');
                }}
                className={`flex items-center gap-1.5 sm:gap-2 px-3 sm:px-4 py-2 rounded-lg text-xs font-bold transition-all duration-300 whitespace-nowrap flex-shrink-0 transform hover:scale-105 active:scale-95 ${
                  localSortBy === 'smart'
                    ? 'liquid-glass-premium text-[#5AA6FF] shadow-lg shadow-[#5AA6FF]/25 border border-[#5AA6FF]/40'
                    : 'text-[#5AA6FF] hover:text-[#8B7CFF] hover:bg-[#F9FBFF]/60 hover:shadow-md'
                }`}
              >
                <Zap size={14} className="hidden sm:inline flex-shrink-0" />
                <Zap size={13} className="sm:hidden flex-shrink-0" />
                <span className="hidden sm:inline">AI Sort</span>
                <span className="sm:hidden">AI</span>
              </button>
              <button
                onClick={() => {
                  console.log('[SearchFirst] Changing sort to recency');
                  setLocalSortBy('recency');
                  onSortChange?.('recency');
                }}
                className={`flex items-center gap-1.5 sm:gap-2 px-3 sm:px-4 py-2 rounded-lg text-xs font-bold transition-all duration-300 whitespace-nowrap flex-shrink-0 transform hover:scale-105 active:scale-95 ${
                  localSortBy === 'recency'
                    ? 'liquid-glass-premium text-[#8B7CFF] shadow-lg shadow-[#8B7CFF]/25 border border-[#8B7CFF]/40'
                    : 'text-[#8B7CFF] hover:text-[#5AA6FF] hover:bg-[#F9FBFF]/60 hover:shadow-md'
                }`}
              >
                <Clock size={14} className="hidden sm:inline flex-shrink-0" />
                <Clock size={13} className="sm:hidden flex-shrink-0" />
                <span className="hidden sm:inline">Recent</span>
                <span className="sm:hidden">New</span>
              </button>
            </div>

            {/* Results Count - Right Aligned */}
            <div className="ml-auto text-xs text-[#5AA6FF] font-bold whitespace-nowrap flex-shrink-0 tracking-wide">
              <span className="hidden sm:inline">{searchResults.length} articles</span>
              <span className="sm:hidden">{searchResults.length}</span>
            </div>
          </div>
        </div>

        <div className="w-full max-w-full px-4 pb-20 pt-4 overflow-x-hidden">
          <div className="space-y-3 w-full max-w-full">
            {searchResults.map((result, idx) => (
              <SearchResultCard
                key={`${result.article.url}-${idx}`}
                result={result}
                isSelected={selectedArticle?.url === result.article.url}
                onSelect={() => onArticleSelect(result.article)}
                index={idx}
              />
            ))}
          </div>

          {/* Loading indicator for infinite scroll */}
          {isLoadingMore && (
            <div className="mt-6">
              <ScrollSentinelLoader />
            </div>
          )}

          {/* Sentinel element removed - using scroll-based pagination instead */}

          {/* End of list or error states */}
          {!isLoadingMore && (
            <InfiniteScrollLoader
              isLoading={false}
              hasMore={hasMore}
              isEmpty={searchResults.length === 0}
              itemCount={3}
            />
          )}
        </div>
      </div>

    </div>
  );
}

/**
 * Individual search result card
 */
interface SearchResultCardProps {
  result: any;
  isSelected: boolean;
  onSelect: () => void;
  index?: number;
}

function SearchResultCard({ result, isSelected, onSelect, index = 0 }: SearchResultCardProps) {
  const { article } = result;
  const timeAgo = article.publishedAt ? getTimeAgo(new Date(article.publishedAt)) : 'Unknown';

  const handleViewMore = (e: React.MouseEvent) => {
    e.stopPropagation();
    onSelect();
  };

  const handleViewArticle = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (article.url) {
      window.open(article.url, '_blank');
    }
  };

  return (
    <div
      style={{ animationDelay: `${index * 50}ms` }}
      className={`w-full max-w-full rounded-xl border-2 transition-all duration-250 animate-slideInWithBounce overflow-hidden flex flex-col cursor-pointer ${
        isSelected
          ? 'liquid-glass-ultra border-[#5AA6FF]/60 shadow-lg shadow-[#5AA6FF]/25 animate-premiumGlow elevated-glow scale-101'
          : 'liquid-glass border-[#C7D2E1]/40 hover:border-[#5AA6FF]/60 hover:shadow-lg hover:shadow-[#5AA6FF]/20 hover:scale-101 hover:animate-subtleGlowPulse micro-glow'
      }`}
    >
      {/* Gradient Accent Top - Aurora Colors */}
      <div className="h-1.5 w-full bg-gradient-to-r from-[#5AA6FF] via-[#8B7CFF] to-[#B08CFF] opacity-90 shadow-sm"></div>

      {/* Content Section with Subtle Gradient */}
      <div className="p-5 space-y-3.5 flex-1 flex flex-col bg-gradient-to-br from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 w-full max-w-full overflow-x-hidden">
        {/* Header with Source and Time (moved to top right) */}
        <div className="flex items-start justify-between gap-3 w-full max-w-full overflow-x-hidden">
          <div className="flex-1 min-w-0 overflow-hidden">
            <span className="text-xs font-semibold text-[#5AA6FF] bg-gradient-to-r from-[#F9FBFF] to-[#E8F2FF] px-2.5 py-1 rounded-full inline-block truncate">
              {article.source}
            </span>
          </div>
          {timeAgo && (
            <span className="text-xs text-[#8B7CFF] font-medium flex-shrink-0 whitespace-nowrap">{timeAgo}</span>
          )}
        </div>

        {/* Title - Enhanced Typography */}
        <h3 className="font-bold text-[#0F172A] text-sm md:text-base leading-snug line-clamp-3 hover:text-[#5AA6FF] transition-colors w-full max-w-full overflow-hidden break-words">
          {article.title}
        </h3>

        {/* AI-Generated Summary - Expanded with larger font */}
        {article.bullets5 && article.bullets5.length > 0 && (
          <div className="space-y-3 py-3 border-t border-[#C7D2E1]/25 pt-3 w-full max-w-full overflow-x-hidden">
            <div className="flex items-center gap-2 w-full max-w-full overflow-x-hidden">
              <div className="w-5 h-5 rounded-full bg-gradient-primary flex items-center justify-center flex-shrink-0">
                <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              </div>
              <span className="text-xs font-bold text-[#0F172A] uppercase tracking-widest truncate">AI Summary</span>
            </div>
            <div className="space-y-2 w-full max-w-full overflow-x-hidden">
              {article.bullets5.slice(0, 3).map((bullet: string, idx: number) => (
                <div key={idx} className="flex gap-2 text-sm text-[#2D3748] leading-relaxed w-full max-w-full overflow-x-hidden">
                  <span className="text-[#5AA6FF] font-bold flex-shrink-0 mt-0.5">→</span>
                  <span className="flex-1 overflow-hidden break-words">{bullet}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Tags Section */}
        {article.tags && Object.values(article.tags).some((tagArray: any) => tagArray && tagArray.length > 0) && (
          <div className="space-y-2 py-3 border-t border-[#C7D2E1]/25 pt-3 w-full max-w-full overflow-x-hidden">
            <div className="flex flex-wrap gap-2 w-full max-w-full">
              {/* LOB Tags - Cyan */}
              {article.tags.lob && article.tags.lob.length > 0 && (
                article.tags.lob.map((tag: string, idx: number) => (
                  <span key={`lob-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#06B6D4] text-xs font-medium whitespace-nowrap border border-[#06B6D4]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Perils Tags - Indigo */}
              {article.tags.perils && article.tags.perils.length > 0 && (
                article.tags.perils.map((tag: string, idx: number) => (
                  <span key={`perils-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#5AA6FF] text-xs font-medium whitespace-nowrap border border-[#5AA6FF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Regions Tags - Aurora Blue */}
              {article.tags.regions && article.tags.regions.length > 0 && (
                article.tags.regions.map((tag: string, idx: number) => (
                  <span key={`regions-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#5AA6FF] text-xs font-medium whitespace-nowrap border border-[#5AA6FF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Companies Tags - Aurora Violet */}
              {article.tags.companies && article.tags.companies.length > 0 && (
                article.tags.companies.map((tag: string, idx: number) => (
                  <span key={`companies-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#8B7CFF] text-xs font-medium whitespace-nowrap border border-[#8B7CFF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Trends Tags - Aurora Lilac */}
              {article.tags.trends && article.tags.trends.length > 0 && (
                article.tags.trends.map((tag: string, idx: number) => (
                  <span key={`trends-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#B08CFF] text-xs font-medium whitespace-nowrap border border-[#B08CFF]/30">
                    {tag}
                  </span>
                ))
              )}
              {/* Regulations Tags - Aurora Blue */}
              {article.tags.regulations && article.tags.regulations.length > 0 && (
                article.tags.regulations.map((tag: string, idx: number) => (
                  <span key={`regulations-${idx}`} className="px-2.5 py-1 rounded-full liquid-glass-light text-[#5AA6FF] text-xs font-medium whitespace-nowrap border border-[#5AA6FF]/30">
                    {tag}
                  </span>
                ))
              )}
            </div>
          </div>
        )}

        {/* Bottom Action Buttons */}
        <div className="flex gap-2 pt-4 mt-auto border-t border-[#C7D2E1]/25 pt-3 w-full max-w-full overflow-x-hidden">
          <button
            onClick={handleViewMore}
            className="flex-1 px-3 py-2 text-xs font-semibold text-[#5AA6FF] liquid-glass-light rounded-lg hover:border-[#5AA6FF]/50 transition-all duration-200 min-h-[44px] touch-action-manipulation border border-[#C7D2E1]/30"
          >
            View More
          </button>
          <button
            onClick={handleViewArticle}
            className="flex-1 px-3 py-2 text-xs font-semibold text-[#5AA6FF] liquid-glass-light rounded-lg hover:border-[#5AA6FF]/50 transition-all duration-200 flex items-center justify-center gap-1 min-h-[44px] touch-action-manipulation border border-[#C7D2E1]/30"
          >
            <span className="hidden sm:inline">View Article</span>
            <span className="sm:hidden">Article</span>
            <ExternalLink size={12} className="flex-shrink-0" />
          </button>
        </div>
      </div>
    </div>
  );
}

/**
 * Utility: Format time ago
 */
function getTimeAgo(date: Date): string {
  const now = new Date();
  const seconds = Math.floor((now.getTime() - date.getTime()) / 1000);

  if (seconds < 60) return 'now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  if (seconds < 604800) return `${Math.floor(seconds / 86400)}d ago`;
  return date.toLocaleDateString();
}



=================================================================================
FILE: src/components/SettingsPanel.tsx
=================================================================================

import { useEffect, useState } from 'react';
import { Settings, Save, Sparkles, Clock, Check } from 'lucide-react';

interface SettingsPanelProps {
  onSortChange?: (sort: 'smart' | 'recency') => void;
}

const SORT_OPTIONS = [
  { id: 'smart', label: 'AI Sort (AI + Recency)', icon: Sparkles },
  { id: 'recency', label: 'Recent', icon: Clock },
];

export function SettingsPanel({
  onSortChange,
}: SettingsPanelProps) {
  const [selectedSort, setSelectedSort] = useState<'smart' | 'recency'>('smart');
  const [saved, setSaved] = useState(false);

  // Load settings from localStorage
  useEffect(() => {
    const sort = localStorage.getItem('carriersignal_sort') as any;

    if (sort) setSelectedSort(sort);
  }, []);

  const handleSave = () => {
    localStorage.setItem('carriersignal_sort', selectedSort);

    onSortChange?.(selectedSort);

    setSaved(true);
    setTimeout(() => setSaved(false), 2000);
  };

  return (
    <div className="flex-1 overflow-y-auto">
      <div className="max-w-2xl mx-auto p-6 space-y-8">
        {/* Header */}
        <div className="flex items-center gap-3 mb-8">
          <div className="w-10 h-10 rounded-lg liquid-glass-premium flex items-center justify-center border border-[#5AA6FF]/40 animate-iconGlow">
            <Settings size={20} className="text-[#5AA6FF]" />
          </div>
          <h2 className="text-2xl font-bold text-[#0F172A]">Settings</h2>
        </div>

        {/* Sort Preference */}
        <div className="space-y-4">
          <h3 className="text-lg font-bold text-[#0F172A]">Default Sort</h3>
          <p className="text-sm text-[#64748B]">Choose how articles are sorted by default</p>
          <div className="space-y-2">
            {SORT_OPTIONS.map(sort => {
              const IconComponent = sort.icon;
              return (
                <button
                  key={sort.id}
                  onClick={() => setSelectedSort(sort.id as any)}
                  className={`w-full p-4 rounded-lg border-2 transition-all duration-250 text-left flex items-center gap-3 ${
                    selectedSort === sort.id
                      ? 'liquid-glass-premium border-[#5AA6FF]/50 bg-gradient-to-r from-[#E8F2FF]/30 to-[#E8F2FF]/15'
                      : 'liquid-glass-light border-[#C7D2E1]/30 hover:border-[#5AA6FF]/50 hover:bg-gradient-to-r hover:from-[#E8F2FF]/15 hover:to-[#E8F2FF]/08'
                  }`}
                >
                  <div className="text-[#5AA6FF] animate-iconGlow">
                    <IconComponent size={20} />
                  </div>
                  <div>
                    <div className="font-semibold text-[#0F172A]">{sort.label}</div>
                  </div>
                </button>
              );
            })}
          </div>
        </div>

        {/* Save Button */}
        <div className="flex gap-3 pt-6 border-t border-[#C7D2E1]/20">
          <button
            onClick={handleSave}
            className="flex-1 flex items-center justify-center gap-2 px-6 py-3 liquid-glass-premium text-[#5AA6FF] rounded-lg hover:border-[#5AA6FF]/50 transition-all duration-250 font-semibold border border-[#5AA6FF]/30 elevated-glow hover:shadow-md"
          >
            <Save size={18} />
            Save Settings
          </button>
          {saved && (
            <div className="flex items-center gap-2 px-4 py-3 liquid-glass-light text-[#16A34A] rounded-lg text-sm font-medium border border-[#16A34A]/40 animate-slideInRight">
              <Check size={18} />
              Saved
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default SettingsPanel;


=================================================================================
FILE: src/components/SkeletonLoader.tsx
=================================================================================

/**
 * Skeleton Loader Components
 * Provides shimmer animations for loading states with liquid glass aesthetic
 */

export function SkeletonLoader() {
  return (
    <div className="liquid-glass-premium rounded-3xl border border-[#C7D2E1]/40 overflow-hidden transition-all duration-400 animate-slideInWithBounce animate-enhancedPremiumGlow" role="status" aria-label="Loading article details">
      {/* Premium accent line with Aurora gradient */}
      <div className="h-2 bg-gradient-primary opacity-90 animate-liquidGlassShimmer"></div>

      {/* Header with liquid glass effect */}
      <div className="px-7 py-6 border-b border-[#C7D2E1]/30 bg-gradient-to-br from-white/50 to-[#F9FBFF]/30 backdrop-blur-sm">
        <div className="h-6 bg-gradient-to-r from-[#D4DFE8] via-[#C7D2E1] to-[#D4DFE8] rounded-lg w-3/4 mb-4 animate-shimmer"></div>
        <div className="flex items-center justify-between gap-3">
          <div className="h-4 bg-[#D4DFE8] rounded-lg w-1/4 animate-shimmer" style={{ animationDelay: '0.1s' }}></div>
          <div className="h-4 bg-[#D4DFE8] rounded-lg w-1/5 animate-shimmer" style={{ animationDelay: '0.2s' }}></div>
        </div>
      </div>

      {/* Content */}
      <div className="px-7 py-6">
        {/* Key Points */}
        <div className="mb-6 p-6 glass rounded-2xl border border-[#C7D2E1]/40 bg-gradient-to-br from-[#F9FBFF]/70 to-[#E8F2FF]/50 backdrop-blur-sm">
          <div className="h-3 bg-[#D4DFE8] rounded-lg w-1/6 mb-4 animate-shimmer"></div>
          <div className="space-y-3.5">
            <div className="h-4 bg-[#E8F2FF] rounded-lg w-full animate-shimmer" style={{ animationDelay: '0.1s' }}></div>
            <div className="h-4 bg-[#E8F2FF] rounded-lg w-5/6 animate-shimmer" style={{ animationDelay: '0.2s' }}></div>
            <div className="h-4 bg-[#E8F2FF] rounded-lg w-4/5 animate-shimmer" style={{ animationDelay: '0.3s' }}></div>
          </div>
        </div>

        {/* Why It Matters */}
        <div className="border-t border-[#C7D2E1]/30 pt-6">
          <div className="h-4 bg-[#D4DFE8] rounded-lg w-1/4 animate-shimmer"></div>
        </div>
      </div>

      {/* Tags */}
      <div className="px-7 py-6 bg-gradient-to-r from-[#F9FBFF]/50 to-[#E8F2FF]/40 border-t border-[#C7D2E1]/30 backdrop-blur-sm">
        <div className="flex flex-wrap gap-2.5">
          <div className="h-6 bg-[#D4DFE8] rounded-full w-16 animate-shimmer" style={{ animationDelay: '0.1s' }}></div>
          <div className="h-6 bg-[#D4DFE8] rounded-full w-20 animate-shimmer" style={{ animationDelay: '0.2s' }}></div>
          <div className="h-6 bg-[#D4DFE8] rounded-full w-24 animate-shimmer" style={{ animationDelay: '0.3s' }}></div>
        </div>
      </div>
    </div>
  );
}

/**
 * Card Skeleton - Compact loading state for article cards
 */
export function CardSkeleton() {
  return (
    <div className="glass rounded-2xl border border-[#C7D2E1]/40 p-4 space-y-3.5 animate-fadeIn" role="status" aria-label="Loading article card">
      {/* Header */}
      <div className="flex items-start justify-between gap-3">
        <div className="flex-1">
          <div className="h-3 bg-[#D4DFE8] rounded-lg w-1/3 mb-2 animate-shimmer"></div>
          <div className="h-2 bg-[#E8F2FF] rounded-lg w-1/4 animate-shimmer" style={{ animationDelay: '0.1s' }}></div>
        </div>
        <div className="h-6 bg-[#E8F2FF] rounded-lg w-12 animate-shimmer" style={{ animationDelay: '0.2s' }}></div>
      </div>

      {/* Title */}
      <div className="space-y-2">
        <div className="h-4 bg-[#D4DFE8] rounded-lg w-full animate-shimmer" style={{ animationDelay: '0.1s' }}></div>
        <div className="h-4 bg-[#D4DFE8] rounded-lg w-5/6 animate-shimmer" style={{ animationDelay: '0.2s' }}></div>
      </div>

      {/* Description */}
      <div className="space-y-2">
        <div className="h-3 bg-[#E8F2FF] rounded-lg w-full animate-shimmer" style={{ animationDelay: '0.15s' }}></div>
        <div className="h-3 bg-[#E8F2FF] rounded-lg w-4/5 animate-shimmer" style={{ animationDelay: '0.25s' }}></div>
      </div>

      {/* Tags */}
      <div className="flex gap-2 pt-2">
        <div className="h-5 bg-[#D4DFE8] rounded-full w-12 animate-shimmer" style={{ animationDelay: '0.1s' }}></div>
        <div className="h-5 bg-[#D4DFE8] rounded-full w-16 animate-shimmer" style={{ animationDelay: '0.2s' }}></div>
        <div className="h-5 bg-[#D4DFE8] rounded-full w-14 animate-shimmer" style={{ animationDelay: '0.3s' }}></div>
      </div>
    </div>
  );
}

/**
 * Grid of card skeletons for article lists
 */
export function SkeletonGrid({ count = 3, variant = 'card' }: { count?: number; variant?: 'card' | 'full' }) {
  return (
    <div className={variant === 'card' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-4'}>
      {Array.from({ length: count }).map((_, i) => (
        variant === 'card' ? <CardSkeleton key={i} /> : <SkeletonLoader key={i} />
      ))}
    </div>
  );
}



=================================================================================
FILE: src/components/primitives/Badge.tsx
=================================================================================

/**
 * Badge Component
 * Reusable badge for tags, labels, and status indicators
 * Supports LOB, peril, region, and semantic variants
 * Features glow effects, micro-animations, and accessibility
 */

import type { ReactNode, HTMLAttributes, KeyboardEvent } from 'react';

export interface BadgeProps extends HTMLAttributes<HTMLSpanElement> {
  children: ReactNode;
  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info' | 'lob' | 'peril' | 'region' | 'company' | 'trend' | 'regulation';
  size?: 'sm' | 'md';
  className?: string;
  interactive?: boolean;
  onClick?: () => void;
  glow?: boolean;
  ariaLabel?: string;
}

export function Badge({
  children,
  variant = 'default',
  size = 'sm',
  className = '',
  interactive = false,
  onClick,
  glow = false,
  ariaLabel,
  ...props
}: BadgeProps) {
  const baseClasses = 'inline-flex items-center font-bold rounded-full transition-all duration-300 will-change-transform';

  const variantClasses = {
    default: 'bg-[#E8F2FF] text-[#5AA6FF] border border-[#5AA6FF]/35 hover:border-[#5AA6FF]/60 hover:bg-[#D8E8FF] hover:shadow-md hover:shadow-[#5AA6FF]/20',
    success: 'bg-[#D1FAE5] text-[#059669] border border-[#6EE7B7]/70 hover:border-[#6EE7B7]/90 hover:bg-[#A7F3D0] hover:shadow-md hover:shadow-[#059669]/20',
    warning: 'bg-[#FEF3C7] text-[#D97706] border border-[#FCD34D]/70 hover:border-[#FCD34D]/90 hover:bg-[#FDE68A] hover:shadow-md hover:shadow-[#D97706]/20',
    danger: 'bg-[#FEE2E2] text-[#DC2626] border border-[#FCA5A5]/70 hover:border-[#FCA5A5]/90 hover:bg-[#FECACA] hover:shadow-md hover:shadow-[#DC2626]/20',
    info: 'bg-[#E0E7FF] text-[#4F46E5] border border-[#A5B4FC]/70 hover:border-[#A5B4FC]/90 hover:bg-[#C7D2FE] hover:shadow-md hover:shadow-[#4F46E5]/20',
    lob: 'bg-gradient-to-r from-[#E0E7FF] to-[#C7D2FE] text-[#4338CA] border border-[#A5B4FC]/70 hover:border-[#A5B4FC]/90 hover:shadow-lg hover:shadow-[#4338CA]/25',
    peril: 'bg-gradient-to-r from-[#FEE2E2] to-[#FECACA] text-[#991B1B] border border-[#FCA5A5]/70 hover:border-[#FCA5A5]/90 hover:shadow-lg hover:shadow-[#DC2626]/25',
    region: 'bg-gradient-to-r from-[#D1FAE5] to-[#A7F3D0] text-[#065F46] border border-[#6EE7B7]/70 hover:border-[#6EE7B7]/90 hover:shadow-lg hover:shadow-[#059669]/25',
    company: 'bg-gradient-to-r from-[#E0F2FE] to-[#F0F7FF] text-[#0369A1] border border-[#7DD3FC]/70 hover:border-[#7DD3FC]/90 hover:shadow-lg hover:shadow-[#0369A1]/25',
    trend: 'bg-gradient-to-r from-[#FEF3C7] to-[#FDE68A] text-[#92400E] border border-[#FCD34D]/70 hover:border-[#FCD34D]/90 hover:shadow-lg hover:shadow-[#D97706]/25',
    regulation: 'bg-gradient-to-r from-[#F1F5F9] to-[#E2E8F0] text-[#334155] border border-[#CBD5E1]/70 hover:border-[#CBD5E1]/90 hover:shadow-md hover:shadow-[#334155]/15',
  };

  const sizeClasses = {
    sm: 'px-3 py-1.5 text-xs',
    md: 'px-4 py-2 text-sm',
  };

  const glowClasses = glow
    ? 'shadow-md shadow-[#5AA6FF]/25 hover:shadow-lg hover:shadow-[#5AA6FF]/45'
    : '';

  const interactiveClasses = interactive
    ? 'cursor-pointer hover:scale-115 active:scale-90 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF] transition-transform duration-300'
    : '';

  const handleKeyDown = (e: KeyboardEvent<HTMLSpanElement>) => {
    if (interactive && (e.key === 'Enter' || e.key === ' ')) {
      e.preventDefault();
      onClick?.();
    }
  };

  return (
    <span
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${glowClasses} ${interactiveClasses} ${className}`}
      onClick={onClick}
      onKeyDown={handleKeyDown}
      role={interactive ? 'button' : 'status'}
      tabIndex={interactive ? 0 : undefined}
      aria-label={ariaLabel}
      {...props}
    >
      {children}
    </span>
  );
}



=================================================================================
FILE: src/components/primitives/GlassCard.tsx
=================================================================================

/**
 * GlassCard Component
 * Reusable liquid glass card primitive with consistent styling
 * Supports three glass effect intensities: default, premium, ultra
 * Fully accessible with keyboard navigation and ARIA support
 */

import type { ReactNode, HTMLAttributes, KeyboardEvent } from 'react';

export interface GlassCardProps extends HTMLAttributes<HTMLDivElement> {
  children: ReactNode;
  className?: string;
  variant?: 'default' | 'premium' | 'ultra';
  interactive?: boolean;
  onClick?: () => void;
  ariaLabel?: string;
  ariaDescribedBy?: string;
}

export function GlassCard({
  children,
  className = '',
  variant = 'default',
  interactive = false,
  onClick,
  ariaLabel,
  ariaDescribedBy,
  ...props
}: GlassCardProps) {
  const baseClasses = 'rounded-xl p-4 transition-all duration-300 will-change-transform';

  const variantClasses = {
    default: 'liquid-glass',
    premium: 'liquid-glass-premium',
    ultra: 'liquid-glass-ultra',
  };

  const interactiveClasses = interactive
    ? 'cursor-pointer hover:shadow-lg hover:shadow-[#5AA6FF]/20 hover:scale-[1.02] active:scale-[0.98] focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF] transition-all duration-300'
    : '';

  const handleKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {
    if (interactive && (e.key === 'Enter' || e.key === ' ')) {
      e.preventDefault();
      onClick?.();
    }
  };

  return (
    <div
      className={`${baseClasses} ${variantClasses[variant]} ${interactiveClasses} ${className}`}
      onClick={onClick}
      onKeyDown={handleKeyDown}
      role={interactive ? 'button' : undefined}
      tabIndex={interactive ? 0 : undefined}
      aria-label={ariaLabel}
      aria-describedby={ariaDescribedBy}
      {...props}
    >
      {children}
    </div>
  );
}



=================================================================================
FILE: src/components/primitives/GlowButton.tsx
=================================================================================

/**
 * GlowButton Component
 * Reusable button with glow effects and Aurora color support
 * Supports primary (gradient), secondary (light), and ghost variants
 * Fully accessible with ARIA attributes and keyboard support
 */

import type { ReactNode, ButtonHTMLAttributes } from 'react';

export interface GlowButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'ghost' | 'danger' | 'success';
  size?: 'sm' | 'md' | 'lg';
  glow?: boolean;
  loading?: boolean;
  icon?: ReactNode;
  ariaLabel?: string;
  ariaDescribedBy?: string;
}

export function GlowButton({
  children,
  variant = 'primary',
  size = 'md',
  glow = true,
  loading = false,
  icon,
  className = '',
  disabled,
  ariaLabel,
  ariaDescribedBy,
  ...props
}: GlowButtonProps) {
  const baseClasses = 'font-bold rounded-lg transition-all duration-300 flex items-center justify-center gap-2.5 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF] will-change-transform';

  const variantClasses = {
    primary: 'bg-gradient-to-r from-[#5AA6FF] via-[#6BB3FF] to-[#8B7CFF] text-white hover:shadow-xl hover:shadow-[#5AA6FF]/50 hover:scale-105 active:scale-95 hover:-translate-y-1 font-bold',
    secondary: 'bg-[#E8F2FF] text-[#5AA6FF] border border-[#C7D2E1]/80 hover:bg-[#D8E8FF] hover:border-[#5AA6FF]/70 hover:shadow-lg hover:shadow-[#5AA6FF]/25 active:bg-[#C8DEFF] font-bold',
    ghost: 'text-[#5AA6FF] hover:bg-[#E8F2FF]/70 hover:shadow-md hover:shadow-[#5AA6FF]/15 active:bg-[#D8E8FF] font-bold',
    danger: 'bg-gradient-to-r from-[#EF4444] to-[#DC2626] text-white hover:shadow-xl hover:shadow-[#EF4444]/40 active:scale-95 font-bold',
    success: 'bg-gradient-to-r from-[#06B6D4] to-[#0891B2] text-white hover:shadow-xl hover:shadow-[#06B6D4]/40 active:scale-95 font-bold',
  };

  const sizeClasses = {
    sm: 'px-3.5 py-2 text-sm min-h-[44px] min-w-[44px]',
    md: 'px-5 py-2.5 text-base min-h-[48px] min-w-[48px]',
    lg: 'px-7 py-3.5 text-lg min-h-[52px] min-w-[52px]',
  };

  const glowClasses = glow && (variant === 'primary' || variant === 'success' || variant === 'danger')
    ? 'shadow-lg shadow-[#5AA6FF]/35 hover:shadow-2xl hover:shadow-[#5AA6FF]/45'
    : '';

  const disabledClasses = disabled || loading
    ? 'opacity-50 cursor-not-allowed pointer-events-none'
    : '';

  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${glowClasses} ${disabledClasses} ${className}`}
      disabled={disabled || loading}
      aria-label={ariaLabel}
      aria-describedby={ariaDescribedBy}
      aria-busy={loading}
      {...props}
    >
      {loading && (
        <div
          className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"
          role="status"
          aria-label="Loading"
        />
      )}
      {icon && !loading && <span className="flex items-center" aria-hidden="true">{icon}</span>}
      {children}
    </button>
  );
}



=================================================================================
FILE: src/components/primitives/Input.tsx
=================================================================================

/**
 * Input Component
 * Reusable form input with liquid glass styling
 * Supports error states, helper text, and icons
 * WCAG 2.1 compliant with proper ARIA attributes
 */

import type { InputHTMLAttributes } from 'react';
import { useId } from 'react';
import { AlertCircle, CheckCircle } from 'lucide-react';

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
  icon?: React.ReactNode;
  variant?: 'default' | 'filled';
  success?: boolean;
}

export function Input({
  label,
  error,
  helperText,
  icon,
  variant = 'default',
  success = false,
  className = '',
  id: providedId,
  ...props
}: InputProps) {
  const generatedId = useId();
  const id = providedId || generatedId;
  const errorId = `${id}-error`;
  const helperId = `${id}-helper`;

  const variantClasses = {
    default: 'liquid-glass-light border border-[#C7D2E1]/40 hover:border-[#5AA6FF]/30 focus:border-[#5AA6FF]/60 focus:shadow-md focus:shadow-[#5AA6FF]/10',
    filled: 'bg-[#F9FBFF] border border-[#C7D2E1]/30 hover:border-[#5AA6FF]/30 focus:border-[#5AA6FF]/60 focus:shadow-md focus:shadow-[#5AA6FF]/10',
  };

  const stateClasses = error
    ? 'border-[#EF4444]/60 focus:ring-[#EF4444]/30 focus:shadow-md focus:shadow-[#EF4444]/10'
    : success
      ? 'border-[#06B6D4]/60 focus:ring-[#06B6D4]/30 focus:shadow-md focus:shadow-[#06B6D4]/10'
      : 'focus:ring-[#5AA6FF]/30';

  const ariaDescribedBy = [
    error ? errorId : null,
    helperText && !error ? helperId : null,
  ]
    .filter(Boolean)
    .join(' ') || undefined;

  return (
    <div className="w-full">
      {label && (
        <label htmlFor={id} className="block text-sm font-semibold text-[#0F172A] mb-2">
          {label}
          {props.required && <span className="text-[#EF4444] ml-1" aria-label="required">*</span>}
        </label>
      )}
      <div className="relative">
        {icon && (
          <div className="absolute left-3 top-1/2 -translate-y-1/2 text-[#64748B] pointer-events-none" aria-hidden="true">
            {icon}
          </div>
        )}
        <input
          id={id}
          className={`
            w-full px-4 py-2.5 rounded-lg text-sm text-[#0F172A] placeholder-[#94A3B8]
            transition-all duration-300 focus:outline-none focus:ring-2 min-h-[44px]
            ${icon ? 'pl-10' : ''}
            ${success && !error ? 'pr-10' : ''}
            ${variantClasses[variant]}
            ${stateClasses}
            ${className}
          `}
          aria-invalid={error ? 'true' : 'false'}
          aria-describedby={ariaDescribedBy}
          {...props}
        />
        {success && !error && (
          <div className="absolute right-3 top-1/2 -translate-y-1/2 text-[#06B6D4] pointer-events-none" aria-hidden="true">
            <CheckCircle size={18} />
          </div>
        )}
        {error && (
          <div className="absolute right-3 top-1/2 -translate-y-1/2 text-[#EF4444] pointer-events-none" aria-hidden="true">
            <AlertCircle size={18} />
          </div>
        )}
      </div>
      {error && (
        <div id={errorId} className="flex items-center gap-1.5 mt-2 text-[#EF4444]" role="alert">
          <span className="text-xs font-medium">{error}</span>
        </div>
      )}
      {helperText && !error && (
        <p id={helperId} className="text-xs text-[#94A3B8] mt-1.5">{helperText}</p>
      )}
    </div>
  );
}



=================================================================================
FILE: src/components/primitives/Modal.tsx
=================================================================================

/**
 * Modal Component
 * Accessible modal dialog with liquid glass styling
 * Supports multiple sizes and keyboard navigation (Escape to close)
 * WCAG 2.1 Level AA compliant with focus management
 */

import { useEffect, useRef, useId } from 'react';
import type { ReactNode } from 'react';
import { X } from 'lucide-react';

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  closeButton?: boolean;
  closeOnEscape?: boolean;
  closeOnBackdropClick?: boolean;
  description?: string;
}

export function Modal({
  isOpen,
  onClose,
  title,
  children,
  size = 'md',
  closeButton = true,
  closeOnEscape = true,
  closeOnBackdropClick = true,
  description,
}: ModalProps) {
  const modalRef = useRef<HTMLDivElement>(null);
  const previousActiveElement = useRef<HTMLElement | null>(null);
  const descriptionId = useId();

  useEffect(() => {
    if (isOpen) {
      // Store the previously focused element
      previousActiveElement.current = document.activeElement as HTMLElement;

      // Prevent body scroll
      document.body.style.overflow = 'hidden';

      // Focus the modal or close button
      setTimeout(() => {
        if (closeButton && modalRef.current) {
          const closeBtn = modalRef.current.querySelector('button[aria-label="Close modal"]') as HTMLButtonElement;
          closeBtn?.focus();
        } else if (modalRef.current) {
          modalRef.current.focus();
        }
      }, 0);

      const handleEscape = (e: KeyboardEvent) => {
        if (closeOnEscape && e.key === 'Escape') {
          e.preventDefault();
          onClose();
        }
      };

      document.addEventListener('keydown', handleEscape);
      return () => {
        document.removeEventListener('keydown', handleEscape);
        document.body.style.overflow = 'unset';

        // Restore focus to the previously focused element
        if (previousActiveElement.current) {
          previousActiveElement.current.focus();
        }
      };
    }
  }, [isOpen, closeOnEscape, onClose, closeButton]);

  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-lg',
    xl: 'max-w-xl',
  };

  return (
    <div
      className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4 animate-fadeIn overflow-hidden"
      onClick={closeOnBackdropClick ? onClose : undefined}
      role="presentation"
      aria-hidden={!isOpen}
    >
      <div
        ref={modalRef}
        className={`w-full ${sizeClasses[size]} liquid-glass-ultra rounded-3xl shadow-2xl shadow-[#5AA6FF]/20 border border-[#C7D2E1]/40 animate-scaleIn max-h-[90vh] flex flex-col focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF] relative`}
        onClick={(e) => e.stopPropagation()}
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? 'modal-title' : undefined}
        aria-describedby={description ? descriptionId : undefined}
        tabIndex={-1}
      >
        {/* Close Button - Top Right Corner */}
        {closeButton && (
          <button
            onClick={onClose}
            className="absolute top-4 right-4 p-2 hover:bg-[#E8F2FF] hover:shadow-md hover:shadow-[#5AA6FF]/20 rounded-lg transition-all focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#5AA6FF] min-h-[44px] min-w-[44px] flex items-center justify-center z-10"
            aria-label="Close modal"
          >
            <X size={20} className="text-[#64748B] hover:text-[#0F172A] transition-colors" />
          </button>
        )}

        {title && (
          <div className="flex items-center justify-between p-6 border-b border-[#C7D2E1]/20 flex-shrink-0 pr-16">
            <h2 id="modal-title" className="text-xl font-semibold text-[#0F172A]">
              {title}
            </h2>
          </div>
        )}
        {description && (
          <div id={descriptionId} className="sr-only">
            {description}
          </div>
        )}
        <div className="p-6 overflow-y-auto flex-1">{children}</div>
      </div>
    </div>
  );
}



=================================================================================
FILE: src/components/primitives/Spinner.tsx
=================================================================================

/**
 * Spinner Component
 * Loading indicator with Aurora gradient animation
 * Supports multiple sizes and variants
 * Respects prefers-reduced-motion for accessibility
 */

import type { CSSProperties } from 'react';

export interface SpinnerProps {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  variant?: 'gradient' | 'pulse' | 'dots';
  className?: string;
  label?: string;
}

export function Spinner({
  size = 'md',
  variant = 'gradient',
  className = '',
  label,
}: SpinnerProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12',
    xl: 'w-16 h-16',
  };

  const gradientStyle: CSSProperties = {
    background: 'conic-gradient(from 0deg, #5AA6FF, #8B7CFF, #B08CFF, #5AA6FF)',
    WebkitMaskImage: 'radial-gradient(farthest-side, transparent calc(100% - 2px), #000 calc(100% - 1px))',
    maskImage: 'radial-gradient(farthest-side, transparent calc(100% - 2px), #000 calc(100% - 1px))',
    animation: 'spin 1s linear infinite',
  };

  const pulseStyle: CSSProperties = {
    background: 'linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%)',
    animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
  };

  if (variant === 'dots') {
    return (
      <div
        className={`flex items-center gap-1 ${className}`}
        role="status"
        aria-label={label || 'Loading'}
        aria-live="polite"
      >
        <div
          className={`${sizeClasses[size]} rounded-full bg-[#5AA6FF] animate-bounce`}
          style={{ animationDelay: '0s' }}
          aria-hidden="true"
        />
        <div
          className={`${sizeClasses[size]} rounded-full bg-[#8B7CFF] animate-bounce`}
          style={{ animationDelay: '0.2s' }}
          aria-hidden="true"
        />
        <div
          className={`${sizeClasses[size]} rounded-full bg-[#B08CFF] animate-bounce`}
          style={{ animationDelay: '0.4s' }}
          aria-hidden="true"
        />
      </div>
    );
  }

  return (
    <div
      className={`${sizeClasses[size]} rounded-full ${className}`}
      style={variant === 'gradient' ? gradientStyle : pulseStyle}
      role="status"
      aria-label={label || 'Loading'}
      aria-live="polite"
    />
  );
}



=================================================================================
FILE: src/components/primitives/Tooltip.tsx
=================================================================================

/**
 * Tooltip Component
 * Accessible tooltip with Aurora styling
 * Supports multiple positions and keyboard accessibility
 * WCAG 2.1 compliant with proper ARIA attributes
 */

import { useState, useRef, useId } from 'react';
import type { ReactNode } from 'react';

export interface TooltipProps {
  content: string;
  children: ReactNode;
  position?: 'top' | 'bottom' | 'left' | 'right';
  delay?: number;
  variant?: 'dark' | 'light';
  disabled?: boolean;
}

export function Tooltip({
  content,
  children,
  position = 'top',
  delay = 200,
  variant = 'dark',
  disabled = false,
}: TooltipProps) {
  const [isVisible, setIsVisible] = useState(false);
  const [timeoutId, setTimeoutId] = useState<ReturnType<typeof setTimeout> | null>(null);
  const triggerRef = useRef<HTMLDivElement>(null);
  const tooltipId = useId();

  const handleMouseEnter = () => {
    if (disabled) return;
    const id = setTimeout(() => setIsVisible(true), delay);
    setTimeoutId(id);
  };

  const handleMouseLeave = () => {
    if (timeoutId) clearTimeout(timeoutId);
    setIsVisible(false);
  };

  const handleFocus = () => {
    if (disabled) return;
    setIsVisible(true);
  };

  const handleBlur = () => {
    setIsVisible(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Escape' && isVisible) {
      setIsVisible(false);
    }
  };

  const positionClasses = {
    top: 'bottom-full mb-2 left-1/2 -translate-x-1/2',
    bottom: 'top-full mt-2 left-1/2 -translate-x-1/2',
    left: 'right-full mr-2 top-1/2 -translate-y-1/2',
    right: 'left-full ml-2 top-1/2 -translate-y-1/2',
  };

  const variantClasses = {
    dark: 'bg-[#0F172A] text-white',
    light: 'bg-[#F9FBFF] text-[#0F172A] border border-[#C7D2E1]',
  };

  const arrowClasses = {
    dark: 'bg-[#0F172A]',
    light: 'bg-[#F9FBFF] border border-[#C7D2E1]',
  };

  return (
    <div
      ref={triggerRef}
      className="relative inline-block"
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      onFocus={handleFocus}
      onBlur={handleBlur}
      onKeyDown={handleKeyDown}
    >
      {children}
      {isVisible && !disabled && (
        <div
          id={tooltipId}
          className={`absolute ${positionClasses[position]} px-3 py-2 ${variantClasses[variant]} text-sm rounded-lg whitespace-nowrap shadow-lg z-50 animate-fadeIn pointer-events-none`}
          role="tooltip"
          aria-hidden={!isVisible}
        >
          {content}
          <div
            className={`absolute w-2 h-2 ${arrowClasses[variant]} transform rotate-45 ${
              position === 'top'
                ? 'top-full -mt-1 left-1/2 -translate-x-1/2'
                : position === 'bottom'
                  ? 'bottom-full mt-1 left-1/2 -translate-x-1/2'
                  : position === 'left'
                    ? 'left-full -ml-1 top-1/2 -translate-y-1/2'
                    : 'right-full ml-1 top-1/2 -translate-y-1/2'
            }`}
            aria-hidden="true"
          />
        </div>
      )}
    </div>
  );
}



=================================================================================
FILE: src/components/primitives/index.ts
=================================================================================

/**
 * Primitive Components Export
 * Reusable UI building blocks for the liquid glass design system
 */

export { GlassCard } from './GlassCard';
export type { GlassCardProps } from './GlassCard';

export { GlowButton } from './GlowButton';
export type { GlowButtonProps } from './GlowButton';

export { Badge } from './Badge';
export type { BadgeProps } from './Badge';

export { Input } from './Input';
export type { InputProps } from './Input';

export { Modal } from './Modal';
export type { ModalProps } from './Modal';

export { Spinner } from './Spinner';
export type { SpinnerProps } from './Spinner';

export { Tooltip } from './Tooltip';
export type { TooltipProps } from './Tooltip';

// Re-export design tokens
export * from '../../design/tokens';



=================================================================================
FILE: src/hooks/useArticles.ts
=================================================================================

/**
 * useArticles Hook
 * Manages article fetching with pagination, error handling, and caching
 * Includes dynamic score calculation for real-time ranking updates
 */

import { useEffect, useState, useCallback, useRef } from 'react';
import { collection, query, orderBy, limit, startAfter, getDocs } from 'firebase/firestore';
import type { QueryConstraint } from 'firebase/firestore';
import { db } from '../firebase';
import type { Article } from '../types';
import { logger } from '../utils/logger';

interface UseArticlesOptions {
  pageSize?: number;
  sortBy?: 'createdAt' | 'publishedAt' | 'smartScore' | 'aiScore';
  sortOrder?: 'asc' | 'desc';
}

interface UseArticlesReturn {
  articles: Article[];
  loading: boolean;
  isLoadingMore: boolean;
  error: string | null;
  hasMore: boolean;
  loadMore: () => Promise<void>;
  refresh: () => Promise<void>;
}

export function useArticles({
  pageSize = 20,
  sortBy = 'createdAt',
  sortOrder = 'desc',
}: UseArticlesOptions = {}): UseArticlesReturn {
  const [articles, setArticles] = useState<Article[]>([]);
  const [loading, setLoading] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasMore, setHasMore] = useState(true);
  const lastCursorRef = useRef<any>(null);
  const isLoadingRef = useRef(false);
  const prefetchTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const pageCountRef = useRef(0);

  const loadInitial = useCallback(async () => {
    if (isLoadingRef.current) return;
    isLoadingRef.current = true;
    setLoading(true);
    setError(null);

    try {
      logger.info('useArticles', 'Loading initial articles', { pageSize, sortBy, sortOrder });

      // Reset pagination state when sort changes
      lastCursorRef.current = null;
      pageCountRef.current = 0;

      const constraints: QueryConstraint[] = [
        orderBy(sortBy, sortOrder),
        limit(pageSize),
      ];

      const q = query(collection(db, 'articles'), ...constraints);
      const snapshot = await getDocs(q);

      console.log(`[useArticles] Initial query returned ${snapshot.docs.length} documents with sort: ${sortBy}`);

      const docs = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate?.() || new Date(),
          publishedAt: data.publishedAt || data.createdAt?.toDate?.() || new Date(),
        };
      }) as Article[];

      setArticles(docs);
      lastCursorRef.current = snapshot.docs[snapshot.docs.length - 1] || null;
      // hasMore is true if we got a full page (means there might be more)
      const hasMoreArticles = snapshot.docs.length === pageSize;
      setHasMore(hasMoreArticles);

      logger.info('useArticles', `Initial load complete: ${docs.length} articles loaded, hasMore: ${hasMoreArticles}`, {
        pageSize,
        docsLength: docs.length,
        hasMoreArticles,
      });

      console.log(`[useArticles] Initial load: ${docs.length} articles, hasMore: ${hasMoreArticles}`);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to load articles';
      logger.error('useArticles', 'Failed to load initial articles', { error: message });
      console.error('[useArticles] Error loading initial articles:', err);
      setError(message);
    } finally {
      setLoading(false);
      isLoadingRef.current = false;
    }
  }, [pageSize, sortBy, sortOrder]);

  const loadMore = useCallback(async () => {
    // Prevent concurrent loads
    if (isLoadingRef.current) {
      console.log('[useArticles] Already loading, skipping loadMore');
      return;
    }

    // Don't load if we don't have a cursor
    if (!lastCursorRef.current) {
      console.log('[useArticles] No cursor available, skipping loadMore');
      return;
    }

    isLoadingRef.current = true;
    setIsLoadingMore(true);

    try {
      pageCountRef.current += 1;
      console.log(`[useArticles] Loading page ${pageCountRef.current}...`);

      const constraints: QueryConstraint[] = [
        orderBy(sortBy, sortOrder),
        startAfter(lastCursorRef.current),
        limit(pageSize),
      ];

      const q = query(collection(db, 'articles'), ...constraints);
      const snapshot = await getDocs(q);

      console.log(`[useArticles] Page ${pageCountRef.current}: Fetched ${snapshot.docs.length} articles`);

      if (snapshot.docs.length === 0) {
        console.log('[useArticles] No more articles - reached end');
        setHasMore(false);
        return;
      }

      const docs = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate?.() || new Date(),
          publishedAt: data.publishedAt || data.createdAt?.toDate?.() || new Date(),
        };
      }) as Article[];

      // Update articles
      setArticles((prev) => {
        const updated = [...prev, ...docs];
        console.log(`[useArticles] Total articles now: ${updated.length}`);
        return updated;
      });

      // Update cursor for next page
      lastCursorRef.current = snapshot.docs[snapshot.docs.length - 1];

      // Check if there are more articles
      const hasMoreArticles = snapshot.docs.length === pageSize;
      setHasMore(hasMoreArticles);
      console.log(`[useArticles] Page ${pageCountRef.current} complete. hasMore: ${hasMoreArticles}`);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to load more articles';
      console.error('[useArticles] Error loading more:', message);
      logger.error('useArticles', 'Failed to load more articles', { error: message });
      setError(message);
    } finally {
      isLoadingRef.current = false;
      setIsLoadingMore(false);
    }
  }, [pageSize, sortBy, sortOrder]);

  const refresh = useCallback(async () => {
    lastCursorRef.current = null;
    setArticles([]);
    await loadInitial();
  }, [loadInitial]);

  useEffect(() => {
    // Reset pagination state when sort changes
    lastCursorRef.current = null;
    pageCountRef.current = 0;
    setArticles([]);
    setHasMore(true);

    loadInitial();

    // Cleanup prefetch timeout on unmount
    return () => {
      if (prefetchTimeoutRef.current) {
        clearTimeout(prefetchTimeoutRef.current);
      }
    };
  }, [loadInitial]);

  return {
    articles,
    loading,
    isLoadingMore,
    error,
    hasMore,
    loadMore,
    refresh,
  };
}



=================================================================================
FILE: src/hooks/useRealTimeScoring.ts
=================================================================================

/**
 * useRealTimeScoring Hook
 * Periodically recalculates article scores to ensure proper ranking as articles age
 * Ensures older articles naturally move down the feed
 */

import { useEffect, useRef, useCallback } from 'react';
import type { Article } from '../types';
import { calculateDynamicArticleScore } from '../utils/scoring';

interface UseRealTimeScoringOptions {
  articles: Article[];
  onScoresUpdate: (articles: Article[]) => void;
  updateInterval?: number; // milliseconds, default 60000 (1 minute)
  enabled?: boolean;
}

/**
 * Hook that periodically recalculates article scores
 * This ensures that as articles age, their scores decay appropriately
 * and older articles naturally move down the feed
 */
export function useRealTimeScoring({
  articles,
  onScoresUpdate,
  updateInterval = 60000, // 1 minute default
  enabled = true,
}: UseRealTimeScoringOptions): void {
  const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);
  const lastUpdateRef = useRef<number>(0);

  const updateScores = useCallback(() => {
    if (!enabled || articles.length === 0) return;

    // Recalculate scores for all articles
    const updatedArticles = articles.map(article => ({
      ...article,
      dynamicScore: calculateDynamicArticleScore(article),
    }));

    // Sort by updated scores
    updatedArticles.sort((a, b) => (b.dynamicScore || 0) - (a.dynamicScore || 0));

    onScoresUpdate(updatedArticles);
    lastUpdateRef.current = Date.now();
  }, [articles, enabled, onScoresUpdate]);

  useEffect(() => {
    if (!enabled) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      return;
    }

    // Initial update
    updateScores();

    // Set up periodic updates
    intervalRef.current = setInterval(updateScores, updateInterval);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    };
  }, [updateScores, updateInterval, enabled]);
}

/**
 * Hook for tracking time spent on an article
 * Useful for engagement metrics
 */
export function useArticleTimeTracking(
  articleId: string | undefined,
  onTimeUpdate?: (seconds: number) => void
): void {
  const startTimeRef = useRef<number | null>(null);
  const accumulatedTimeRef = useRef<number>(0);

  useEffect(() => {
    if (!articleId) return;

    startTimeRef.current = Date.now();

    return () => {
      if (startTimeRef.current) {
        const timeSpent = Math.floor((Date.now() - startTimeRef.current) / 1000);
        accumulatedTimeRef.current += timeSpent;
        onTimeUpdate?.(accumulatedTimeRef.current);
      }
    };
  }, [articleId, onTimeUpdate]);
}



=================================================================================
FILE: src/utils/api.ts
=================================================================================

/**
 * API Utility Functions
 * Centralized API calls with error handling and retry logic
 */

import { logger } from './logger';
import { API_CONFIG } from '../config';

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

export interface ApiError extends Error {
  status?: number;
  code?: string;
}

const MAX_RETRIES = 3;
const RETRY_DELAY_MS = 1000;
const REQUEST_TIMEOUT_MS = 30000;

async function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function fetchWithRetry<T>(
  url: string,
  options: RequestInit = {},
  retries = 0
): Promise<T> {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT_MS);

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const error: ApiError = new Error(`HTTP ${response.status}`);
        error.status = response.status;
        throw error;
      }

      return await response.json();
    } finally {
      clearTimeout(timeoutId);
    }
  } catch (error) {
    const isRetryable =
      error instanceof TypeError ||
      (error as ApiError).status === 503 ||
      (error instanceof Error && error.name === 'AbortError');

    if (retries < MAX_RETRIES && isRetryable) {
      logger.warn('api', `Retry attempt ${retries + 1}/${MAX_RETRIES}`, { url });
      await delay(RETRY_DELAY_MS * (retries + 1));
      return fetchWithRetry<T>(url, options, retries + 1);
    }
    throw error;
  }
}

export async function askBrief(query: string): Promise<ApiResponse<unknown>> {
  try {
    if (!query || query.trim().length === 0) {
      throw new Error('Query cannot be empty');
    }

    logger.info('api', 'Calling askBrief', { query });

    const url = new URL(`${API_CONFIG.FUNCTIONS_URL}${API_CONFIG.ENDPOINTS.ASK_BRIEF}`);
    url.searchParams.append('query', query);

    const data = await fetchWithRetry<unknown>(url.toString(), {
      method: 'GET',
    });

    logger.info('api', 'askBrief success');
    return { success: true, data };
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Unknown error';
    logger.error('api', 'askBrief failed', { error: message });
    return { success: false, error: message };
  }
}

export async function getQuickRead(url: string): Promise<ApiResponse<unknown>> {
  try {
    if (!url || url.trim().length === 0) {
      throw new Error('URL cannot be empty');
    }

    // Validate URL format
    try {
      new URL(url);
    } catch {
      throw new Error('Invalid URL format');
    }

    logger.info('api', 'Calling getQuickRead', { url });

    const apiUrl = new URL(`${API_CONFIG.FUNCTIONS_URL}/getQuickRead`);
    apiUrl.searchParams.append('url', url);

    const data = await fetchWithRetry<unknown>(apiUrl.toString(), {
      method: 'GET',
    });

    logger.info('api', 'getQuickRead success');
    return { success: true, data };
  } catch (error) {
    const message = error instanceof Error ? error.message : 'Unknown error';
    logger.error('api', 'getQuickRead failed', { error: message });
    return { success: false, error: message };
  }
}



=================================================================================
FILE: src/utils/engagement.ts
=================================================================================

/**
 * Engagement tracking utilities for interest-based scoring
 * Tracks user interactions to improve article ranking
 */

import { db } from '../firebase';
import { doc, updateDoc, increment, getDoc } from 'firebase/firestore';

/**
 * Track article click event
 * @param articleId - ID of the clicked article
 */
export async function trackArticleClick(articleId: string): Promise<void> {
  try {
    const articleRef = doc(db, 'articles', articleId);
    await updateDoc(articleRef, {
      'engagementMetrics.clicks': increment(1),
    });
  } catch (error) {
    console.warn(`[Engagement] Failed to track click for article ${articleId}:`, error);
  }
}

/**
 * Track article save/bookmark event
 * @param articleId - ID of the saved article
 */
export async function trackArticleSave(articleId: string): Promise<void> {
  try {
    const articleRef = doc(db, 'articles', articleId);
    await updateDoc(articleRef, {
      'engagementMetrics.saves': increment(1),
    });
  } catch (error) {
    console.warn(`[Engagement] Failed to track save for article ${articleId}:`, error);
  }
}

/**
 * Track article share event
 * @param articleId - ID of the shared article
 */
export async function trackArticleShare(articleId: string): Promise<void> {
  try {
    const articleRef = doc(db, 'articles', articleId);
    await updateDoc(articleRef, {
      'engagementMetrics.shares': increment(1),
    });
  } catch (error) {
    console.warn(`[Engagement] Failed to track share for article ${articleId}:`, error);
  }
}

/**
 * Track time spent reading an article
 * @param articleId - ID of the article
 * @param seconds - Time spent in seconds
 */
export async function trackTimeSpent(articleId: string, seconds: number): Promise<void> {
  try {
    const articleRef = doc(db, 'articles', articleId);
    await updateDoc(articleRef, {
      'engagementMetrics.timeSpent': increment(seconds),
    });
  } catch (error) {
    console.warn(`[Engagement] Failed to track time spent for article ${articleId}:`, error);
  }
}

/**
 * Get engagement metrics for an article
 * @param articleId - ID of the article
 * @returns Engagement metrics object
 */
export async function getEngagementMetrics(articleId: string) {
  try {
    const articleRef = doc(db, 'articles', articleId);
    const snapshot = await getDoc(articleRef);
    
    if (!snapshot.exists()) {
      return { clicks: 0, saves: 0, shares: 0, timeSpent: 0 };
    }

    const data = snapshot.data();
    return data.engagementMetrics || { clicks: 0, saves: 0, shares: 0, timeSpent: 0 };
  } catch (error) {
    console.warn(`[Engagement] Failed to get metrics for article ${articleId}:`, error);
    return { clicks: 0, saves: 0, shares: 0, timeSpent: 0 };
  }
}

/**
 * Calculate engagement score (0-1) based on metrics
 * @param clicks - Number of clicks
 * @param saves - Number of saves
 * @param shares - Number of shares
 * @param timeSpent - Time spent in seconds
 * @returns Normalized engagement score
 */
export function calculateEngagementScore(
  clicks: number = 0,
  saves: number = 0,
  shares: number = 0,
  timeSpent: number = 0
): number {
  const clickScore = Math.min(clicks / 100, 1.0) * 0.4;
  const saveScore = Math.min(saves / 50, 1.0) * 0.35;
  const shareScore = Math.min(shares / 20, 1.0) * 0.15;
  const timeScore = Math.min(timeSpent / 300, 1.0) * 0.10;
  
  return clickScore + saveScore + shareScore + timeScore;
}



=================================================================================
FILE: src/utils/logger.ts
=================================================================================

/**
 * Structured Logging Utility
 * Provides consistent logging across the application with severity levels
 */

const LogLevel = {
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR',
} as const;

type LogLevelType = typeof LogLevel[keyof typeof LogLevel];

interface LogEntry {
  timestamp: string;
  level: LogLevelType;
  module: string;
  message: string;
  data?: unknown;
}

class Logger {
  private isDevelopment = import.meta.env.DEV;

  private formatEntry(entry: LogEntry): string {
    const { timestamp, level, module, message, data } = entry;
    const dataStr = data ? ` | ${JSON.stringify(data)}` : '';
    return `[${timestamp}] [${level}] [${module}] ${message}${dataStr}`;
  }

  private log(level: LogLevelType, module: string, message: string, data?: unknown) {
    const entry: LogEntry = {
      timestamp: new Date().toISOString(),
      level,
      module,
      message,
      data,
    };

    const formatted = this.formatEntry(entry);

    switch (level) {
      case 'DEBUG':
        if (this.isDevelopment) console.debug(formatted);
        break;
      case 'INFO':
        console.info(formatted);
        break;
      case 'WARN':
        console.warn(formatted);
        break;
      case 'ERROR':
        console.error(formatted);
        break;
    }

    // TODO: Send to Sentry or other error tracking service
  }

  debug(module: string, message: string, data?: unknown) {
    this.log(LogLevel.DEBUG, module, message, data);
  }

  info(module: string, message: string, data?: unknown) {
    this.log(LogLevel.INFO, module, message, data);
  }

  warn(module: string, message: string, data?: unknown) {
    this.log(LogLevel.WARN, module, message, data);
  }

  error(module: string, message: string, data?: unknown) {
    this.log(LogLevel.ERROR, module, message, data);
  }
}

export const logger = new Logger();



=================================================================================
FILE: src/utils/notifications.ts
=================================================================================

/**
 * Notifications Utility
 * Handles toast notifications, alerts, and user feedback
 */

export type NotificationType = 'success' | 'error' | 'warning' | 'info';

export interface Notification {
  id: string;
  type: NotificationType;
  title: string;
  message?: string;
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
}

/**
 * Notification manager
 */
class NotificationManager {
  private notifications: Map<string, Notification> = new Map();
  private listeners: Set<(notifications: Notification[]) => void> = new Set();

  /**
   * Subscribe to notification changes
   */
  subscribe(listener: (notifications: Notification[]) => void): () => void {
    this.listeners.add(listener);
    return () => this.listeners.delete(listener);
  }

  /**
   * Notify all listeners
   */
  private notify(): void {
    const notifications = Array.from(this.notifications.values());
    this.listeners.forEach(listener => listener(notifications));
  }

  /**
   * Add notification
   */
  add(notification: Omit<Notification, 'id'>): string {
    const id = `notification-${Date.now()}-${Math.random()}`;
    const fullNotification: Notification = {
      ...notification,
      id,
      duration: notification.duration ?? 5000,
    };

    this.notifications.set(id, fullNotification);
    this.notify();

    // Auto-remove after duration
    if (fullNotification.duration && fullNotification.duration > 0) {
      setTimeout(() => this.remove(id), fullNotification.duration);
    }

    return id;
  }

  /**
   * Remove notification
   */
  remove(id: string): void {
    this.notifications.delete(id);
    this.notify();
  }

  /**
   * Clear all notifications
   */
  clear(): void {
    this.notifications.clear();
    this.notify();
  }

  /**
   * Get all notifications
   */
  getAll(): Notification[] {
    return Array.from(this.notifications.values());
  }

  /**
   * Show success notification
   */
  success(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'success',
      title,
      message,
      duration,
    });
  }

  /**
   * Show error notification
   */
  error(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'error',
      title,
      message,
      duration: duration ?? 7000, // Longer duration for errors
    });
  }

  /**
   * Show warning notification
   */
  warning(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'warning',
      title,
      message,
      duration,
    });
  }

  /**
   * Show info notification
   */
  info(title: string, message?: string, duration?: number): string {
    return this.add({
      type: 'info',
      title,
      message,
      duration,
    });
  }
}

// Export singleton instance
export const notificationManager = new NotificationManager();

/**
 * Hook for using notifications in React
 */
export function useNotifications() {
  return {
    success: (title: string, message?: string) => notificationManager.success(title, message),
    error: (title: string, message?: string) => notificationManager.error(title, message),
    warning: (title: string, message?: string) => notificationManager.warning(title, message),
    info: (title: string, message?: string) => notificationManager.info(title, message),
    remove: (id: string) => notificationManager.remove(id),
    clear: () => notificationManager.clear(),
  };
}

/**
 * Browser notification helper
 */
export async function requestNotificationPermission(): Promise<NotificationPermission> {
  if (!('Notification' in window)) {
    console.warn('Browser does not support notifications');
    return 'denied';
  }

  if (Notification.permission === 'granted') {
    return 'granted';
  }

  if (Notification.permission !== 'denied') {
    return await Notification.requestPermission();
  }

  return 'denied';
}

/**
 * Send browser notification
 */
export function sendBrowserNotification(
  title: string,
  options?: NotificationOptions
): globalThis.Notification | null {
  if (!('Notification' in window) || Notification.permission !== 'granted') {
    return null;
  }

  return new Notification(title, options);
}

/**
 * Send article notification
 */
export function notifyNewArticle(
  title: string,
  source: string,
  _articleUrl: string
): globalThis.Notification | null {
  return sendBrowserNotification(`New article from ${source}`, {
    body: title,
    icon: '/logo.png',
    badge: '/badge.png',
    tag: 'article-notification',
    requireInteraction: false,
  });
}

/**
 * Notification preferences
 */
export interface NotificationPreferences {
  enabled: boolean;
  frequency: 'realtime' | 'daily' | 'weekly';
  categories: {
    regulatory: boolean;
    market: boolean;
    technology: boolean;
    claims: boolean;
    underwriting: boolean;
  };
  quiet_hours?: {
    enabled: boolean;
    start: string; // HH:MM
    end: string; // HH:MM
  };
}

/**
 * Check if in quiet hours
 */
export function isInQuietHours(preferences: NotificationPreferences): boolean {
  if (!preferences.quiet_hours?.enabled) {
    return false;
  }

  const now = new Date();
  const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;

  const start = preferences.quiet_hours.start;
  const end = preferences.quiet_hours.end;

  if (start < end) {
    return currentTime >= start && currentTime < end;
  } else {
    // Quiet hours span midnight
    return currentTime >= start || currentTime < end;
  }
}

/**
 * Should send notification based on preferences
 */
export function shouldSendNotification(
  preferences: NotificationPreferences,
  category: keyof NotificationPreferences['categories']
): boolean {
  if (!preferences.enabled) {
    return false;
  }

  if (!preferences.categories[category]) {
    return false;
  }

  if (isInQuietHours(preferences)) {
    return false;
  }

  return true;
}



=================================================================================
FILE: src/utils/scoring.ts
=================================================================================

/**
 * Client-side scoring utilities for dynamic article ranking
 * Calculates real-time scores as articles age to ensure proper ranking
 */

import type { Article } from '../types';

/**
 * Calculate dynamic score for an article at query time
 * This ensures scores reflect current time and engagement metrics
 * 
 * @param article - Article with original scoring data
 * @returns Updated score reflecting current recency and engagement
 */
export function calculateDynamicArticleScore(article: Article): number {
  const now = Date.now();
  const pubDate = article.publishedAt ? new Date(article.publishedAt).getTime() : now;
  const ageHours = Math.max(0, (now - pubDate) / (1000 * 60 * 60));
  const ageDays = ageHours / 24;

  // Classify content type for appropriate decay curve
  const isCatastrophe = !!article.stormName || (article.impactBreakdown?.catastrophe ?? 0) > 50;
  const isRegulatory = article.regulatory || (article.tags?.regulations && article.tags.regulations.length > 0);
  const isEvergreen = article.isEvergreen || (article.tags?.trends?.length ?? 0) > 0;

  // DYNAMIC RECENCY DECAY: Different curves for different content types
  let recencyScore: number;
  
  if (isCatastrophe) {
    // Catastrophe news: High relevance for 72 hours, then gradual decay
    recencyScore = Math.max(0, 100 * Math.exp(-Math.pow(ageHours, 1.2) / 100));
  } else if (isRegulatory) {
    // Regulatory news: High relevance for 48 hours, then gradual decay
    recencyScore = Math.max(0, 100 * Math.exp(-Math.pow(ageHours, 1.1) / 80));
  } else if (isEvergreen) {
    // Evergreen content: Slow decay, maintains relevance for weeks
    recencyScore = Math.max(0, 100 * Math.exp(-ageHours / 240));
  } else {
    // General news: Fast decay, becomes less relevant quickly
    recencyScore = Math.max(0, 100 * Math.exp(-ageHours / 24));
  }

  // Get base impact score
  const impactBreakdown = article.impactBreakdown || {
    market: (article.impactScore || 50) * 0.25,
    regulatory: (article.impactScore || 50) * 0.25,
    catastrophe: (article.impactScore || 50) * 0.25,
    technology: (article.impactScore || 50) * 0.25,
  };

  // Weight different impact dimensions
  const weightedImpact =
    (impactBreakdown.market || 0) * 0.30 +
    (impactBreakdown.regulatory || 0) * 0.35 +
    (impactBreakdown.catastrophe || 0) * 0.25 +
    (impactBreakdown.technology || 0) * 0.10;

  // Calculate engagement boost
  let engagementBoost = 1.0;
  if (article.engagementMetrics) {
    const { clicks = 0, saves = 0, shares = 0, timeSpent = 0 } = article.engagementMetrics;
    const clickScore = Math.min(clicks / 100, 1.0) * 0.4;
    const saveScore = Math.min(saves / 50, 1.0) * 0.35;
    const shareScore = Math.min(shares / 20, 1.0) * 0.15;
    const timeScore = Math.min(timeSpent / 300, 1.0) * 0.10;
    const normalizedEngagement = clickScore + saveScore + shareScore + timeScore;
    engagementBoost = 1.0 + (normalizedEngagement * 0.15);
  }

  // Apply multipliers
  const riskPulseMultiplier =
    article.riskPulse === 'HIGH' ? 1.25 :
    article.riskPulse === 'MEDIUM' ? 1.10 :
    1.0;

  const regulatoryBoost = isRegulatory ? 1.20 : 1.0;

  const catPerils = ['Hurricane', 'Wildfire', 'Earthquake', 'Flood', 'Tornado', 'Severe Weather', 'Hail', 'Winter Storm', 'Convective Storm'];
  const hasCatPeril = article.tags?.perils?.some(p =>
    catPerils.some(cat => p.toLowerCase().includes(cat.toLowerCase()))
  ) || false;
  const catastropheBoost = article.stormName ? 1.30 : (hasCatPeril ? 1.15 : 1.0);

  const highValueTrends = [
    'Climate Risk', 'Social Inflation', 'GenAI', 'Litigation Funding',
    'Tort Reform', 'Rate Adequacy', 'Reinsurance', 'Capacity Constraints',
    'Nuclear Verdicts', 'Assignment of Benefits', 'Parametric Insurance'
  ];
  const hasHighValueTrend = article.tags?.trends?.some(t =>
    highValueTrends.some(hvt => t.toLowerCase().includes(hvt.toLowerCase()))
  ) || false;
  const trendBoost = hasHighValueTrend ? 1.10 : 1.0;

  const lobCount = article.tags?.lob?.length || 0;
  const lobBoost = lobCount >= 3 ? 1.08 : (lobCount >= 2 ? 1.04 : 1.0);

  // Dynamic weight adjustment based on age
  let recencyWeight = 0.35;
  let impactWeight = 0.65;
  
  if (ageDays < 1) {
    recencyWeight = 0.50;
    impactWeight = 0.50;
  } else if (ageDays > 7) {
    recencyWeight = 0.25;
    impactWeight = 0.75;
  }

  // Calculate final score
  const baseScore = (recencyScore * recencyWeight) + (weightedImpact * impactWeight);
  const dynamicScore = Math.min(100,
    baseScore *
    engagementBoost *
    riskPulseMultiplier *
    regulatoryBoost *
    catastropheBoost *
    trendBoost *
    lobBoost
  );

  return Math.round(dynamicScore * 10) / 10;
}

/**
 * Sort articles by dynamic score, recalculating scores in real-time
 * This ensures older articles naturally move down the feed
 * 
 * @param articles - Array of articles to sort
 * @returns Sorted articles with updated dynamic scores
 */
export function sortByDynamicScore(articles: Article[]): Article[] {
  return articles
    .map(article => ({
      ...article,
      dynamicScore: calculateDynamicArticleScore(article),
    }))
    .sort((a, b) => (b.dynamicScore || 0) - (a.dynamicScore || 0));
}

/**
 * Sort articles by recency (published date)
 * 
 * @param articles - Array of articles to sort
 * @returns Sorted articles by published date (newest first)
 */
export function sortByRecency(articles: Article[]): Article[] {
  return articles.sort((a, b) => {
    const getTime = (date: any) => {
      if (!date) return 0;
      if (date instanceof Date) return date.getTime();
      if (typeof date === 'object' && 'toDate' in date) return date.toDate().getTime();
      return new Date(date).getTime();
    };
    return getTime(b.publishedAt) - getTime(a.publishedAt);
  });
}



=================================================================================
FILE: src/utils/validation.ts
=================================================================================

/**
 * Validation Utilities
 * Type-safe validation helpers for common patterns
 */

export function isValidUrl(url: string): boolean {
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
}

export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

export function sanitizeHtml(html: string): string {
  const div = document.createElement('div');
  div.textContent = html;
  return div.innerHTML;
}

export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.slice(0, maxLength - 3) + '...';
}

export function formatDate(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  return d.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
}

export function formatTime(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  return d.toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
  });
}

export function getTimeAgo(date: Date | string): string {
  const d = typeof date === 'string' ? new Date(date) : date;
  const now = new Date();
  const seconds = Math.floor((now.getTime() - d.getTime()) / 1000);

  if (seconds < 60) return 'just now';
  if (seconds < 3600) return `${Math.floor(seconds / 60)}m ago`;
  if (seconds < 86400) return `${Math.floor(seconds / 3600)}h ago`;
  if (seconds < 604800) return `${Math.floor(seconds / 86400)}d ago`;
  
  return formatDate(d);
}



=================================================================================
FILE: src/utils/errorBoundary.tsx
=================================================================================

/**
 * Error Boundary Component
 * Catches React errors and displays fallback UI with recovery options
 * Implements error logging, recovery strategies, and user-friendly messaging
 */

import React from 'react';
import type { ReactNode, ReactElement } from 'react';
import { AlertTriangle, RefreshCw, Home } from 'lucide-react';
import { logger } from './logger';

interface Props {
  children: ReactNode;
  fallback?: ReactElement;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorCount: number;
  showDetails: boolean;
}

export class ErrorBoundary extends React.Component<Props, State> {
  private resetTimeout: ReturnType<typeof setTimeout> | null = null;

  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null, errorCount: 0, showDetails: false };
  }

  static getDerivedStateFromError(error: Error): Partial<State> {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    const errorCount = this.state.errorCount + 1;
    this.setState({ errorCount });

    // Log error with context
    logger.error('ErrorBoundary', 'React component error', {
      error: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      errorCount,
      timestamp: new Date().toISOString(),
    });

    // Call custom error handler if provided
    this.props.onError?.(error, errorInfo);

    // Auto-reset after 30 seconds if error count is low
    if (errorCount < 3) {
      this.resetTimeout = setTimeout(() => {
        this.resetError();
      }, 30000);
    }
  }

  componentWillUnmount() {
    if (this.resetTimeout) {
      clearTimeout(this.resetTimeout);
    }
  }

  resetError = () => {
    this.setState({ hasError: false, error: null, showDetails: false });
  };

  goHome = () => {
    window.location.href = '/';
  };

  toggleDetails = () => {
    this.setState(prev => ({ showDetails: !prev.showDetails }));
  };

  render() {
    if (this.state.hasError) {
      return (
        this.props.fallback || (
          <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-white via-[#F9FBFF]/30 to-[#E8F2FF]/20 p-4">
            <div className="max-w-md w-full">
              {/* Error Icon */}
              <div className="flex justify-center mb-6">
                <div className="p-4 rounded-full bg-[#FEE2E2] border border-[#EF4444]/30">
                  <AlertTriangle size={32} className="text-[#EF4444]" />
                </div>
              </div>

              {/* Error Message */}
              <h1 className="text-2xl font-bold text-[#0F172A] mb-2 text-center">
                Something went wrong
              </h1>
              <p className="text-[#64748B] mb-6 text-center text-sm">
                {this.state.error?.message || 'An unexpected error occurred'}
              </p>

              {/* Error Details (if enabled) */}
              {this.state.showDetails && this.state.error && (
                <div className="mb-6 p-4 bg-[#F9FBFF] rounded-lg border border-[#C7D2E1]/30 max-h-40 overflow-y-auto">
                  <p className="text-xs font-mono text-[#64748B] whitespace-pre-wrap break-words">
                    {this.state.error.stack}
                  </p>
                </div>
              )}

              {/* Error Count Warning */}
              {this.state.errorCount >= 3 && (
                <div className="mb-6 p-3 bg-[#FEF3C7] rounded-lg border border-[#F59E0B]/30">
                  <p className="text-xs text-[#92400E]">
                    Multiple errors detected. Please clear your browser cache or try a different browser.
                  </p>
                </div>
              )}

              {/* Action Buttons */}
              <div className="space-y-3">
                <button
                  onClick={this.resetError}
                  className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-[#5AA6FF] text-white rounded-lg hover:bg-[#4A96EF] transition-colors font-medium"
                  aria-label="Try again"
                >
                  <RefreshCw size={18} />
                  Try Again
                </button>
                <button
                  onClick={this.goHome}
                  className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-[#E8F2FF] text-[#5AA6FF] rounded-lg hover:bg-[#D4E5FF] transition-colors font-medium"
                  aria-label="Go to home page"
                >
                  <Home size={18} />
                  Go Home
                </button>
                <button
                  onClick={this.toggleDetails}
                  className="w-full text-xs text-[#64748B] hover:text-[#5AA6FF] transition-colors py-2"
                  aria-label={this.state.showDetails ? 'Hide error details' : 'Show error details'}
                >
                  {this.state.showDetails ? 'Hide' : 'Show'} Error Details
                </button>
              </div>
            </div>
          </div>
        )
      );
    }

    return this.props.children;
  }
}



=================================================================================
FILE: src/design/tokens.ts
=================================================================================

/**
 * Design System Tokens
 * Aurora-inspired liquid glass theme with blue-violet-lilac gradient
 */

export const colors = {
  // Aurora Accent Set
  aurora: {
    blue: '#5AA6FF',
    violet: '#8B7CFF',
    lilac: '#B08CFF',
  },

  // Neutral Colors (Cool Whites)
  neutral: {
    white: '#FFFFFF',
    50: '#F9FBFF',
    100: '#F0F7FF',
    200: '#E8F2FF',
    300: '#D4DFE8',
    400: '#C7D2E1',
    500: '#94A3B8',
    600: '#64748B',
    700: '#475569',
    800: '#334155',
    900: '#0F172A',
  },

  // Semantic Colors
  semantic: {
    success: '#06B6D4',
    warning: '#F59E0B',
    danger: '#EF4444',
    info: '#5AA6FF',
  },

  // Insurance-Specific
  insurance: {
    riskHigh: '#5AA6FF',
    riskMedium: '#8B7CFF',
    riskLow: '#06B6D4',
    regulatory: '#5AA6FF',
    catastrophe: '#8B7CFF',
    market: '#5AA6FF',
    technology: '#B08CFF',
  },
} as const;

export const typography = {
  fontFamily: {
    system: "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
  },
  fontSize: {
    xs: '0.75rem',
    sm: '0.875rem',
    base: '1rem',
    lg: '1.125rem',
    xl: '1.25rem',
    '2xl': '1.5rem',
    '3xl': '1.875rem',
    '4xl': '2.25rem',
  },
  fontWeight: {
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900,
  },
  lineHeight: {
    tight: 1.2,
    normal: 1.5,
    relaxed: 1.6,
    loose: 1.8,
  },
  letterSpacing: {
    tight: '-0.025em',
    normal: '-0.01em',
    wide: '0.01em',
  },
} as const;

export const spacing = {
  xs: '0.25rem',
  sm: '0.5rem',
  md: '1rem',
  lg: '1.5rem',
  xl: '2rem',
  '2xl': '3rem',
  '3xl': '4rem',
  '4xl': '6rem',
} as const;

export const radius = {
  sm: '0.375rem',
  md: '0.5rem',
  lg: '0.75rem',
  xl: '1rem',
  '2xl': '1.5rem',
  '3xl': '2rem',
  full: '9999px',
} as const;

export const shadows = {
  xs: '0 1px 2px 0 rgb(0 0 0 / 0.04)',
  sm: '0 2px 4px 0 rgb(0 0 0 / 0.06)',
  md: '0 4px 8px -1px rgb(0 0 0 / 0.09), 0 2px 4px -2px rgb(0 0 0 / 0.06)',
  lg: '0 12px 20px -3px rgb(0 0 0 / 0.12), 0 4px 8px -4px rgb(0 0 0 / 0.07)',
  xl: '0 24px 32px -5px rgb(0 0 0 / 0.14), 0 8px 12px -6px rgb(0 0 0 / 0.08)',
  '2xl': '0 28px 56px -12px rgb(0 0 0 / 0.18)',
  inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.06)',
  glow: '0 0 0 1px hsla(220, 90%, 66%, .35), 0 0 18px hsla(220, 90%, 66%, .35)',
} as const;

export const transitions = {
  fast: '120ms cubic-bezier(0.4, 0, 0.2, 1)',
  base: '200ms cubic-bezier(0.4, 0, 0.2, 1)',
  slow: '300ms cubic-bezier(0.4, 0, 0.2, 1)',
  slower: '500ms cubic-bezier(0.4, 0, 0.2, 1)',
  spring: '200ms cubic-bezier(0.34, 1.56, 0.64, 1)',
} as const;

export const blur = {
  sm: 'blur(8px)',
  md: 'blur(12px)',
  lg: 'blur(16px)',
  xl: 'blur(20px)',
  '2xl': 'blur(24px)',
} as const;

export const zIndex = {
  hide: -1,
  auto: 'auto',
  base: 0,
  dropdown: 1000,
  sticky: 1020,
  fixed: 1030,
  backdrop: 1040,
  modal: 1050,
  popover: 1060,
  tooltip: 1070,
} as const;

export const breakpoints = {
  xs: '320px',
  sm: '640px',
  md: '768px',
  lg: '1024px',
  xl: '1280px',
  '2xl': '1536px',
} as const;

// Component-specific tokens
export const components = {
  button: {
    height: {
      sm: '32px',
      md: '40px',
      lg: '48px',
    },
    padding: {
      sm: '0.5rem 0.75rem',
      md: '0.625rem 1rem',
      lg: '0.75rem 1.5rem',
    },
  },
  input: {
    height: '40px',
    padding: '0.625rem 1rem',
    borderRadius: '0.5rem',
  },
  card: {
    padding: '1rem',
    borderRadius: '1rem',
  },
  tag: {
    padding: '0.375rem 0.75rem',
    borderRadius: '9999px',
    fontSize: '0.75rem',
  },
} as const;

// Glass effect presets - CRISP & SHARP
export const glass = {
  light: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.92) 0%, rgba(249,251,255,0.88) 100%)',
    backdropFilter: 'blur(8px) saturate(160%)',
    border: '1px solid rgba(90,166,255,0.14)',
  },
  standard: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(249,251,255,0.92) 100%)',
    backdropFilter: 'blur(12px) saturate(180%) brightness(1.08)',
    border: '1px solid rgba(90,166,255,0.18)',
  },
  premium: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.97) 0%, rgba(249,251,255,0.94) 100%)',
    backdropFilter: 'blur(16px) saturate(200%) brightness(1.12)',
    border: '1px solid rgba(90,166,255,0.24)',
  },
  ultra: {
    background: 'linear-gradient(135deg, rgba(255,255,255,0.98) 0%, rgba(249,251,255,0.96) 100%)',
    backdropFilter: 'blur(20px) saturate(210%) brightness(1.15)',
    border: '1px solid rgba(90,166,255,0.28)',
  },
} as const;

// Gradient presets
export const gradients = {
  aurora: 'linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%)',
  auroraAccent: 'linear-gradient(135deg, #5AA6FF 0%, #B08CFF 100%)',
  success: 'linear-gradient(135deg, #06B6D4 0%, #14B8A6 100%)',
  subtle: 'linear-gradient(135deg, #F9FBFF 0%, #F0F7FF 100%)',
} as const;

export default {
  colors,
  typography,
  spacing,
  radius,
  shadows,
  transitions,
  blur,
  zIndex,
  breakpoints,
  components,
  glass,
  gradients,
} as const;



=================================================================================
FILE: tsconfig.json
=================================================================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


=================================================================================
FILE: vite.config.ts
=================================================================================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwind from '@tailwindcss/vite'

export default defineConfig({
  plugins: [react(), tailwind()],
  build: {
    // Optimize chunk size for production
    chunkSizeWarningLimit: 1000,
    rollupOptions: {
      output: {
        // Manual chunk splitting for better caching
        manualChunks: {
          'firebase': ['firebase/firestore', 'firebase/app'],
          'react-vendor': ['react', 'react-dom'],
        },
      },
    },
    // Improve build performance
    minify: 'terser',
  },
  // Optimize for production
  define: {
    'process.env.NODE_ENV': '"production"',
  },
})

=================================================================================
FILE: src/index.css
=================================================================================

@import "tailwindcss";

/* Modern AI-Inspired Light Theme Design System */

:root {
  /* Typography - Premium System Font Stack */
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  line-height: 1.6;
  font-weight: 400;
  letter-spacing: -0.01em;

  /* Aurora Accent Set - AI-Inspired Blue → Violet → Lilac Gradient */
  --color-aurora-blue: #5AA6FF;
  --color-aurora-violet: #8B7CFF;
  --color-aurora-lilac: #B08CFF;

  /* Modern Color Palette - Apple Liquid Glass Theme with Aurora Base */
  --color-primary: #5AA6FF; /* Aurora blue primary */
  --color-primary-hover: #4A96EF;
  --color-primary-light: #E8F2FF;
  --color-primary-ultra-light: #F5F9FF;
  --color-secondary: #8B7CFF; /* Aurora violet accent */
  --color-secondary-hover: #7B6CEF;
  --color-accent: #B08CFF; /* Aurora lilac for gradients */
  --color-accent-light: #F0E8FF;
  --color-success: #06B6D4; /* Cyan for success */
  --color-warning: #F59E0B; /* Amber for warning */
  --color-danger: #EF4444; /* Red for danger */

  /* Insurance-Specific Colors - Aurora-Based */
  --color-risk-high: #5AA6FF; /* High risk - Aurora blue */
  --color-risk-medium: #8B7CFF; /* Medium risk - Aurora violet */
  --color-risk-low: #06B6D4; /* Low risk - Cyan */
  --color-regulatory: #5AA6FF; /* Regulatory - Aurora blue */
  --color-catastrophe: #8B7CFF; /* Catastrophe - Aurora violet */
  --color-market: #5AA6FF; /* Market - Aurora blue */
  --color-technology: #B08CFF; /* Technology - Aurora lilac */

  /* Neutral Colors - Apple Liquid Glass with Cool Whites */
  --color-bg-primary: #FFFFFF;
  --color-bg-secondary: #F9FBFF; /* Subtle cool white */
  --color-bg-tertiary: #F0F7FF; /* Light blue tint */
  --color-bg-quaternary: #E8F2FF; /* Lighter blue tint */
  --color-border: #C7D2E1; /* Cool neutral border */
  --color-border-light: #E8F2FF; /* Light border */
  --color-border-subtle: #D4DFE8; /* Subtle border */

  /* Text Colors - Refined Hierarchy with Better Contrast */
  --color-text-primary: #0F172A;
  --color-text-secondary: #5AA6FF;
  --color-text-tertiary: #5A6B7F;
  --color-text-quaternary: #8A96A8;

  /* Shadows - Premium Depth */
  --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.04);
  --shadow-sm: 0 2px 4px 0 rgb(0 0 0 / 0.06);
  --shadow-md: 0 4px 8px -1px rgb(0 0 0 / 0.09), 0 2px 4px -2px rgb(0 0 0 / 0.06);
  --shadow-lg: 0 12px 20px -3px rgb(0 0 0 / 0.12), 0 4px 8px -4px rgb(0 0 0 / 0.07);
  --shadow-xl: 0 24px 32px -5px rgb(0 0 0 / 0.14), 0 8px 12px -6px rgb(0 0 0 / 0.08);
  --shadow-2xl: 0 28px 56px -12px rgb(0 0 0 / 0.18);
  --shadow-inner: inset 0 2px 4px 0 rgb(0 0 0 / 0.06);

  /* Spacing */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;

  /* Border Radius - Modern Curves */
  --radius-sm: 0.375rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;
  --radius-2xl: 1.5rem;

  /* Transitions - Smooth & Responsive */
  --transition-fast: 150ms cubic-bezier(0.34, 1.56, 0.64, 1);
  --transition-base: 250ms cubic-bezier(0.34, 1.56, 0.64, 1);
  --transition-slow: 350ms cubic-bezier(0.34, 1.56, 0.64, 1);
  --transition-slower: 500ms cubic-bezier(0.34, 1.56, 0.64, 1);

  /* Backdrop Blur - Optimized for crispness and clarity */
  --backdrop-blur: blur(10px);
  --backdrop-blur-sm: blur(6px);
  --backdrop-blur-lg: blur(16px);

  /* Enhanced Shadow Hierarchy - Premium Depth */
  --shadow-glow-sm: 0 0 8px rgba(90, 166, 255, 0.06);
  --shadow-glow-md: 0 0 16px rgba(90, 166, 255, 0.10);
  --shadow-glow-lg: 0 0 28px rgba(90, 166, 255, 0.14);
  --shadow-glow-xl: 0 0 40px rgba(90, 166, 255, 0.18);

  /* Font rendering - Crisp and sharp */
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;

  /* Color scheme */
  color-scheme: light;
}

* {
  box-sizing: border-box;
}

html {
  width: 100%;
  overflow-x: hidden;
}

body {
  margin: 0;
  padding: 0;
  width: 100%;
  min-width: 320px;
  min-height: 100vh;
  max-width: 100vw;
  overflow-x: hidden;
  background-color: var(--color-bg-secondary);
  color: var(--color-text-primary);
  -webkit-user-select: none;
  -webkit-touch-callout: none;
}

#root {
  min-height: 100vh;
  width: 100%;
  max-width: 100vw;
  overflow-x: hidden;
}

/* Typography Styles - Enhanced Hierarchy */
h1, h2, h3, h4, h5, h6 {
  font-weight: 700;
  line-height: 1.25;
  color: var(--color-text-primary);
  margin: 0;
}

h1 {
  font-size: 2.25rem;
  font-weight: 900;
  letter-spacing: -0.03em;
  line-height: 1.15;
  margin-bottom: 0.5rem;
}

h2 {
  font-size: 1.875rem;
  font-weight: 800;
  letter-spacing: -0.025em;
  line-height: 1.2;
  margin-bottom: 0.75rem;
}

h3 {
  font-size: 1.5rem;
  font-weight: 700;
  letter-spacing: -0.02em;
  line-height: 1.25;
  margin-bottom: 0.5rem;
}

h4 {
  font-size: 1.125rem;
  font-weight: 700;
  letter-spacing: -0.015em;
  line-height: 1.3;
  margin-bottom: 0.375rem;
}

h5 {
  font-size: 1rem;
  font-weight: 700;
  letter-spacing: -0.01em;
  line-height: 1.4;
  margin-bottom: 0.25rem;
}

h6 {
  font-size: 0.875rem;
  font-weight: 700;
  letter-spacing: 0em;
  line-height: 1.5;
  margin-bottom: 0.25rem;
}

/* Paragraph Styles - Improved Readability */
p {
  margin: 0;
  line-height: 1.65;
  color: var(--color-text-primary);
}

p + p {
  margin-top: 1rem;
}

/* Small Text - Refined */
small, .text-sm {
  font-size: 0.875rem;
  line-height: 1.5;
  color: var(--color-text-tertiary);
}

/* Extra Small Text */
.text-xs {
  font-size: 0.75rem;
  line-height: 1.4;
  color: var(--color-text-quaternary);
  letter-spacing: 0.01em;
}

a {
  color: var(--color-primary);
  text-decoration: underline;
  text-decoration-thickness: 1.5px;
  text-underline-offset: 3px;
  transition: all var(--transition-fast);
  font-weight: 500;
}

a:hover {
  color: var(--color-primary-hover);
  text-decoration-thickness: 2px;
}

/* Button Base Styles - Enhanced */
button {
  font-family: inherit;
  font-size: 0.875rem;
  font-weight: 700;
  line-height: 1.5;
  letter-spacing: -0.01em;
  cursor: pointer;
  border: none;
  border-radius: var(--radius-md);
  padding: 0.625rem 1.25rem;
  transition: all var(--transition-base);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  position: relative;
  overflow: hidden;
  will-change: transform, box-shadow;
}

button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  pointer-events: none;
}

button:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: var(--radius-md);
}

/* Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: transparent;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: transparent;
}

/* Selection */
::selection {
  background-color: var(--color-primary-light);
  color: var(--color-text-primary);
}

/* Focus visible for accessibility */
:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Mobile Optimization - Premium Touch Experience */
@media (max-width: 640px) {
  :root {
    font-size: 14px;
  }

  html, body, #root {
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
  }

  body {
    padding-bottom: env(safe-area-inset-bottom);
    padding-left: env(safe-area-inset-left);
    padding-right: env(safe-area-inset-right);
  }

  h1 {
    font-size: 1.75rem;
    font-weight: 900;
    margin-bottom: 0.375rem;
  }

  h2 {
    font-size: 1.5rem;
    font-weight: 800;
    margin-bottom: 0.5rem;
  }

  h3 {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 0.375rem;
  }

  /* Touch-friendly button sizing - 48px minimum */
  button {
    min-height: 48px;
    min-width: 48px;
    padding: 0.875rem 1.25rem;
    font-weight: 600;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    touch-action: manipulation;
    border-radius: 0.75rem;
  }

  /* Touch-friendly input sizing */
  input,
  textarea,
  select {
    min-height: 48px;
    font-size: 16px; /* Prevents zoom on iOS */
    padding: 0.875rem 1rem;
    -webkit-appearance: none;
    appearance: none;
    touch-action: manipulation;
    border-radius: 0.75rem;
  }

  /* Improved tap targets */
  a {
    min-height: 48px;
    display: inline-flex;
    align-items: center;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }

  /* Optimize spacing for mobile */
  main {
    padding-left: 1rem;
    padding-right: 1rem;
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
  }

  /* Enhanced mobile card spacing */
  article {
    margin-bottom: 0.75rem;
    border-radius: 1.25rem;
    width: 100%;
    max-width: 100%;
    overflow: hidden;
    padding: 1rem;
  }

  /* Mobile-optimized grid */
  .grid {
    gap: 1rem;
    width: 100%;
    max-width: 100%;
  }

  /* Reduce animation on mobile for performance */
  @media (prefers-reduced-motion: no-preference) {
    article {
      animation: slideInUp 0.3s ease-out;
    }
  }

  /* Mobile-specific glass effects */
  .glass,
  .liquid-glass,
  .liquid-glass-premium {
    border-radius: 1.25rem;
  }

  /* Optimize touch interactions */
  button:active {
    transform: scale(0.95);
  }

  /* Mobile-specific card improvements */
  .card-premium,
  .card-premium-elevated {
    border-radius: 1rem;
    padding: 1.25rem;
    width: 100%;
    max-width: 100%;
    overflow: hidden;
  }

  /* Improve readability on small screens */
  p {
    line-height: 1.7;
    word-break: break-word;
    overflow-wrap: break-word;
    font-size: 0.95rem;
  }

  /* Optimize badge sizing for mobile */
  .tag-pill {
    padding: 0.375rem 0.75rem;
    font-size: 0.7rem;
    min-height: 28px;
  }

  /* Better spacing for mobile lists */
  ul, ol {
    margin-left: 1rem;
    padding-right: 1rem;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  li {
    margin-bottom: 0.5rem;
  }

  /* Optimize header for mobile */
  header {
    padding: 0.75rem 0;
    width: 100%;
    max-width: 100vw;
    overflow-x: hidden;
  }

  /* Improve scrolling performance */
  * {
    -webkit-overflow-scrolling: touch;
  }

  /* Prevent horizontal scrolling on all elements */
  * {
    max-width: 100%;
    overflow-x: hidden;
  }

  /* Optimize images for mobile */
  img {
    max-width: 100%;
    height: auto;
    display: block;
    border-radius: 0.75rem;
  }

  /* Optimize containers */
  .container, [class*="container"] {
    width: 100%;
    max-width: 100%;
    padding-left: 1rem;
    padding-right: 1rem;
    margin-left: 0;
    margin-right: 0;
  }

  /* Reduce animations for better performance */
  .animate-slideInUp,
  .animate-slideInDown,
  .animate-slideInLeft,
  .animate-slideInRight,
  .animate-scaleIn,
  .animate-fadeInScale {
    animation-duration: 0.2s;
  }

  /* Disable hover effects on touch devices */
  @media (hover: none) {
    button:hover,
    a:hover,
    .card-premium:hover,
    .card-premium-elevated:hover {
      transform: none;
      box-shadow: none;
    }
  }
}

/* Tablet Optimization */
@media (min-width: 641px) and (max-width: 1024px) {
  :root {
    font-size: 15px;
  }
}

/* Large Screen Optimization */
@media (min-width: 1025px) {
  :root {
    font-size: 16px;
  }
}

/* Landscape Mobile */
@media (max-height: 500px) and (orientation: landscape) {
  header {
    padding: 0.5rem 0;
  }

  main {
    padding-top: 1rem;
    padding-bottom: 1rem;
  }
}

/* High DPI Screens */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  /* Thinner borders for high DPI */
  border {
    border-width: 0.5px;
  }
}

/* Premium Animations & Transitions */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(12px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-12px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-12px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(12px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes pulse-subtle {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes shimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-8px);
  }
}

@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 0 0 rgba(90, 166, 255, 0.4);
  }
  50% {
    box-shadow: 0 0 0 8px rgba(90, 166, 255, 0);
  }
}

/* Enhanced Micro-Interactions */
@keyframes cardHoverLift {
  from {
    transform: translateY(0px);
  }
  to {
    transform: translateY(-4px);
  }
}

@keyframes smoothPulse {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.85;
    transform: scale(1.02);
  }
}

@keyframes shimmerGradient {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.92);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes borderGlow {
  0%, 100% {
    border-color: rgba(90, 166, 255, 0.3);
    box-shadow: 0 0 0 0 rgba(90, 166, 255, 0.1);
  }
  50% {
    border-color: rgba(90, 166, 255, 0.6);
    box-shadow: 0 0 12px rgba(90, 166, 255, 0.2);
  }
}

@keyframes aiGradientShift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

@keyframes subtleFloat {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-2px);
  }
}

@keyframes enhancedCardHover {
  from {
    transform: translateY(0px);
    box-shadow: 0 12px 32px -6px rgba(0, 0, 0, 0.1);
  }
  to {
    transform: translateY(-8px);
    box-shadow: 0 28px 56px -12px rgba(0, 0, 0, 0.18);
  }
}

@keyframes smoothScale {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.02);
  }
}

/* Liquid Glass Animations */
@keyframes liquidGlassShimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

@keyframes liquidGlassGlow {
  0%, 100% {
    box-shadow:
      0 12px 48px 0 rgba(90, 166, 255, 0.15),
      inset 0 1px 2px 0 rgba(255, 255, 255, 0.6);
  }
  50% {
    box-shadow:
      0 16px 64px 0 rgba(139, 124, 255, 0.2),
      inset 0 1px 2px 0 rgba(255, 255, 255, 0.7);
  }
}

/* Premium Glow Effects - AI Polished with Aurora Gradient */
@keyframes premiumGlow {
  0%, 100% {
    box-shadow:
      0 0 20px rgba(90, 166, 255, 0.15),
      0 0 40px rgba(139, 124, 255, 0.08),
      0 0 60px rgba(176, 140, 255, 0.04),
      inset 0 1px 2px rgba(255, 255, 255, 0.5);
  }
  50% {
    box-shadow:
      0 0 30px rgba(90, 166, 255, 0.25),
      0 0 60px rgba(139, 124, 255, 0.12),
      0 0 90px rgba(176, 140, 255, 0.08),
      inset 0 1px 2px rgba(255, 255, 255, 0.6);
  }
}

@keyframes subtleGlowPulse {
  0%, 100% {
    box-shadow:
      0 0 15px rgba(90, 166, 255, 0.1),
      0 0 30px rgba(139, 124, 255, 0.05),
      0 0 45px rgba(176, 140, 255, 0.02);
  }
  50% {
    box-shadow:
      0 0 25px rgba(90, 166, 255, 0.15),
      0 0 45px rgba(139, 124, 255, 0.08),
      0 0 65px rgba(176, 140, 255, 0.04);
  }
}

/* Enhanced Glow for Premium Cards - Aurora Theme */
@keyframes enhancedPremiumGlow {
  0%, 100% {
    box-shadow:
      0 0 20px rgba(90, 166, 255, 0.2),
      0 0 40px rgba(139, 124, 255, 0.1),
      0 0 60px rgba(176, 140, 255, 0.05),
      inset 0 1px 2px rgba(255, 255, 255, 0.6);
  }
  50% {
    box-shadow:
      0 0 35px rgba(90, 166, 255, 0.3),
      0 0 70px rgba(139, 124, 255, 0.15),
      0 0 100px rgba(176, 140, 255, 0.08),
      inset 0 1px 2px rgba(255, 255, 255, 0.7);
  }
}

/* Soft Glow for Subtle Elements - Aurora Theme */
@keyframes softGlow {
  0%, 100% {
    box-shadow:
      0 0 10px rgba(90, 166, 255, 0.08),
      0 0 20px rgba(139, 124, 255, 0.04);
  }
  50% {
    box-shadow:
      0 0 15px rgba(90, 166, 255, 0.12),
      0 0 30px rgba(139, 124, 255, 0.06);
  }
}

/* Deep Glow for High-Impact Elements - Aurora Theme */
@keyframes deepGlow {
  0%, 100% {
    box-shadow:
      0 0 25px rgba(90, 166, 255, 0.25),
      0 0 50px rgba(139, 124, 255, 0.12),
      0 0 75px rgba(176, 140, 255, 0.06),
      inset 0 1px 2px rgba(255, 255, 255, 0.5);
  }
  50% {
    box-shadow:
      0 0 40px rgba(90, 166, 255, 0.35),
      0 0 80px rgba(139, 124, 255, 0.18),
      0 0 120px rgba(176, 140, 255, 0.1),
      inset 0 1px 2px rgba(255, 255, 255, 0.6);
  }
}

@keyframes cardGradientShift {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

@keyframes iconGlow {
  0%, 100% {
    filter: drop-shadow(0 0 8px rgba(90, 166, 255, 0.3)) drop-shadow(0 0 4px rgba(139, 124, 255, 0.2));
  }
  50% {
    filter: drop-shadow(0 0 16px rgba(90, 166, 255, 0.5)) drop-shadow(0 0 8px rgba(139, 124, 255, 0.3));
  }
}

@keyframes cardLiquidLift {
  from {
    transform: translateY(0px) scale(1);
    opacity: 0.95;
  }
  to {
    transform: translateY(-12px) scale(1.01);
    opacity: 1;
  }
}

@keyframes subtleRotate {
  0%, 100% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(1deg);
  }
}

@keyframes pulseGlow {
  0%, 100% {
    box-shadow: 0 0 0 0 rgba(90, 166, 255, 0.4);
  }
  50% {
    box-shadow: 0 0 0 12px rgba(90, 166, 255, 0);
  }
}

@keyframes slideInWithBounce {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  60% {
    opacity: 1;
    transform: translateY(-4px);
  }
  80% {
    transform: translateY(2px);
  }
  100% {
    transform: translateY(0px);
  }
}

@keyframes fadeInWithScale {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes rotateIn {
  from {
    opacity: 0;
    transform: rotate(-10deg) scale(0.9);
  }
  to {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }
}

@keyframes expandIn {
  from {
    opacity: 0;
    transform: scaleX(0.8) scaleY(0.9);
  }
  to {
    opacity: 1;
    transform: scaleX(1) scaleY(1);
  }
}

/* Apply animations to key elements */
article {
  animation: slideInUp 0.4s ease-out;
}

section {
  animation: fadeIn 0.3s ease-out;
}

header {
  animation: slideInDown 0.3s ease-out;
}

/* Animation utility classes */
.animate-slideInUp {
  animation: slideInUp 0.3s ease-out;
}

.animate-slideInDown {
  animation: slideInDown 0.3s ease-out;
}

.animate-slideInLeft {
  animation: slideInLeft 0.3s ease-out;
}

.animate-slideInRight {
  animation: slideInRight 0.3s ease-out;
}

.animate-scaleIn {
  animation: scaleIn 0.3s ease-out;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite;
}

.animate-cardHoverLift {
  animation: cardHoverLift 0.3s ease-out forwards;
}

.animate-smoothPulse {
  animation: smoothPulse 2s ease-in-out infinite;
}

.animate-fadeInScale {
  animation: fadeInScale 0.4s ease-out;
}

.animate-borderGlow {
  animation: borderGlow 2s ease-in-out infinite;
}

.animate-enhancedCardHover {
  animation: enhancedCardHover 0.35s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-smoothScale {
  animation: smoothScale 0.35s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-liquidGlassShimmer {
  animation: liquidGlassShimmer 3s ease-in-out infinite;
}

.animate-liquidGlassGlow {
  animation: liquidGlassGlow 3s ease-in-out infinite;
}

.animate-cardLiquidLift {
  animation: cardLiquidLift 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-subtleRotate {
  animation: subtleRotate 4s ease-in-out infinite;
}

.animate-pulseGlow {
  animation: pulseGlow 2s ease-in-out infinite;
}

.animate-slideInWithBounce {
  animation: slideInWithBounce 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-fadeInWithScale {
  animation: fadeInWithScale 0.4s ease-out forwards;
}

.animate-rotateIn {
  animation: rotateIn 0.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-expandIn {
  animation: expandIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

.animate-premiumGlow {
  animation: premiumGlow 3s ease-in-out infinite;
}

.animate-subtleGlowPulse {
  animation: subtleGlowPulse 4s ease-in-out infinite;
}

.animate-enhancedPremiumGlow {
  animation: enhancedPremiumGlow 3.5s ease-in-out infinite;
}

.animate-softGlow {
  animation: softGlow 3s ease-in-out infinite;
}

.animate-deepGlow {
  animation: deepGlow 4.5s ease-in-out infinite;
}

.animate-cardGradientShift {
  animation: cardGradientShift 6s ease-in-out infinite;
}

.animate-iconGlow {
  animation: iconGlow 2.5s ease-in-out infinite;
}

/* Stagger animations for lists */
.stagger-children > * {
  animation: slideInUp 0.4s ease-out;
}

.stagger-children > *:nth-child(1) { animation-delay: 0ms; }
.stagger-children > *:nth-child(2) { animation-delay: 50ms; }
.stagger-children > *:nth-child(3) { animation-delay: 100ms; }
.stagger-children > *:nth-child(4) { animation-delay: 150ms; }
.stagger-children > *:nth-child(5) { animation-delay: 200ms; }
.stagger-children > *:nth-child(6) { animation-delay: 250ms; }
.stagger-children > *:nth-child(7) { animation-delay: 300ms; }
.stagger-children > *:nth-child(8) { animation-delay: 350ms; }
.stagger-children > *:nth-child(9) { animation-delay: 400ms; }
.stagger-children > *:nth-child(10) { animation-delay: 450ms; }
.stagger-children > *:nth-child(11) { animation-delay: 500ms; }
.stagger-children > *:nth-child(12) { animation-delay: 550ms; }

/* Command-K Palette Animations */
@keyframes commandPaletteSlideIn {
  from {
    opacity: 0;
    transform: scale(0.95) translateY(-20px);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}

.animate-commandPaletteSlideIn {
  animation: commandPaletteSlideIn 0.3s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Micro-Glow Effect for Interactive Elements - Aurora Theme */
@keyframes microGlowPulse {
  0%, 100% {
    box-shadow: 0 0 8px rgba(90, 166, 255, 0.15), 0 0 16px rgba(139, 124, 255, 0.08);
  }
  50% {
    box-shadow: 0 0 12px rgba(90, 166, 255, 0.25), 0 0 24px rgba(139, 124, 255, 0.12);
  }
}

.micro-glow {
  animation: microGlowPulse 3s ease-in-out infinite;
}

/* Elevated Glow for Premium Elements - Aurora Theme */
@keyframes elevatedGlowPulse {
  0%, 100% {
    box-shadow:
      0 0 12px rgba(90, 166, 255, 0.2),
      0 0 24px rgba(139, 124, 255, 0.12),
      0 0 36px rgba(176, 140, 255, 0.08);
  }
  50% {
    box-shadow:
      0 0 16px rgba(90, 166, 255, 0.3),
      0 0 32px rgba(139, 124, 255, 0.18),
      0 0 48px rgba(176, 140, 255, 0.12);
  }
}

.elevated-glow {
  animation: elevatedGlowPulse 3.5s ease-in-out infinite;
}

/* Quick Read Slide-In Animation */
@keyframes quickReadSlideIn {
  from {
    opacity: 0;
    transform: translateX(100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-quickReadSlideIn {
  animation: quickReadSlideIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Citation Hover Tooltip */
@keyframes citationTooltipFadeIn {
  from {
    opacity: 0;
    transform: translateY(-8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-citationTooltipFadeIn {
  animation: citationTooltipFadeIn 0.2s ease-out forwards;
}

/* Tag Chip Spring Scale */
@keyframes tagChipSpringScale {
  0% {
    transform: scale(0.8);
    opacity: 0;
  }
  60% {
    transform: scale(1.08);
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.animate-tagChipSpringScale {
  animation: tagChipSpringScale 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Bookmark Add Animation */
@keyframes bookmarkPulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.15);
  }
  100% {
    transform: scale(1);
  }
}

.animate-bookmarkPulse {
  animation: bookmarkPulse 0.5s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
}

/* Share Button Feedback */
@keyframes shareFeedback {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.animate-shareFeedback {
  animation: shareFeedback 0.4s ease-out forwards;
}

/* Score Glow Animation - Aurora Theme */
@keyframes scoreGlow {
  0%, 100% {
    box-shadow: 0 0 8px rgba(90, 166, 255, 0.2), 0 0 16px rgba(139, 124, 255, 0.1);
  }
  50% {
    box-shadow: 0 0 12px rgba(90, 166, 255, 0.35), 0 0 24px rgba(139, 124, 255, 0.18);
  }
}

.animate-scoreGlow {
  animation: scoreGlow 2s ease-in-out infinite;
}

/* Liquid Glass & Glassmorphism Effects - Apple-Inspired with Blue Accents */
.glass {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.88) 0%, rgba(240, 249, 255, 0.78) 100%);
  backdrop-filter: blur(28px) saturate(210%) brightness(1.12);
  -webkit-backdrop-filter: blur(28px) saturate(210%) brightness(1.12);
  border: 1px solid rgba(37, 99, 235, 0.2);
  box-shadow:
    0 8px 32px 0 rgba(37, 99, 235, 0.12),
    0 0 20px rgba(59, 130, 246, 0.08),
    0 0 40px rgba(96, 165, 250, 0.04),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.75),
    inset 0 -1px 1px 0 rgba(0, 0, 0, 0.02);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
  will-change: transform, box-shadow;
}

.glass:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(240, 249, 255, 0.85) 100%);
  border-color: rgba(37, 99, 235, 0.25);
  box-shadow:
    0 12px 48px 0 rgba(37, 99, 235, 0.12),
    0 0 30px rgba(59, 130, 246, 0.06),
    0 0 50px rgba(96, 165, 250, 0.03),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.7),
    inset 0 -1px 1px 0 rgba(0, 0, 0, 0.03);
  transform: translateY(-2px);
}

/* .glass-dark - REMOVED: Light theme only, use .glass instead */

/* Liquid Glass - Premium Frosted Effect with Aurora Accent Glow - CRISP & REFINED */
.liquid-glass {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.97) 0%, rgba(249, 251, 255, 0.94) 100%);
  backdrop-filter: blur(12px) saturate(180%) brightness(1.08);
  -webkit-backdrop-filter: blur(12px) saturate(180%) brightness(1.08);
  border: 1px solid rgba(90, 166, 255, 0.18);
  box-shadow:
    0 2px 8px 0 rgba(90, 166, 255, 0.06),
    0 0 12px rgba(139, 124, 255, 0.03),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.88);
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  border-radius: 0.75rem;
  position: relative;
  overflow: hidden;
}

.liquid-glass::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.02) 0%, transparent 50%, rgba(176, 140, 255, 0.01) 100%);
  pointer-events: none;
}

.liquid-glass:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.99) 0%, rgba(245, 250, 255, 0.97) 100%);
  border-color: rgba(90, 166, 255, 0.32);
  box-shadow:
    0 8px 20px 0 rgba(90, 166, 255, 0.10),
    0 0 16px rgba(139, 124, 255, 0.05),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.92);
  transform: translateY(-2px);
}

/* Ultra Premium Liquid Glass with Aurora Accent Glow - CRISP & REFINED */
.liquid-glass-premium {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(249, 251, 255, 0.95) 100%);
  backdrop-filter: blur(16px) saturate(195%) brightness(1.12);
  -webkit-backdrop-filter: blur(16px) saturate(195%) brightness(1.12);
  border: 1px solid rgba(90, 166, 255, 0.24);
  box-shadow:
    0 8px 24px 0 rgba(90, 166, 255, 0.10),
    0 0 20px rgba(139, 124, 255, 0.05),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.94);
  position: relative;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  border-radius: 0.875rem;
}

.liquid-glass-premium::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.05) 0%, transparent 50%, rgba(176, 140, 255, 0.02) 100%);
  pointer-events: none;
}

.liquid-glass-premium:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.99) 0%, rgba(245, 250, 255, 0.98) 100%);
  border-color: rgba(90, 166, 255, 0.36);
  box-shadow:
    0 12px 32px 0 rgba(90, 166, 255, 0.14),
    0 0 28px rgba(139, 124, 255, 0.08),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.96);
  transform: translateY(-2px);
}

/* Ultra Liquid Glass - Maximum Frosted Effect with Aurora Glow - CRISP & REFINED */
.liquid-glass-ultra {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.99) 0%, rgba(249, 251, 255, 0.97) 100%);
  backdrop-filter: blur(20px) saturate(210%) brightness(1.14);
  -webkit-backdrop-filter: blur(20px) saturate(210%) brightness(1.14);
  border: 1px solid rgba(90, 166, 255, 0.28);
  box-shadow:
    0 12px 32px 0 rgba(90, 166, 255, 0.14),
    0 0 24px rgba(139, 124, 255, 0.10),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.96);
  position: relative;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  border-radius: 1rem;
}

.liquid-glass-ultra::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.07) 0%, transparent 50%, rgba(176, 140, 255, 0.03) 100%);
  pointer-events: none;
}

.liquid-glass-ultra:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.99) 0%, rgba(245, 250, 255, 0.98) 100%);
  border-color: rgba(90, 166, 255, 0.40);
  box-shadow:
    0 16px 40px 0 rgba(90, 166, 255, 0.18),
    0 0 32px rgba(139, 124, 255, 0.12),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.97);
  transform: translateY(-2.5px);
}

/* Premium Gradient Backgrounds - Aurora-Based Modern Theme */
.gradient-primary {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
}

.gradient-accent {
  background: linear-gradient(135deg, #5AA6FF 0%, #B08CFF 100%);
}

.gradient-success {
  background: linear-gradient(135deg, #06B6D4 0%, #14B8A6 100%);
}

.gradient-subtle {
  background: linear-gradient(135deg, #F9FBFF 0%, #F0F7FF 100%);
}

/* AI-Inspired Animated Background - Aurora Theme */
.ai-gradient-bg {
  background: linear-gradient(
    -45deg,
    #F9FBFF 0%,
    #F0F7FF 20%,
    #F5F9FF 40%,
    #E8F2FF 60%,
    #F9FBFF 100%
  );
  background-size: 400% 400%;
  animation: aiGradientShift 20s ease-in-out infinite;
  position: relative;
}

.ai-gradient-bg::before {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(
    circle at 20% 50%,
    rgba(90, 166, 255, 0.12) 0%,
    rgba(90, 166, 255, 0.04) 30%,
    transparent 60%
  );
  pointer-events: none;
  animation: subtleFloat 8s ease-in-out infinite;
}

.ai-gradient-bg::after {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(
    circle at 80% 80%,
    rgba(139, 124, 255, 0.08) 0%,
    rgba(139, 124, 255, 0.02) 30%,
    transparent 60%
  );
  pointer-events: none;
  animation: subtleFloat 10s ease-in-out infinite reverse;
}

/* Enhanced AI Gradient Background with Multi-Layer Glow - Aurora Theme */
.ai-gradient-bg-enhanced {
  background: linear-gradient(
    135deg,
    #F9FBFF 0%,
    #F0F7FF 25%,
    #F5F9FF 50%,
    #E8F2FF 75%,
    #F9FBFF 100%
  );
  background-size: 400% 400%;
  animation: aiGradientShift 25s ease-in-out infinite;
  position: relative;
  overflow: hidden;
}

.ai-gradient-bg-enhanced::before {
  content: '';
  position: absolute;
  inset: 0;
  background:
    radial-gradient(circle at 15% 40%, rgba(90, 166, 255, 0.12) 0%, transparent 40%),
    radial-gradient(circle at 85% 60%, rgba(139, 124, 255, 0.08) 0%, transparent 40%);
  pointer-events: none;
  animation: subtleFloat 12s ease-in-out infinite;
}

.ai-gradient-bg-enhanced::after {
  content: '';
  position: absolute;
  inset: 0;
  background:
    radial-gradient(circle at 50% 50%, rgba(90, 166, 255, 0.03) 0%, transparent 50%);
  pointer-events: none;
}

/* Text Gradients - Aurora-Based */
.text-gradient {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.text-gradient-warm {
  background: linear-gradient(135deg, #5AA6FF 0%, #B08CFF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Insurance-Specific Gradients - Aurora-Based */
.gradient-risk-high {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 100%);
}

.gradient-risk-medium {
  background: linear-gradient(135deg, #8B7CFF 0%, #B08CFF 100%);
}

.gradient-risk-low {
  background: linear-gradient(135deg, #06B6D4 0%, #14B8A6 100%);
}

.gradient-regulatory {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 100%);
}

.gradient-catastrophe {
  background: linear-gradient(135deg, #8B7CFF 0%, #B08CFF 100%);
}

.gradient-market {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 100%);
}

.gradient-technology {
  background: linear-gradient(135deg, #B08CFF 0%, #06B6D4 100%);
}

/* Advanced Hover Effects - Enhanced */
.hover-lift {
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  will-change: transform, box-shadow;
}

.hover-lift:hover {
  transform: translateY(-4px);
  box-shadow: 0 16px 28px -3px rgba(0, 0, 0, 0.12);
}

.hover-lift:active {
  transform: translateY(-1px);
}

.hover-glow {
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  will-change: box-shadow, border-color;
}

.hover-glow:hover {
  box-shadow:
    0 0 24px rgba(90, 166, 255, 0.32),
    0 0 12px rgba(139, 124, 255, 0.18),
    inset 0 0 12px rgba(176, 140, 255, 0.04);
  border-color: rgba(139, 124, 255, 0.60);
}

.hover-glow:active {
  box-shadow:
    0 0 16px rgba(90, 166, 255, 0.20),
    0 0 8px rgba(139, 124, 255, 0.10);
}

/* Premium Button Styles - Aurora Gradient */
.btn-premium {
  position: relative;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.20);
  box-shadow:
    0 6px 18px 0 rgba(90, 166, 255, 0.20),
    0 0 24px rgba(139, 124, 255, 0.10),
    0 0 40px rgba(176, 140, 255, 0.06),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.35);
}

.btn-premium::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.btn-premium::after {
  content: '';
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at center, rgba(255, 255, 255, 0.12) 0%, transparent 70%);
  opacity: 0;
  transition: opacity 0.3s ease-out;
}

.btn-premium:hover {
  transform: translateY(-2px) scale(1.02);
  box-shadow:
    0 14px 36px 0 rgba(90, 166, 255, 0.32),
    0 0 48px rgba(139, 124, 255, 0.16),
    0 0 72px rgba(176, 140, 255, 0.12),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.45);
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
}

.btn-premium:hover::before {
  left: 100%;
}

.btn-premium:hover::after {
  opacity: 1;
}

.btn-premium:active {
  transform: translateY(-0.5px) scale(0.98);
  box-shadow:
    0 4px 12px 0 rgba(90, 166, 255, 0.16),
    0 0 20px rgba(139, 124, 255, 0.08),
    0 0 32px rgba(176, 140, 255, 0.04),
    inset 0 1px 1px 0 rgba(255, 255, 255, 0.30);
}

.btn-premium:focus-visible {
  outline: 2px solid rgba(255, 255, 255, 0.5);
  outline-offset: 2px;
}

/* Enhanced Card Styles - Aurora Theme with Liquid Glass */
.card-premium {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(249, 251, 255, 0.96) 100%);
  backdrop-filter: blur(16px) saturate(165%);
  -webkit-backdrop-filter: blur(16px) saturate(165%);
  border: 1px solid rgba(90, 166, 255, 0.16);
  border-radius: 1rem;
  box-shadow:
    0 4px 12px -2px rgba(0, 0, 0, 0.05),
    0 0 20px rgba(90, 166, 255, 0.08),
    0 0 30px rgba(139, 124, 255, 0.04),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.80);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
  position: relative;
  overflow: hidden;
  will-change: transform, box-shadow, border-color;
}

.card-premium::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, transparent, rgba(90, 166, 255, 0.40), rgba(139, 124, 255, 0.40), rgba(176, 140, 255, 0.30), transparent);
  opacity: 0;
  transition: opacity 0.35s ease-out;
}

.card-premium:hover {
  border-color: rgba(90, 166, 255, 0.32);
  box-shadow:
    0 14px 36px -4px rgba(90, 166, 255, 0.18),
    0 0 36px rgba(139, 124, 255, 0.12),
    0 0 56px rgba(176, 140, 255, 0.06),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.92);
  transform: translateY(-4px) scale(1.01);
}

.card-premium:hover::before {
  opacity: 1;
}

.card-premium:active {
  transform: translateY(-2px) scale(0.99);
}

.card-premium-elevated {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.98) 0%, rgba(249, 251, 255, 0.96) 100%);
  backdrop-filter: blur(18px) saturate(190%);
  -webkit-backdrop-filter: blur(18px) saturate(190%);
  border: 1px solid rgba(90, 166, 255, 0.18);
  border-radius: 1.125rem;
  box-shadow:
    0 6px 18px -3px rgba(0, 0, 0, 0.06),
    0 0 24px rgba(90, 166, 255, 0.08),
    0 0 32px rgba(139, 124, 255, 0.04),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.90);
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  position: relative;
  overflow: hidden;
  will-change: transform, box-shadow, border-color;
}

.card-premium-elevated::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1.5px;
  background: linear-gradient(90deg, transparent, rgba(90, 166, 255, 0.40), rgba(139, 124, 255, 0.40), rgba(176, 140, 255, 0.30), transparent);
  opacity: 0;
  transition: opacity 0.3s ease-out;
}

.card-premium-elevated:hover {
  border-color: rgba(90, 166, 255, 0.32);
  box-shadow:
    0 14px 40px -3px rgba(0, 0, 0, 0.10),
    0 0 44px rgba(90, 166, 255, 0.12),
    0 0 64px rgba(139, 124, 255, 0.06),
    inset 0 1px 2px 0 rgba(255, 255, 255, 0.96);
  transform: translateY(-3px) scale(1.01);
}

.card-premium-elevated:hover::before {
  opacity: 1;
}

.card-premium-elevated:active {
  transform: translateY(-1px) scale(0.99);
}

/* Smooth Transitions */
.transition-smooth {
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.transition-smooth-slow {
  transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
}

/* Enhanced Focus States */
.focus-ring {
  outline: 3px solid var(--color-primary);
  outline-offset: 3px;
  border-radius: 4px;
}

/* Backdrop Effects */
.backdrop-blur-xl {
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
}

.backdrop-blur-2xl {
  backdrop-filter: blur(40px);
  -webkit-backdrop-filter: blur(40px);
}

/* Advanced Button Interactions */
button {
  position: relative;
  overflow: hidden;
}

button::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.25);
  transform: translate(-50%, -50%);
  transition: width 0.5s cubic-bezier(0.34, 1.56, 0.64, 1), height 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
  pointer-events: none;
}

button:active::after {
  width: 280px;
  height: 280px;
}

/* Link Hover Effects */
a {
  position: relative;
}

a::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 0;
  height: 2px;
  background: currentColor;
  transition: width 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

a:hover::after {
  width: 100%;
}

/* Input Focus Effects - Enhanced */
input:focus,
textarea:focus,
select:focus {
  box-shadow:
    0 0 0 4px rgba(90, 166, 255, 0.15),
    0 0 0 2px rgba(90, 166, 255, 0.10),
    inset 0 0 0 1px rgba(90, 166, 255, 0.20);
  transition: all 0.25s cubic-bezier(0.34, 1.56, 0.64, 1);
  border-color: rgba(90, 166, 255, 0.40);
}

/* Smooth Transitions for Interactive Elements */
button,
a,
input,
textarea,
select {
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

/* Hover Scale Effect for Cards */
article {
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
}

article {
  scroll-snap-align: start;
  scroll-snap-stop: auto;
}

article:hover {
  transform: translateY(-6px);
}



/* Enhanced Main Container */
main {
  position: relative;
  z-index: 1;
  display: flex;
  flex-direction: column;
  gap: 1.75rem;
  padding: 1.75rem;
  max-width: 100%;
  margin: 0 auto;
  animation: fadeIn 0.4s ease-out;
}

/* Section Styling - Improved Flow */
section {
  display: flex;
  flex-direction: column;
  gap: 1.25rem;
  animation: slideInUp 0.4s ease-out;
}

/* Card Enhancement Utilities - Smooth Transitions */
.card-elevated {
  box-shadow: 0 12px 32px -6px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.6);
  transition: all 0.35s cubic-bezier(0.34, 1.56, 0.64, 1);
  /* Optimize for smooth animations */
  will-change: transform, box-shadow;
  transform: translateZ(0);
}

.card-elevated:hover {
  box-shadow: 0 24px 48px -12px rgba(0, 0, 0, 0.15);
  border-color: rgba(255, 255, 255, 0.8);
  transform: translateY(-4px);
}

/* Premium Dividers */
.divider-gradient {
  background: linear-gradient(90deg, transparent, rgba(37, 99, 235, 0.2), transparent);
  height: 1px;
}

/* Enhanced Typography */
.text-balance {
  text-wrap: balance;
}

.font-display {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  font-weight: 900;
  letter-spacing: -0.03em;
}

/* Smooth Scrolling - Enhanced Fluidity */
html {
  scroll-behavior: smooth;
  scroll-padding-top: 80px;
}

/* Smooth scrolling for all scrollable containers */
body,
main,
.overflow-y-auto {
  scroll-behavior: smooth;
}

/* Slide In Down Animation */
@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-slideInDown {
  animation: slideInDown 0.4s ease-out;
}

/* Fade In Animation */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.animate-fadeIn {
  animation: fadeIn 0.3s ease-in;
}

/* Smooth Scroll Fade In - For scrolled content */
@keyframes smoothScrollFadeIn {
  from {
    opacity: 0;
    transform: translateY(8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-smoothScrollFadeIn {
  animation: smoothScrollFadeIn 0.4s ease-out;
}

/* Scale In Animation */
@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-scaleIn {
  animation: scaleIn 0.3s ease-out;
}

/* Shimmer Animation for Loading States */
@keyframes shimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

.animate-shimmer {
  background: linear-gradient(
    90deg,
    #f0f0f0 0%,
    #f8f8f8 50%,
    #f0f0f0 100%
  );
  background-size: 1000px 100%;
  animation: shimmer 2s infinite;
}

/* Reduced Motion - Accessibility First */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }

  html {
    scroll-behavior: auto;
  }

  /* Disable all animations for accessibility */
  .animate-slideInWithBounce,
  .animate-fadeInWithScale,
  .animate-liquidGlassGlow,
  .animate-pulseGlow,
  .animate-slideInDown,
  .animate-slideInRight {
    animation: none !important;
  }
}

/* High Contrast Mode Support */
@media (prefers-contrast: more) {
  .glass,
  .liquid-glass,
  .liquid-glass-premium {
    border-width: 2px;
    border-color: rgba(37, 99, 235, 0.5);
  }

  button:focus-visible,
  a:focus-visible {
    outline-width: 3px;
  }
}

/* Dark Mode Support (Future-Proofing) */
@media (prefers-color-scheme: dark) {
  /* Placeholder for future dark mode implementation */
  /* Currently light-only, but structure is ready */
}

/* Accessibility - Focus Visible Styles */
*:focus-visible {
  outline: 3px solid #2563eb;
  outline-offset: 3px;
  border-radius: 4px;
}

button:focus-visible,
a:focus-visible {
  outline: 3px solid #2563eb;
  outline-offset: 4px;
  border-radius: 6px;
}

/* Skip to Main Content Link */
.skip-to-main {
  position: absolute;
  top: -100px;
  left: 0;
  background: #1e40af;
  color: white;
  padding: 0.75rem 1.5rem;
  text-decoration: none;
  font-weight: bold;
  z-index: 100;
  border-radius: 0 0 0.5rem 0;
}

.skip-to-main:focus {
  top: 0;
}

/* Performance Optimization - GPU Acceleration for Smooth Scrolling */
.glass,
.liquid-glass,
.liquid-glass-premium,
article,
button,
input {
  will-change: transform, opacity;
  transform: translateZ(0);
  backface-visibility: hidden;
  -webkit-font-smoothing: antialiased;
  /* Optimize for smooth scrolling */
  contain: layout style paint;
}

/* Optimize animations for 60fps */
@media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
  }

  /* Reduce animation durations for better responsiveness */
  .animate-slideInUp,
  .animate-slideInDown,
  .animate-slideInLeft,
  .animate-slideInRight,
  .animate-scaleIn,
  .animate-fadeIn,
  .animate-fadeInScale {
    animation-duration: 0.2s !important;
  }
}

/* Light Mode Only - No Dark Mode Support */

/* Premium Gradient Utilities - Aurora Theme */
.bg-gradient-premium-blue {
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.08) 0%, rgba(139, 124, 255, 0.04) 100%);
}

.bg-gradient-premium-indigo {
  background: linear-gradient(135deg, rgba(90, 166, 255, 0.08) 0%, rgba(176, 140, 255, 0.06) 100%);
}

.text-gradient-premium {
  background: linear-gradient(135deg, #5AA6FF 0%, #8B7CFF 50%, #B08CFF 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Category Tag Styles */
.tag-pill {
  display: inline-flex;
  align-items: center;
  padding: 0.375rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 700;
  border-width: 1px;
  transition: all 300ms cubic-bezier(0.34, 1.56, 0.64, 1);
  cursor: pointer;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
}

.tag-pill:hover {
  transform: scale(1.1) translateY(-2px);
  box-shadow: 0 8px 16px -2px rgba(0, 0, 0, 0.15);
}

.tag-pill:active {
  transform: scale(0.98);
}

/* Accessibility & Performance Optimizations */

/* Focus Visible Styles - Keyboard Navigation */
:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: 4px;
}

button:focus-visible,
a:focus-visible,
input:focus-visible,
select:focus-visible,
textarea:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* High Contrast Mode Support */
@media (prefers-contrast: more) {
  :root {
    --color-text-primary: #000000;
    --color-text-secondary: #1a1a1a;
    --color-border: #000000;
  }

  .glass,
  .liquid-glass,
  .liquid-glass-premium {
    border-width: 2px;
  }
}

/* Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Dark Mode Support - DISABLED: Light theme only */
/* This application uses light theme exclusively */

/* Tap Target Sizing - Minimum 44x44px */
button,
a,
input[type="checkbox"],
input[type="radio"],
select {
  min-height: 44px;
  min-width: 44px;
}

/* Skip to Main Content Link */
.skip-to-main {
  position: absolute;
  top: -40px;
  left: 0;
  background: var(--color-primary);
  color: white;
  padding: 8px;
  text-decoration: none;
  z-index: 100;
}

.skip-to-main:focus {
  top: 0;
}

/* Sufficient Color Contrast */
.text-slate-600 {
  color: #475569;
}

.text-slate-700 {
  color: #334155;
}

.text-slate-900 {
  color: #0f172a;
}

/* Readable Font Sizes */
body {
  font-size: 16px;
  line-height: 1.6;
}

h1 {
  font-size: 2rem;
  line-height: 1.2;
}

h2 {
  font-size: 1.5rem;
  line-height: 1.3;
}

h3 {
  font-size: 1.25rem;
  line-height: 1.4;
}

/* Performance: Lazy Loading Images */
img {
  loading: lazy;
}

/* Performance: Optimize Animations */
@media (prefers-reduced-motion: no-preference) {
  /* Only apply animations if user hasn't disabled them */
  .animate-slideInUp,
  .animate-slideInDown,
  .animate-slideInLeft,
  .animate-slideInRight,
  .animate-scaleIn,
  .animate-fadeInScale {
    animation-duration: 0.3s;
    animation-timing-function: ease-out;
  }
}

/* Performance: Optimize Transitions */
* {
  transition-property: background-color, border-color, color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 100ms;
}

/* Performance: GPU Acceleration */
.glass,
.liquid-glass,
.liquid-glass-premium,
button,
a {
  will-change: transform, opacity;
  transform: translateZ(0);
  backface-visibility: hidden;
}

/* Performance: Optimize Scrolling - Enhanced Fluidity */
main,
.overflow-y-auto {
  -webkit-overflow-scrolling: touch;
  scroll-behavior: smooth;
  /* GPU acceleration for smooth scrolling */
  will-change: scroll-position;
  /* Momentum scrolling on iOS */
  -webkit-overflow-scrolling: touch;
  /* Optimize for 60fps scrolling */
  contain: layout style paint;
}

/* Scrollable container optimization */
.overflow-y-auto {
  scroll-snap-type: y proximity;
  scroll-padding: 80px 0 0 0;
}

/* Accessibility: Visible Focus Indicators - Blue Theme */
*:focus-visible {
  box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.6);
  outline: 3px solid #2563eb;
  outline-offset: 2px;
}

/* Accessibility: Link Underlines */
a {
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-underline-offset: 4px;
}

a:hover {
  text-decoration-thickness: 3px;
}

/* Accessibility: Button Clarity */
button {
  cursor: pointer;
  font-weight: 600;
  letter-spacing: 0.5px;
}

button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Accessibility: Form Labels */
label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: var(--color-text-primary);
}

/* Accessibility: Error States */
input:invalid,
textarea:invalid,
select:invalid {
  border-color: var(--color-danger);
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

/* Accessibility: Success States */
input:valid,
textarea:valid,
select:valid {
  border-color: var(--color-success);
}

.tag-lob {
  background: linear-gradient(135deg, #e0e7ff 0%, #c7d2fe 100%);
  color: #4338ca;
  border-color: #a5b4fc;
  box-shadow:
    0 2px 8px rgba(67, 56, 202, 0.1),
    0 0 12px rgba(99, 102, 241, 0.08);
}

.tag-lob:hover {
  background: linear-gradient(135deg, #c7d2fe 0%, #a5b4fc 100%);
  box-shadow:
    0 4px 12px rgba(67, 56, 202, 0.2),
    0 0 20px rgba(99, 102, 241, 0.15);
  border-color: #818cf8;
}

.tag-peril {
  background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
  color: #991b1b;
  border-color: #fca5a5;
  box-shadow:
    0 2px 8px rgba(153, 27, 27, 0.1),
    0 0 12px rgba(239, 68, 68, 0.08);
}

.tag-peril:hover {
  background: linear-gradient(135deg, #fecaca 0%, #fca5a5 100%);
  box-shadow:
    0 4px 12px rgba(153, 27, 27, 0.2),
    0 0 20px rgba(239, 68, 68, 0.15);
  border-color: #f87171;
}

.tag-region {
  background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
  color: #065f46;
  border-color: #6ee7b7;
  box-shadow:
    0 2px 8px rgba(6, 95, 70, 0.1),
    0 0 12px rgba(16, 185, 129, 0.08);
}

.tag-region:hover {
  background: linear-gradient(135deg, #a7f3d0 0%, #6ee7b7 100%);
  box-shadow:
    0 4px 12px rgba(6, 95, 70, 0.2),
    0 0 20px rgba(16, 185, 129, 0.15);
  border-color: #34d399;
}

.tag-company {
  background: linear-gradient(135deg, #e0f2fe 0%, #f0f7ff 100%);
  color: #0369a1;
  border-color: #7dd3fc;
  box-shadow:
    0 2px 8px rgba(37, 99, 235, 0.1),
    0 0 12px rgba(59, 130, 246, 0.08);
}

.tag-company:hover {
  background: linear-gradient(135deg, #cffafe 0%, #e0f2fe 100%);
  box-shadow:
    0 4px 12px rgba(37, 99, 235, 0.2),
    0 0 20px rgba(59, 130, 246, 0.15);
  border-color: #06b6d4;
}

.tag-trend {
  background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
  color: #92400e;
  border-color: #fcd34d;
  box-shadow:
    0 2px 8px rgba(146, 64, 14, 0.1),
    0 0 12px rgba(245, 158, 11, 0.08);
}

.tag-trend:hover {
  background: linear-gradient(135deg, #fde68a 0%, #fcd34d 100%);
  box-shadow:
    0 4px 12px rgba(146, 64, 14, 0.2),
    0 0 20px rgba(245, 158, 11, 0.15);
  border-color: #fbbf24;
}

.tag-regulation {
  background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
  color: #334155;
  border-color: #cbd5e1;
  box-shadow:
    0 2px 8px rgba(51, 65, 85, 0.1),
    0 0 12px rgba(100, 116, 139, 0.06);
}

.tag-regulation:hover {
  background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
  box-shadow:
    0 4px 12px rgba(51, 65, 85, 0.2),
    0 0 20px rgba(100, 116, 139, 0.12);
  border-color: #94a3b8;
}

/* Liquid Glass Utility Classes - Aurora Theme */
.liquid-glass-light {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.85) 0%, rgba(249, 251, 255, 0.75) 100%);
  backdrop-filter: blur(20px) saturate(180%);
  -webkit-backdrop-filter: blur(20px) saturate(180%);
  border: 1px solid rgba(90, 166, 255, 0.1);
  box-shadow:
    0 4px 16px rgba(90, 166, 255, 0.06),
    0 0 20px rgba(139, 124, 255, 0.03),
    inset 0 1px 1px rgba(255, 255, 255, 0.6);
}

.liquid-glass-light:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(249, 251, 255, 0.88) 100%);
  border-color: rgba(90, 166, 255, 0.18);
  box-shadow:
    0 8px 24px rgba(90, 166, 255, 0.1),
    0 0 30px rgba(139, 124, 255, 0.05),
    inset 0 1px 1px rgba(255, 255, 255, 0.7);
}

/* Frosted Glass - Subtle Blur */
.frosted-glass {
  background: rgba(255, 255, 255, 0.7);
  backdrop-filter: blur(16px) saturate(160%);
  -webkit-backdrop-filter: blur(16px) saturate(160%);
  border: 1px solid rgba(255, 255, 255, 0.3);
  box-shadow:
    0 4px 12px rgba(0, 0, 0, 0.05),
    inset 0 1px 1px rgba(255, 255, 255, 0.5);
}

.frosted-glass:hover {
  background: rgba(255, 255, 255, 0.85);
  border-color: rgba(255, 255, 255, 0.4);
  box-shadow:
    0 8px 20px rgba(0, 0, 0, 0.08),
    inset 0 1px 1px rgba(255, 255, 255, 0.6);
}

/* Glow Container - Adds subtle glow around elements */
.glow-container {
  position: relative;
  border-radius: inherit;
}

.glow-container::after {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: inherit;
  background: radial-gradient(circle at 30% 30%, rgba(90, 166, 255, 0.08) 0%, transparent 50%),
              radial-gradient(circle at 70% 70%, rgba(139, 124, 255, 0.05) 0%, transparent 50%);
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.35s ease-out;
}

.glow-container:hover::after {
  opacity: 1;
}

/* Shimmer Effect - Subtle light reflection */
.shimmer-effect {
  position: relative;
  overflow: hidden;
}

.shimmer-effect::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  animation: shimmerSlide 3s infinite;
}

@keyframes shimmerSlide {
  0% {
    left: -100%;
  }
  100% {
    left: 100%;
  }
}

/* Micro Glow - Subtle glow for interactive elements - Blue Theme */
.micro-glow {
  box-shadow: 0 0 12px rgba(37, 99, 235, 0.15), 0 0 24px rgba(59, 130, 246, 0.08);
  transition: box-shadow 0.35s ease-out;
}

.micro-glow:hover {
  box-shadow: 0 0 20px rgba(37, 99, 235, 0.25), 0 0 40px rgba(59, 130, 246, 0.12);
}

/* Elevated Glow - Stronger glow for prominent elements - Blue Theme */
.elevated-glow {
  box-shadow:
    0 0 20px rgba(37, 99, 235, 0.2),
    0 0 40px rgba(59, 130, 246, 0.1),
    0 0 60px rgba(96, 165, 250, 0.05);
  transition: box-shadow 0.35s ease-out;
}

.elevated-glow:hover {
  box-shadow:
    0 0 30px rgba(37, 99, 235, 0.3),
    0 0 60px rgba(59, 130, 246, 0.15),
    0 0 90px rgba(96, 165, 250, 0.08);
}

/* ============================================================================
   ACCESSIBILITY & REDUCED MOTION SUPPORT
   ============================================================================ */

/* Respect prefers-reduced-motion for all animations */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* Enhanced focus states for keyboard navigation */
:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: 0.25rem;
}

/* Focus ring for interactive elements */
button:focus-visible,
a:focus-visible,
input:focus-visible,
textarea:focus-visible,
select:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* High contrast mode support */
@media (prefers-contrast: more) {
  :root {
    --color-border: #94A3B8;
    --color-text-tertiary: #475569;
  }

  .liquid-glass,
  .liquid-glass-premium,
  .liquid-glass-ultra {
    border-width: 2px;
  }
}

/* Reduced transparency for users with vision issues */
@media (prefers-contrast: more) {
  .glass,
  .liquid-glass,
  .liquid-glass-premium,
  .liquid-glass-ultra {
    background-color: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
    -webkit-backdrop-filter: blur(16px) saturate(180%) brightness(1.05);
  }
}

/* Forced colors mode support (Windows High Contrast) */
@media (forced-colors: active) {
  .liquid-glass,
  .liquid-glass-premium,
  .liquid-glass-ultra,
  .glass,
  .card-premium,
  .card-premium-elevated {
    border: 2px solid CanvasText;
  }

  button {
    border: 2px solid CanvasText;
  }
}

/* Screen reader only text */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

/* Skip to main content link for keyboard users */
.skip-to-main {
  position: absolute;
  top: -40px;
  left: 0;
  background: var(--color-primary);
  color: white;
  padding: 8px;
  text-decoration: none;
  z-index: 100;
  border-radius: 0 0 4px 0;
}

.skip-to-main:focus {
  top: 0;
}

/* Semantic landmark styling */
main {
  outline: none;
}

main:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Improved link underlines for accessibility */
a {
  text-decoration: underline;
  text-decoration-thickness: 1px;
  text-underline-offset: 0.25em;
}

a:hover {
  text-decoration-thickness: 2px;
}

/* Ensure sufficient color contrast */
.text-secondary {
  color: var(--color-text-secondary);
}

.text-tertiary {
  color: var(--color-text-tertiary);
}

/* Visible focus indicators for form elements */
input:focus-visible,
textarea:focus-visible,
select:focus-visible {
  box-shadow: 0 0 0 3px rgba(90, 166, 255, 0.1);
}

/* Ensure buttons have sufficient touch target size */
button,
a[role="button"],
[role="button"] {
  min-height: 44px;
  min-width: 44px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

/* Improve text selection contrast */
::selection {
  background-color: var(--color-primary);
  color: white;
}

::-moz-selection {
  background-color: var(--color-primary);
  color: white;
}

/* Ensure sufficient spacing between interactive elements */
button + button,
a + a,
button + a,
a + button {
  margin-left: 0.5rem;
}

/* Visible focus for custom components */
.glass:focus-visible,
.liquid-glass:focus-visible,
.card-premium:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Ensure proper contrast for disabled elements */
button:disabled,
input:disabled,
select:disabled,
textarea:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Improve readability of code blocks */
code {
  background-color: var(--color-bg-tertiary);
  padding: 0.125rem 0.375rem;
  border-radius: 0.25rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.875em;
}

/* Ensure proper spacing for list items */
li {
  margin-bottom: 0.5rem;
}

/* Improve table accessibility */
table {
  border-collapse: collapse;
  width: 100%;
}

th {
  text-align: left;
  font-weight: 600;
  padding: 0.75rem;
  border-bottom: 2px solid var(--color-border);
}

td {
  padding: 0.75rem;
  border-bottom: 1px solid var(--color-border-light);
}

/* Ensure proper contrast for labels */
label {
  font-weight: 500;
  color: var(--color-text-primary);
  display: block;
  margin-bottom: 0.5rem;
}

/* Improve form field styling */
input[type="text"],
input[type="email"],
input[type="password"],
input[type="search"],
input[type="url"],
textarea,
select {
  border: 1px solid var(--color-border);
  border-radius: var(--radius-md);
  padding: 0.625rem 1rem;
  font-size: 1rem;
  font-family: inherit;
  color: var(--color-text-primary);
  background-color: var(--color-bg-primary);
  transition: all 0.2s ease-out;
}

input[type="text"]:focus-visible,
input[type="email"]:focus-visible,
input[type="password"]:focus-visible,
input[type="search"]:focus-visible,
input[type="url"]:focus-visible,
textarea:focus-visible,
select:focus-visible {
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(90, 166, 255, 0.1);
}

/* Ensure proper contrast for error states */
input[aria-invalid="true"],
textarea[aria-invalid="true"],
select[aria-invalid="true"] {
  border-color: var(--color-danger);
}

input[aria-invalid="true"]:focus-visible,
textarea[aria-invalid="true"]:focus-visible,
select[aria-invalid="true"]:focus-visible {
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

/* Ensure proper contrast for success states */
input[aria-invalid="false"],
textarea[aria-invalid="false"],
select[aria-invalid="false"] {
  border-color: var(--color-success);
}

input[aria-invalid="false"]:focus-visible,
textarea[aria-invalid="false"]:focus-visible,
select[aria-invalid="false"]:focus-visible {
  box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
}


================================================================================
                            BACKEND CODE FILES
================================================================================


=================================================================================
FILE: functions/src/agents.ts
=================================================================================

import OpenAI from "openai";
import { JSDOM } from "jsdom";
import { Readability } from "@mozilla/readability";
import { z } from "zod";
import { backOff } from "exponential-backoff"; // Import for retry logic
import {
  normalizeRegions as normalizeRegionsUtil,
  normalizeCompanies as normalizeCompaniesUtil,
  computeContentHash as computeContentHashUtil,
  detectStormName as detectStormNameUtil,
  isRegulatorySource as isRegulatorySourceUtil,
  calculateSmartScore as calculateSmartScoreUtil,
  hashUrl as hashUrlUtil,
} from "./utils";

// Re-export utility functions directly
export const hashUrl = hashUrlUtil;
export const calculateSmartScore = calculateSmartScoreUtil;
export const normalizeRegions = normalizeRegionsUtil;
export const normalizeCompanies = normalizeCompaniesUtil;
export const computeContentHash = computeContentHashUtil;
export const detectStormName = detectStormNameUtil;
export const isRegulatorySource = isRegulatorySourceUtil;

export type Article = {
  url: string;
  source: string;
  publishedAt?: string;
  title?: string;
  html?: string;
  text?: string;
  author?: string;
  mainImage?: string;
};

const schema = z.object({
  title: z.string(),
  url: z.string(),
  source: z.string(),
  bullets5: z.array(z.string()).min(3).max(5),
  whyItMatters: z.object({
    underwriting: z.string().min(20).max(200), // Ensure meaningful length
    claims: z.string().min(20).max(200),
    brokerage: z.string().min(20).max(200),
    actuarial: z.string().min(20).max(200),
  }),
  tags: z.object({
    lob: z.array(z.string()).max(6), // Lines of Business, e.g., "Auto", "Property"
    perils: z.array(z.string()).max(6), // Perils, e.g., "Hurricane", "Cyber"
    regions: z.array(z.string()).max(10), // ISO codes or names, e.g., "US-FL", "California"
    companies: z.array(z.string()).max(10), // Company names, e.g., "State Farm"
    trends: z.array(z.string()).max(8), // Trends like "GenAI", "Climate Risk", "Social Inflation", etc.
    regulations: z.array(z.string()).max(5), // Regulatory aspects, e.g., "NAIC Bulletin", "Tort Reform"
  }),
  riskPulse: z.enum(["LOW", "MEDIUM", "HIGH"]),
  sentiment: z.enum(["POSITIVE", "NEGATIVE", "NEUTRAL"]),
  confidence: z.number().min(0).max(1),
  // v2 additions
  citations: z.array(z.string()).max(10), // URLs cited in bullets
  impactScore: z.number().min(0).max(100), // Overall impact score
  impactBreakdown: z.object({
    market: z.number().min(0).max(100),
    regulatory: z.number().min(0).max(100),
    catastrophe: z.number().min(0).max(100),
    technology: z.number().min(0).max(100),
  }),
  confidenceRationale: z.string().max(200), // Why this confidence level
  leadQuote: z.string().max(300), // Key factual excerpt (required for OpenAI structured output)
  disclosure: z.string().max(200), // If promotional/opinionated (required for OpenAI structured output)
});

export async function extractArticle(url: string) {
  // Validate URL format before attempting fetch
  try {
    new URL(url);
  } catch {
    throw new Error(`Invalid URL format: ${url}`);
  }

  try {
    // Enhanced fetch with user-agent to mimic browser and avoid blocks
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout

    const res = await fetch(url, {
      redirect: "follow",
      signal: controller.signal,
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
      },
    });

    clearTimeout(timeoutId);

    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }

    const html = await res.text();

    // Validate HTML content
    if (!html || html.length < 100) {
      throw new Error(`Article content too short (${html.length} bytes)`);
    }

    const dom = new JSDOM(html, { url });
    const reader = new Readability(dom.window.document);
    const parsed = reader.parse();

    // Extract main image: Look for og:image or first relevant img
    let mainImage: string | undefined;
    const metaImage = dom.window.document.querySelector('meta[property="og:image"]')?.getAttribute("content");
    if (metaImage) {
      mainImage = metaImage.startsWith("http") ? metaImage : new URL(metaImage, url).href;
    } else {
      const images = dom.window.document.querySelectorAll("img");
      if (images.length > 0) {
        mainImage = images[0].src.startsWith("http") ? images[0].src : new URL(images[0].src, url).href;
      }
    }

    // Extract author: From meta or byline
    let author: string | undefined;
    const metaAuthor = dom.window.document.querySelector('meta[name="author"]')?.getAttribute("content");
    if (metaAuthor) {
      author = metaAuthor;
    } else {
      const byline = dom.window.document.querySelector(".byline, .author")?.textContent?.trim();
      if (byline) author = byline;
    }

    const extractedText = (parsed?.textContent ?? "").trim();

    return {
      url,
      title: parsed?.title ?? dom.window.document.title ?? "",
      html,
      text: extractedText,
      mainImage,
      author,
    };
  } catch (error) {
    console.error(`Error extracting article from ${url}:`, error);
    throw error; // Let caller handle fallback
  }
}

export async function summarizeAndTag(
  client: OpenAI,
  art: Article & { text?: string; mainImage?: string; author?: string }
) {
  const jsonSchema = {
    name: "InsuranceBrief",
    schema: {
      type: "object",
      additionalProperties: false,
      properties: {
        title: { type: "string" },
        url: { type: "string" },
        source: { type: "string" },
        bullets5: { type: "array", items: { type: "string" }, minItems: 3, maxItems: 5 },
        whyItMatters: {
          type: "object",
          properties: {
            underwriting: { type: "string", minLength: 20, maxLength: 200 },
            claims: { type: "string", minLength: 20, maxLength: 200 },
            brokerage: { type: "string", minLength: 20, maxLength: 200 },
            actuarial: { type: "string", minLength: 20, maxLength: 200 },
          },
          required: ["underwriting", "claims", "brokerage", "actuarial"],
          additionalProperties: false,
        },
        tags: {
          type: "object",
          properties: {
            lob: { type: "array", items: { type: "string" } },
            perils: { type: "array", items: { type: "string" } },
            regions: { type: "array", items: { type: "string" } },
            companies: { type: "array", items: { type: "string" } },
            trends: { type: "array", items: { type: "string" } },
            regulations: { type: "array", items: { type: "string" } },
          },
          required: ["lob", "perils", "regions", "companies", "trends", "regulations"],
          additionalProperties: false,
        },
        riskPulse: { type: "string", enum: ["LOW", "MEDIUM", "HIGH"] },
        sentiment: { type: "string", enum: ["POSITIVE", "NEGATIVE", "NEUTRAL"] },
        confidence: { type: "number", minimum: 0, maximum: 1 },
        citations: { type: "array", items: { type: "string" }, maxItems: 10 },
        impactScore: { type: "number", minimum: 0, maximum: 100 },
        impactBreakdown: {
          type: "object",
          properties: {
            market: { type: "number", minimum: 0, maximum: 100 },
            regulatory: { type: "number", minimum: 0, maximum: 100 },
            catastrophe: { type: "number", minimum: 0, maximum: 100 },
            technology: { type: "number", minimum: 0, maximum: 100 },
          },
          required: ["market", "regulatory", "catastrophe", "technology"],
          additionalProperties: false,
        },
        confidenceRationale: { type: "string", maxLength: 200 },
        leadQuote: { type: "string", maxLength: 300 },
        disclosure: { type: "string", maxLength: 200 },
      },
      required: ["title", "url", "source", "bullets5", "whyItMatters", "tags", "riskPulse", "sentiment", "confidence", "citations", "impactScore", "impactBreakdown", "confidenceRationale", "leadQuote", "disclosure"],
    },
    strict: true,
  } as const;

  const currentDate = new Date().toISOString().split('T')[0]; // Use current date for timeliness

  const system = [
    "# ROLE & EXPERTISE",
    "You are a senior P&C insurance analyst with 20+ years experience across underwriting, claims, actuarial science, and risk management.",
    "You specialize in translating complex insurance news into actionable intelligence for industry professionals.",
    "",
    "# ANALYSIS FRAMEWORK",
    "Analyze articles through the P&C insurance lens focusing on:",
    "- Lines of Business: Personal Auto, Commercial Auto, Homeowners, Commercial Property, General Liability, Workers Comp, Professional Liability, Cyber, Umbrella/Excess",
    "- Perils: Hurricane, Wildfire, Earthquake, Flood, Tornado, Hail, Severe Weather, Cyber Attack, Litigation",
    "- Regions: Use ISO 3166-2 for US states (US-FL, US-CA, US-TX, etc.); spell out full country names (Canada, Mexico, etc.). NEVER use city names.",
    "- Companies: Use exact legal names (State Farm, Allstate, Chubb, The Hanover, Cincinnati Insurance, Erie Insurance, Selective, Hiscox, etc.). Normalize variations.",
    "- Key Trends (CONTROLLED LIST): Climate Risk, Social Inflation, GenAI, Litigation Funding, Tort Reform, Rate Adequacy, Reinsurance, Capacity Constraints, Nuclear Verdicts, AOB, Parametric Insurance, Telematics, ESG, Wildfire Mitigation",
    "- Regulations: Name the specific rule/bulletin if explicit (e.g., 'Florida HB 221', 'NAIC Model Law'); otherwise use 'State DOI Bulletin', 'NAIC', etc.",
    "",
    "# BULLET WRITING EXCELLENCE & FACTS & CITATIONS",
    "Create 3-5 executive summary bullets that tell a complete story:",
    "",
    "STRUCTURE:",
    "• Bullet 1 (HEADLINE): Lead with the most critical finding - what happened and why it matters (max 40 words)",
    "• Bullet 2 (DATA/CONTEXT): Provide quantitative evidence and key context (max 35 words)",
    "• Bullet 3 (IMPLICATIONS): Explain market/industry implications (max 35 words)",
    "• Bullet 4 (TRENDS/DRIVERS): Connect to broader trends or root causes (max 35 words, optional)",
    "• Bullet 5 (OUTLOOK/ACTION): Forward-looking implications or recommended actions (max 35 words, optional)",
    "",
    "FACTS & CITATIONS REQUIREMENTS:",
    "✓ EVERY quantitative claim (numbers, percentages, dollar amounts) MUST have a [n] citation marker",
    "✓ EVERY specific data point MUST map to an item in the citations[] array",
    "✓ If a specific number is not in the source, write 'no quantified data in source' instead of inventing",
    "✓ Citations array must contain ONLY absolute URLs that actually support the bracketed claims",
    "✓ Maximum 5 citations per article; prioritize sources that directly support key facts",
    "✓ Do NOT cite the main article URL unless it contains external links to supporting sources",
    "",
    "QUALITY STANDARDS:",
    "✓ Lead with impact, not background",
    "✓ Use specific numbers, percentages, dollar amounts when available (with citations)",
    "✓ Avoid jargon unless industry-standard (combined ratio, loss ratio, CAT losses, etc.)",
    "✓ Each bullet should stand alone but flow sequentially",
    "✓ Use active voice and strong verbs",
    "✓ Include [1], [2] citation markers for key facts (REQUIRED for all quantitative claims)",
    "",
    "EXAMPLES OF EXCELLENT BULLETS:",
    "✓ \"Florida's tort reforms reduced homeowners defense costs by 23% in Q3 2024, driving the state's combined ratio down to 94.2% from 108.5% in 2023, marking the first underwriting profit in three years.\"",
    "✓ \"California FAIR Plan exposure surged 29.8% to $458 billion as major carriers non-renewed 2.1 million policies in wildfire-prone areas, creating a residual market crisis that threatens state solvency.\"",
    "✓ \"Third-party litigation funding in auto injury claims increased average settlement costs by 47% across 12 states, with Florida, Louisiana, and California seeing the highest impact on loss ratios.\"",
    "",
    "# WHY IT MATTERS (Role-Specific Insights)",
    "Provide crisp, actionable insights for each role (20-120 chars, MUST be actionable):",
    "• Underwriting: What should underwriters watch/change/ask? Impact on risk selection, pricing, appetite, capacity, or underwriting guidelines",
    "• Claims: What should claims teams prepare for? Impact on loss costs, settlement strategies, litigation trends, fraud patterns, or reserve adequacy",
    "• Brokerage: What should brokers advise clients? Impact on market conditions, placement strategies, client risk profiles, or advisory opportunities",
    "• Actuarial: What should actuaries model/adjust? Impact on loss projections, reserving, pricing models, capital requirements, or assumption changes",
    "",
    "ROLE-SPECIFIC EXAMPLES:",
    "✓ Underwriting: 'Tighten underwriting for Florida homeowners; tort reforms reduce defense costs but exposure remains elevated.'",
    "✓ Claims: 'Prepare for higher litigation costs in California; FAIR Plan claims surge 29.8% YoY, requiring enhanced reserve strategies.'",
    "✓ Brokerage: 'Advise clients on residual market growth; placement challenges in FL/CA may require alternative risk transfer solutions.'",
    "✓ Actuarial: 'Update loss projections for CA FAIR Plan; 29.8% exposure growth and $2.7B claims require revised catastrophe models.'",
    "",
    "# SCORING METHODOLOGY",
    "",
    "IMPACT SCORE (0-100): Overall significance to P&C industry",
    "• 90-100: Industry-transforming (major CAT, regulatory overhaul, market crisis)",
    "• 70-89: Highly significant (large carrier action, state-level reform, emerging trend)",
    "• 50-69: Notable (regional impact, specific LOB changes, tactical shifts)",
    "• 30-49: Moderate (company news, incremental changes, niche topics)",
    "• 0-29: Low (tangential relevance, minor updates)",
    "",
    "IMPACT BREAKDOWN (each 0-100, MUST sum conceptually to overall impactScore):",
    "• Market: Effect on rates, capacity, competition, M&A, financial results (0-100)",
    "• Regulatory: Effect on compliance, rate filings, solvency, market conduct (0-100)",
    "• Catastrophe: Effect on loss exposure, reinsurance, accumulation risk (0-100)",
    "• Technology: Effect on operations, underwriting, claims, distribution (0-100)",
    "NOTE: impactBreakdown values reflect emphasis areas, NOT a sum. Each is independent 0-100.",
    "",
    "RISK PULSE (Industry Disruption Potential):",
    "• HIGH: Severe disruption - immediate action required (major CAT, market exit, regulatory emergency)",
    "• MEDIUM: Notable impact - strategic response needed (rate changes, capacity shifts, new regulations)",
    "• LOW: Minor impact - monitoring sufficient (incremental changes, niche developments)",
    "",
    "SENTIMENT:",
    "• POSITIVE: Favorable for industry profitability, stability, or growth",
    "• NEGATIVE: Challenges to profitability, capacity, or operations",
    "• NEUTRAL: Informational without clear directional impact",
    "",
    "CONFIDENCE (0-1): Based on article quality, data specificity, source credibility",
    "• 0.9-1.0: Authoritative source (NAIC, DOI, major carrier), specific quantified data, direct P&C relevance",
    "• 0.7-0.89: Credible source (industry publication), some quantified data, clear industry connection",
    "• 0.5-0.69: General source (news outlet), limited data, indirect relevance",
    "• 0-0.49: Questionable source, vague claims, tangential connection",
    "CONFIDENCE RATIONALE (≤200 chars): Explain WHY this confidence level (e.g., 'NAIC official source with specific loss data' or 'Industry blog with limited quantification')",
    "",
    "# OUTPUT REQUIREMENTS",
    "Return ONLY valid JSON matching the schema. Current date: " + currentDate,
    "Include all required fields: citations array, impactScore, impactBreakdown, confidenceRationale, leadQuote, disclosure.",
    "",
    "LEAD QUOTE (≤300 chars): Extract an exact, short factual excerpt from the article (with quotation marks if direct quote). No opinions or synthesis.",
    "DISCLOSURE (≤200 chars): Set to 'Vendor/Opinionated' if source is promotional or opinion-based; otherwise leave empty string ''.",
    "CITATIONS: Array of absolute URLs that directly support bracketed claims in bullets. Maximum 5 items.",
    "Use citation markers [1], [2] in bullets for ALL quantitative claims.",
    "URL: https://agencychecklists.com/2025/10/20/federal-report-2025-pc-sectors-decade-best-underwriting-profit-77765/",
    "SOURCE: Agency Checklists",
    "PUBLISHED: 2025-10-20",
    "TITLE: Federal Report 2025: P&C Sector’s Decade-Best Underwriting Profit",
    "CONTENT: [truncated content from the article...]",
    "",
    "Example Output:",
    '{"title":"Federal Report 2025: P&C Sector’s Decade-Best Underwriting Profit","url":"https://agencychecklists.com/2025/10/20/federal-report-2025-pc-sectors-decade-best-underwriting-profit-77765/","source":"Agency Checklists","bullets5":["The U.S. P&C sector achieved its best underwriting profit in a decade in 2024, with a combined ratio of 96.7% (down from 101.8% in 2023), net income of $171 billion (more than doubled), and record premiums of $1.06 trillion.","Investment income surged 28% to $88 billion, driven by a high-yield environment, while policyholder surplus grew 7% to $1.1 trillion, reflecting strong financial resilience despite high catastrophe losses.","Litigation costs declined in Florida due to tort reforms, reducing defense costs in homeowners multi-peril lines, while Third-Party Litigation Funding remains a concern.","Residential insurance markets face challenges: Florida Citizens reduced policies from 1.25 million to 924,732, but California’s FAIR Plan saw a 29.8% increase in dwelling policies and paid $2.7 billion in claims after major fires.","AI is transforming underwriting, claims, and fraud detection, with NAIC guidelines in place, while a new market for insuring digital assets is emerging, prompting regulatory discussions."],"whyItMatters":{"underwriting":"Improved combined ratio and premium growth indicate rate adequacy, but residential market pressures and litigation trends require careful risk selection and pricing adjustments.","claims":"Declining litigation costs in Florida signal potential cost savings, but rising claims in California’s FAIR Plan highlight the need for robust claims handling and reinsurance strategies.","brokerage":"Strong premium growth and investment income suggest a favorable market for brokers, but residual market growth and digital asset insurance present new opportunities and challenges.","actuarial":"Record catastrophe losses and litigation trends necessitate refined loss projections, while AI adoption and digital asset risks require updated modeling and regulatory compliance."},"tags":{"lob":["Property","Casualty","Personal Lines","Commercial Lines"],"perils":["Catastrophes","Litigation","Fire","Digital Asset Theft"],"regions":["US","US-FL","US-CA"],"companies":["Florida Citizens","California FAIR Plan"],"trends":["AI Adoption","Tort Reform","Digital Assets"],"regulations":["NAIC Bulletin","Florida Reforms"]},"riskPulse":"MEDIUM","sentiment":"POSITIVE","confidence":0.95}',
  ].join("\n");

  const input = [
    `URL: ${art.url}`,
    `SOURCE: ${art.source}`,
    `PUBLISHED: ${art.publishedAt ?? ""}`,
    `TITLE: ${art.title ?? ""}`,
    `AUTHOR: ${art.author ?? ""}`,
    "CONTENT:",
    (art.text ?? "").slice(0, 14000), // Truncate to avoid token limits
  ].join("\n");

  async function run(model: string) {
    const resp = await client.chat.completions.create({
      model,
      temperature: 0.2,
      max_tokens: 1200, // Increased for expanded schema
      response_format: { type: "json_schema", json_schema: jsonSchema },
      messages: [
        { role: "system", content: system },
        { role: "user", content: input },
      ],
    });
    const outText = resp.choices[0]?.message?.content ?? "{}";
    return schema.parse(JSON.parse(outText));
  }

  // Model routing strategy: try primary model first, fallback to secondary
  const models = ["gpt-4o-mini", "gpt-4-turbo"]; // Primary, then fallback
  let lastError: Error | null = null;

  for (const model of models) {
    try {
      console.log(`[SUMMARIZE] Attempting with model: ${model}`);
      const result = await backOff(() => run(model), {
        numOfAttempts: 3, // Reduced retries per model
        startingDelay: 1000,
        timeMultiple: 2,
        retry: (e) => {
          console.warn(`[SUMMARIZE] ${model} call failed, retrying:`, e);
          return true;
        },
      });

      // Final validation of result
      const validation = schema.safeParse(result);
      if (!validation.success) {
        console.error(`[SUMMARIZE] ${model} response failed validation:`, validation.error);
        lastError = new Error(`Invalid response from ${model}: ${validation.error.message}`);
        continue; // Try next model
      }

      console.log(`[SUMMARIZE] Successfully processed with ${model}`);
      return result;
    } catch (error) {
      console.warn(`[SUMMARIZE] Model ${model} failed:`, error);
      lastError = error instanceof Error ? error : new Error(String(error));
      // Continue to next model
    }
  }

  // All models failed
  console.error("[SUMMARIZE] All models failed:", lastError);
  throw lastError || new Error("Failed to summarize article with all available models");
}

/**
 * Ensure impactScore and impactBreakdown are coherent
 * - impactScore should be 0-100
 * - impactBreakdown fields should be 0-100
 * - impactBreakdown should sum to approximately impactScore (within tolerance)
 */
function ensureImpactCoherence(article: z.infer<typeof schema>): z.infer<typeof schema> {
  const impactScore = Math.max(0, Math.min(100, article.impactScore || 0));

  let impactBreakdown = article.impactBreakdown || {
    market: 0,
    regulatory: 0,
    catastrophe: 0,
    technology: 0,
  };

  // Ensure all breakdown fields are 0-100
  impactBreakdown = {
    market: Math.max(0, Math.min(100, impactBreakdown.market || 0)),
    regulatory: Math.max(0, Math.min(100, impactBreakdown.regulatory || 0)),
    catastrophe: Math.max(0, Math.min(100, impactBreakdown.catastrophe || 0)),
    technology: Math.max(0, Math.min(100, impactBreakdown.technology || 0)),
  };

  // Check coherence: breakdown sum should be close to impactScore
  const breakdownSum = (impactBreakdown.market + impactBreakdown.regulatory +
                        impactBreakdown.catastrophe + impactBreakdown.technology) / 4;

  if (Math.abs(breakdownSum - impactScore) > 20) {
    console.warn(`[IMPACT COHERENCE] Breakdown average (${Math.round(breakdownSum)}) differs from impactScore (${impactScore}) by >20 points`);
  }

  return {
    ...article,
    impactScore,
    impactBreakdown,
  };
}

/**
 * Post-parse validation for article data
 * - Deduplicates citations (case-insensitive)
 * - Validates all citations are proper URLs
 * - Ensures bullets only use [1],[2] markers if citations exist
 * - Removes citation markers from bullets if no valid citations
 * - Ensures impactScore and impactBreakdown are coherent
 * - Validates all required fields are present and non-empty
 */
export function validateAndCleanArticle(article: z.infer<typeof schema>): z.infer<typeof schema> {
  // Validate required fields are present
  if (!article.title || article.title.trim().length === 0) {
    throw new Error('Article title is required and cannot be empty');
  }
  if (!article.url || article.url.trim().length === 0) {
    throw new Error('Article URL is required and cannot be empty');
  }
  if (!article.bullets5 || article.bullets5.length < 3) {
    throw new Error('Article must have at least 3 bullets');
  }

  // Deduplicate citations (case-insensitive), filtering out undefined/null values
  const citationsToProcess = (article.citations || []).filter((c): c is string => c != null);
  const uniqueLowercase = Array.from(new Set(citationsToProcess.map(c => c.toLowerCase())));
  const uniqueCitations = uniqueLowercase
    .map(lower => citationsToProcess.find(orig => orig.toLowerCase() === lower))
    .filter((c): c is string => c != null);

  // Validate all citations are proper URLs
  const validCitations = uniqueCitations.filter(c => {
    if (!c) return false;
    try {
      new URL(c);
      return true;
    } catch {
      console.warn(`Invalid citation URL: ${c}`);
      return false;
    }
  });

  // Clean bullets: remove citation markers if no valid citations exist
  let cleanedBullets = article.bullets5;
  if (validCitations.length === 0) {
    cleanedBullets = article.bullets5.map(b => {
      const hasMarkers = /\[\d+\]/.test(b);
      if (hasMarkers) {
        console.warn(`Removing citation markers from bullet: "${b}"`);
        return b.replace(/\s*\[\d+\]\s*/g, ' ').trim();
      }
      return b;
    });
  } else {
    // Validate that citation markers only reference valid citations
    cleanedBullets = article.bullets5.map(b => {
      const markers = b.match(/\[\d+\]/g) || [];
      const validMarkers = markers.filter(m => {
        const idx = parseInt(m.slice(1, -1), 10);
        return idx > 0 && idx <= validCitations.length;
      });

      if (validMarkers.length < markers.length) {
        console.warn(`Removing invalid citation markers from bullet: "${b}"`);
        let cleaned = b;
        markers.forEach(m => {
          const idx = parseInt(m.slice(1, -1), 10);
          if (idx < 1 || idx > validCitations.length) {
            cleaned = cleaned.replace(m, '');
          }
        });
        return cleaned.replace(/\s+/g, ' ').trim();
      }
      return b;
    });
  }

  let result = {
    ...article,
    bullets5: cleanedBullets,
    citations: validCitations,
  };

  // Ensure impactScore and impactBreakdown are coherent
  result = ensureImpactCoherence(result);

  return result;
}

/**
 * RAG Quality Check: Validates article quality for retrieval-augmented generation
 * Ensures articles are suitable for use in Ask-the-Brief context
 */
export function checkRAGQuality(article: z.infer<typeof schema>): {
  isQuality: boolean;
  score: number;
  issues: string[];
} {
  const issues: string[] = [];
  let score = 100;

  // Check 1: Bullet quality
  if (!article.bullets5 || article.bullets5.length < 3) {
    issues.push('Insufficient bullets (need at least 3)');
    score -= 20;
  }

  for (const bullet of article.bullets5 || []) {
    if (bullet.length < 20) {
      issues.push(`Bullet too short: "${bullet}"`);
      score -= 5;
    }
    if (bullet.length > 200) {
      issues.push(`Bullet too long: "${bullet.slice(0, 50)}..."`);
      score -= 5;
    }
  }

  // Check 2: Citation discipline
  const citationMarkers = (article.bullets5 || [])
    .join(' ')
    .match(/\[\d+\]/g) || [];

  if (citationMarkers.length > 0 && (!article.citations || article.citations.length === 0)) {
    issues.push('Citation markers present but no citations provided');
    score -= 15;
  }

  if (article.citations && article.citations.length > 5) {
    issues.push(`Too many citations (${article.citations.length}, max 5)`);
    score -= 10;
  }

  // Check 3: Why It Matters quality
  const whyItMatters = article.whyItMatters || {};
  const roles: Array<keyof typeof whyItMatters> = ['underwriting', 'claims', 'brokerage', 'actuarial'];
  for (const role of roles) {
    const text = (whyItMatters[role] as string) || '';
    if (text.length < 20) {
      issues.push(`${role} impact too brief`);
      score -= 5;
    }
    if (text.length > 200) {
      issues.push(`${role} impact too long`);
      score -= 5;
    }
  }

  // Check 4: Confidence level
  if (article.confidence < 0.5) {
    issues.push(`Low confidence score (${article.confidence})`);
    score -= 10;
  }

  // Check 5: Impact score validity
  if (article.impactScore < 30) {
    issues.push(`Low impact score (${article.impactScore})`);
    score -= 5;
  }

  // Check 6: Lead quote presence
  if (!article.leadQuote || article.leadQuote.length < 10) {
    issues.push('Missing or too-short lead quote');
    score -= 10;
  }

  return {
    isQuality: score >= 70,
    score: Math.max(0, score),
    issues,
  };
}

export async function embedForRAG(client: OpenAI, text: string): Promise<number[]> {
  // Validate input
  if (!text || text.trim().length === 0) {
    throw new Error('Cannot embed empty text');
  }

  // Truncate text to avoid token limits (embeddings have limits)
  const maxChars = 8000;
  const truncatedText = text.length > maxChars ? text.slice(0, maxChars) : text;

  // Enhanced text for better semantic capture: Prefix with P&C context
  const enhancedText = `P&C Insurance Article: ${truncatedText}`;

  try {
    const e = await client.embeddings.create({
      model: "text-embedding-3-small",
      input: enhancedText,
      dimensions: 512, // Increased dimensions for better similarity
    });

    if (!e.data || e.data.length === 0) {
      throw new Error('No embedding returned from API');
    }

    const embedding = e.data[0].embedding;
    if (!embedding || embedding.length === 0) {
      throw new Error('Empty embedding vector returned');
    }

    return embedding;
  } catch (error) {
    console.error('[EMBED] Failed to generate embedding:', error);
    // Fallback: return zero vector with correct dimensions
    // This allows processing to continue without breaking the pipeline
    console.warn('[EMBED] Using fallback zero vector for embedding');
    return new Array(512).fill(0);
  }
}

/**
 * Generate canonical URL (respect og:url if present)
 */
export function getCanonicalUrl(url: string, html?: string): string {
  if (!html) return url;

  try {
    const dom = new JSDOM(html);
    const ogUrl = dom.window.document.querySelector('meta[property="og:url"]')?.getAttribute("content");
    if (ogUrl) return ogUrl;

    const canonical = dom.window.document.querySelector('link[rel="canonical"]')?.getAttribute("href");
    if (canonical) {
      return canonical.startsWith('http') ? canonical : new URL(canonical, url).href;
    }
  } catch {
    // Ignore parsing errors
  }

  return url;
}

/**
 * AI-driven article scoring for P&C insurance professionals (v3 Enhanced)
 * Uses LLM to evaluate relevance, impact, and professional interest
 * Focuses on actionability and decision-making value
 * Includes timeout, retry, and fallback logic
 */
export async function scoreArticleWithAI(
  client: OpenAI,
  article: {
    title: string;
    bullets5?: string[];
    whyItMatters?: Record<string, string>;
    tags?: Record<string, unknown>;
    impactScore?: number;
    publishedAt?: string;
    regulatory?: boolean;
    stormName?: string;
    riskPulse?: string;
    sentiment?: string;
  }
): Promise<number> {
  const TIMEOUT_MS = 10000; // 10 second timeout
  const MAX_RETRIES = 2;

  const scoreWithTimeout = async (): Promise<number> => {
    const prompt = `You are a senior P&C insurance analyst evaluating article relevance for industry professionals (underwriters, claims adjusters, actuaries, brokers, risk managers).

ARTICLE ANALYSIS:
Title: ${article.title}

Executive Summary:
${(article.bullets5 || []).map((b, i) => `${i + 1}. ${b}`).join('\n')}

Professional Impact:
${Object.entries(article.whyItMatters || {})
  .map(([role, impact]) => `• ${role.toUpperCase()}: ${impact}`)
  .join('\n')}

Metadata:
• Tags: ${JSON.stringify(article.tags || {})}
• Impact Score: ${article.impactScore || 0}/100
• Risk Pulse: ${article.riskPulse || 'UNKNOWN'}
• Sentiment: ${article.sentiment || 'NEUTRAL'}
• Regulatory: ${article.regulatory ? 'Yes' : 'No'}
• Named Storm: ${article.stormName || 'None'}
• Published: ${article.publishedAt || 'Unknown'}

SCORING CRITERIA (0-100):

Rate this article's value to P&C insurance professionals based on:

1. PROFESSIONAL RELEVANCE (35 points):
   - Direct impact on underwriting decisions, pricing, or risk selection
   - Affects claims handling, settlement strategies, or loss costs
   - Influences actuarial models, reserving, or capital requirements
   - Impacts brokerage placement, client advisory, or market access

2. ACTIONABILITY (25 points):
   - Provides specific data, metrics, or quantitative insights
   - Enables immediate decision-making or strategic planning
   - Offers competitive intelligence or market positioning insights
   - Contains regulatory guidance or compliance requirements

3. MARKET SIGNIFICANCE (25 points):
   - Affects rates, capacity, or market availability
   - Involves major carriers, significant market share, or systemic risk
   - Represents emerging trends or structural market changes
   - Impacts reinsurance, capital markets, or industry economics

4. TIMELINESS & URGENCY (15 points):
   - Breaking news requiring immediate attention
   - Time-sensitive regulatory or catastrophe developments
   - Evolving situations with ongoing implications
   - Enduring relevance beyond immediate news cycle

SCORING GUIDELINES:
• 90-100: CRITICAL - Industry-transforming events (major CAT, regulatory overhaul, market crisis, carrier insolvency)
• 75-89: HIGH VALUE - Significant developments (state reforms, large carrier actions, emerging trends, material rate changes)
• 60-74: VALUABLE - Notable industry news (regional impacts, specific LOB changes, tactical intelligence)
• 45-59: MODERATE - Relevant updates (company news, incremental changes, niche topics)
• 30-44: LIMITED - Tangential relevance (peripheral topics, minor updates, low actionability)
• 0-29: LOW - Minimal P&C relevance (general business news, unrelated topics)

PRIORITIZE:
✓ Catastrophe loss events and accumulation risk
✓ Regulatory changes affecting rates, forms, or solvency
✓ Litigation trends and nuclear verdicts
✓ Market capacity shifts and carrier exits/entries
✓ Rate adequacy and combined ratio impacts
✓ Reinsurance market developments
✓ Technology disruption (AI, telematics, parametric)
✓ Climate risk and secondary perils
✓ Social inflation and claims cost trends

DEPRIORITIZE:
✗ Generic business news without P&C angle
✗ Promotional content or vendor marketing
✗ Life/health insurance topics
✗ International news without U.S. market impact
✗ Tangential technology without insurance application

Respond with ONLY a single integer 0-100, no explanation or additional text.`;

    // Create abort controller for timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);

    try {
      const response = await client.chat.completions.create({
        model: "gpt-4o-mini",
        temperature: 0.1, // Low temperature for consistent scoring
        max_tokens: 10,
        messages: [{ role: "user", content: prompt }],
      });

      clearTimeout(timeoutId);

      const scoreText = (response.choices[0].message.content || "50").trim();
      const score = parseInt(scoreText, 10);

      if (isNaN(score) || score < 0 || score > 100) {
        console.warn(`[AI SCORE] Invalid score "${scoreText}", defaulting to 50`);
        return 50;
      }

      console.log(`[AI SCORE] "${article.title}" → ${score}/100`);
      return score;
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  };

  // Retry logic with exponential backoff
  for (let attempt = 0; attempt <= MAX_RETRIES; attempt++) {
    try {
      return await scoreWithTimeout();
    } catch (error) {
      if (attempt === MAX_RETRIES) {
        console.error(`[AI SCORE] Failed after ${MAX_RETRIES + 1} attempts:`, error);
        return 50; // Final fallback
      }
      const delay = Math.pow(2, attempt) * 1000; // 1s, 2s, 4s
      console.warn(`[AI SCORE] Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  return 50; // Should not reach here, but safety fallback
}

=================================================================================
FILE: functions/src/index.ts
=================================================================================

import {onSchedule} from "firebase-functions/v2/scheduler";
import {onRequest} from "firebase-functions/v2/https";
import {defineSecret} from "firebase-functions/params";
import {initializeApp} from "firebase-admin/app";
import {getFirestore} from "firebase-admin/firestore";
import OpenAI from "openai";
import Parser from "rss-parser";
import {extractArticle, summarizeAndTag, embedForRAG, hashUrl, calculateSmartScore, normalizeRegions, normalizeCompanies, getCanonicalUrl, computeContentHash, detectStormName, isRegulatorySource, scoreArticleWithAI, validateAndCleanArticle, checkRAGQuality} from "./agents";

initializeApp();
const db = getFirestore();
const OPENAI_API_KEY = defineSecret("OPENAI_API_KEY");

/**
 * Firestore-backed rate limiter for askBrief endpoint
 * Tracks requests per IP with sliding window and TTL expiration
 */
const RATE_LIMIT_WINDOW_MS = 60 * 60 * 1000; // 1 hour
const RATE_LIMIT_MAX_REQUESTS = 20; // 20 requests per hour per IP

/**
 * Check rate limit using Firestore with sliding window
 * Uses hashed IP for privacy, TTL for automatic cleanup
 */
async function checkRateLimit(ip: string): Promise<boolean> {
  try {
    const hashedIp = hashUrl(ip); // Hash IP for privacy
    const rateLimitRef = db.collection('rate_limits').doc(hashedIp);
    const now = Date.now();
    const windowStart = now - RATE_LIMIT_WINDOW_MS;

    // Get current rate limit record
    const doc = await rateLimitRef.get();
    let requests: number[] = [];

    if (doc.exists) {
      const data = doc.data();
      requests = (data?.requests || []).filter((ts: number) => ts > windowStart);
    }

    // Check if limit exceeded
    if (requests.length >= RATE_LIMIT_MAX_REQUESTS) {
      console.log(`[RATE LIMIT] IP ${ip} exceeded limit: ${requests.length}/${RATE_LIMIT_MAX_REQUESTS}`);
      return false;
    }

    // Add current request and update
    requests.push(now);
    await rateLimitRef.set({
      requests,
      lastRequest: new Date(),
      expiresAt: new Date(now + RATE_LIMIT_WINDOW_MS + 60 * 60 * 1000), // TTL: window + 1 hour
    });

    return true;
  } catch (error) {
    console.error('[RATE LIMIT ERROR]', error);
    // On error, allow request (fail open for availability)
    return true;
  }
}

/**
 * CORS configuration - centralized from environment
 * Supports comma-separated origins and wildcard for localhost
 */
function getAllowedOrigins(): string[] {
  const envOrigins = process.env.ALLOWED_ORIGINS || '';

  if (envOrigins) {
    return envOrigins.split(',').map(o => o.trim()).filter(o => o.length > 0);
  }

  // Default origins if env not set
  return [
    'https://carriersignal.web.app',
    'https://carriersignal.firebaseapp.com',
    'http://localhost:5173',
    'http://localhost:5174',
    'http://localhost:4173',
  ];
}

/**
 * Check if origin is allowed for CORS
 * Supports wildcard matching for localhost development
 */
function checkCORS(origin: string | undefined): boolean {
  if (!origin) return false;

  const allowedOrigins = getAllowedOrigins();

  // Check for exact match or prefix match
  return allowedOrigins.some(allowed => {
    if (allowed === '*') return true; // Wildcard
    if (allowed.includes('localhost') && origin.includes('localhost')) return true; // Localhost wildcard
    return origin.startsWith(allowed);
  });
}

/**
 * Comprehensive error handler for API endpoints
 * Provides consistent error responses with proper HTTP status codes
 */
interface ErrorResponse {
  error: string;
  code?: string;
  details?: Record<string, unknown>;
  timestamp: string;
}

function createErrorResponse(error: unknown, defaultCode: string = 'INTERNAL_ERROR'): ErrorResponse {
  if (error instanceof Error) {
    return {
      error: error.message,
      code: defaultCode,
      timestamp: new Date().toISOString(),
    };
  }

  return {
    error: String(error),
    code: defaultCode,
    timestamp: new Date().toISOString(),
  };
}

function getHttpStatusCode(error: unknown): number {
  if (error instanceof Error) {
    const msg = error.message.toLowerCase();
    if (msg.includes('invalid') || msg.includes('validation')) return 400;
    if (msg.includes('not found') || msg.includes('404')) return 404;
    if (msg.includes('unauthorized') || msg.includes('forbidden')) return 403;
    if (msg.includes('timeout') || msg.includes('rate limit')) return 429;
  }
  return 500;
}

/**
 * RSS Feed sources for batch processing
 * Configurable feed registry with categories, priority, and enabled flags
 */
interface FeedSource {
  url: string;
  category: 'news' | 'regulatory' | 'catastrophe' | 'reinsurance' | 'technology';
  priority: number; // 1 = highest
  enabled: boolean;
}

// Default feed sources - can be overridden by Firestore configuration
// Curated catalog of P&C insurance industry sources across multiple categories
const DEFAULT_FEED_SOURCES: FeedSource[] = [
  // ============================================================================
  // NEWS FEEDS (General P&C Insurance Industry News)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/national/", category: 'news', priority: 1, enabled: true },
  { url: "https://www.insurancejournal.com/rss/news/international/", category: 'news', priority: 2, enabled: true },
  { url: "https://www.claimsjournal.com/rss/", category: 'news', priority: 2, enabled: true },
  { url: "https://www.propertycasualty360.com/feed/", category: 'news', priority: 2, enabled: true },
  { url: "https://www.riskandinsurance.com/feed/", category: 'news', priority: 3, enabled: true },
  { url: "https://www.carriermanagement.com/feed/", category: 'news', priority: 3, enabled: true },
  { url: "https://www.insurancebusinessmag.com/us/rss/", category: 'news', priority: 3, enabled: true },
  { url: "https://www.insurancenewsnet.com/feed/", category: 'news', priority: 3, enabled: true },

  // ============================================================================
  // REGULATORY FEEDS (State DOI, NAIC, Regulatory Bulletins)
  // ============================================================================
  { url: "https://www.naic.org/rss/", category: 'regulatory', priority: 1, enabled: true },
  // Note: Individual state DOI feeds would be added here as they become available
  // Examples: CA DOI, FL DOI, TX DOI, NY DFS, etc.

  // ============================================================================
  // CATASTROPHE FEEDS (Named Storms, Natural Disasters, CAT Events)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/catastrophes/", category: 'catastrophe', priority: 1, enabled: true },
  // NOAA NHC and NWS feeds for hurricane/severe weather tracking
  // Note: These feeds may require custom parsing due to non-standard RSS formats

  // ============================================================================
  // REINSURANCE FEEDS (Reinsurance Market News & Capacity)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/reinsurance/", category: 'reinsurance', priority: 2, enabled: true },
  // Artemis/ILS, The Insurer, and other reinsurance-specific sources
  // Note: Some reinsurance sources may require authentication or have limited RSS availability

  // ============================================================================
  // TECHNOLOGY FEEDS (InsurTech, Industry Tech, Digital Transformation)
  // ============================================================================
  { url: "https://www.insurancejournal.com/rss/news/technology/", category: 'technology', priority: 3, enabled: true },
  // Additional tech-focused insurance industry blogs and publications
];

// Runtime cache for feeds (loaded from Firestore on startup)
let cachedFeeds: FeedSource[] = DEFAULT_FEED_SOURCES;
let feedsCacheTime = 0;
const FEEDS_CACHE_TTL_MS = 60 * 60 * 1000; // 1 hour

/**
 * Load feeds from Firestore, with fallback to defaults
 * Caches results for 1 hour to avoid excessive Firestore reads
 */
async function loadFeedsFromFirestore(): Promise<FeedSource[]> {
  const now = Date.now();

  // Return cached feeds if still valid
  if (feedsCacheTime > 0 && now - feedsCacheTime < FEEDS_CACHE_TTL_MS) {
    console.log('[FEEDS] Using cached feeds');
    return cachedFeeds;
  }

  try {
    const snapshot = await db.collection('feeds').get();
    if (snapshot.empty) {
      console.log('[FEEDS] No feeds in Firestore, using defaults');
      cachedFeeds = DEFAULT_FEED_SOURCES;
    } else {
      cachedFeeds = snapshot.docs
        .map(doc => doc.data() as FeedSource)
        .filter(f => f.enabled);
      console.log(`[FEEDS] Loaded ${cachedFeeds.length} enabled feeds from Firestore`);
    }
    feedsCacheTime = now;
    return cachedFeeds;
  } catch (error) {
    console.warn('[FEEDS] Error loading from Firestore, using defaults:', error);
    cachedFeeds = DEFAULT_FEED_SOURCES;
    feedsCacheTime = now;
    return cachedFeeds;
  }
}

// For backward compatibility, extract URLs from default sources
const FEEDS = DEFAULT_FEED_SOURCES.filter(f => f.enabled).map(f => f.url);

/**
 * Initialize feeds collection in Firestore (one-time setup)
 * Seeds from DEFAULT_FEED_SOURCES and can be called manually or on first deploy
 */
async function initializeFeedsCollection() {
  const batch = db.batch();

  for (const feed of DEFAULT_FEED_SOURCES) {
    const feedRef = db.collection('feeds').doc(hashUrl(feed.url));
    batch.set(feedRef, {
      ...feed,
      createdAt: new Date(),
      updatedAt: new Date(),
    }, { merge: true });
  }

  await batch.commit();
  console.log(`[FEEDS] Initialized ${DEFAULT_FEED_SOURCES.length} feeds in Firestore`);

  // Clear cache to force reload
  feedsCacheTime = 0;
}



/**
 * Shared logic for refreshing feeds with batch processing
 * Processes articles in batches with retry logic and detailed logging
 */
async function refreshFeedsLogic(apiKey: string) {
  const client = new OpenAI({apiKey});
  const parser = new Parser();

  // Generate unique batch ID for tracking
  const batchId = `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const results = {processed: 0, skipped: 0, errors: 0, feedsProcessed: 0, totalTokens: 0, totalLatencyMs: 0};
  const batchStartTime = Date.now();

  console.log(`[BATCH ${batchId}] Starting batch refresh...`);

  // Load feeds dynamically from Firestore
  const feeds = await loadFeedsFromFirestore();
  const feedUrls = feeds.map(f => f.url);
  console.log(`[BATCH ${batchId}] Loaded ${feedUrls.length} feeds from Firestore`);

  for (const feedUrl of feedUrls) {
    const feedStartTime = Date.now();
    const feedId = hashUrl(feedUrl);

    // Check circuit breaker before attempting feed
    if (!canAttemptFeed(feedUrl)) {
      console.warn(`[BATCH ${batchId}] [FEED ${feedId}] Skipped (circuit breaker OPEN): ${feedUrl}`);
      results.skipped++;
      continue;
    }

    try {
      console.log(`[BATCH ${batchId}] [FEED ${feedId}] Fetching feed: ${feedUrl}`);
      const feed = await parser.parseURL(feedUrl);
      const feedLatency = Date.now() - feedStartTime;
      console.log(`[BATCH ${batchId}] [FEED ${feedId}] Found ${feed.items.length} items in ${feedLatency}ms: ${feedUrl}`);
      results.feedsProcessed++;
      results.totalLatencyMs += feedLatency;
      recordFeedSuccess(feedUrl); // Update circuit breaker
      updateFeedHealth(feedUrl, true); // Track successful fetch

      // Process articles in parallel batches (5 at a time)
      const articles = feed.items.slice(0, BATCH_CONFIG.batchSize);
      const PARALLEL_BATCH_SIZE = 5;

      for (let batchStart = 0; batchStart < articles.length; batchStart += PARALLEL_BATCH_SIZE) {
        const batchEnd = Math.min(batchStart + PARALLEL_BATCH_SIZE, articles.length);
        const batchArticles = articles.slice(batchStart, batchEnd);

        // Process articles in parallel within this batch
        await Promise.all(batchArticles.map(async (item, batchIndex) => {
          const i = batchStart + batchIndex;
          const itemIndex = i + 1;
          let articleStartTime = Date.now();

          try {
            if (!item.link) {
              console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Skipping item without link`);
              results.skipped++;
              return;
            }

          const url = item.link;
          const id = hashUrl(url);
          const docRef = db.collection("articles").doc(id);

          // Idempotency check: use transaction to ensure atomic read-write
          const idempotencyKey = `${batchId}_${feedId}_${id}`;
          const idempotencyRef = db.collection("_idempotency").doc(idempotencyKey);
          const idempotencyDoc = await idempotencyRef.get();

          if (idempotencyDoc.exists) {
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Already processed in this batch (idempotent)`);
            results.skipped++;
            return;
          }

          // Check if article already exists in database
          const exists = (await docRef.get()).exists;
          if (exists) {
            console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Article already exists`);
            results.skipped++;
            return;
          }

          articleStartTime = Date.now();
          console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Processing: ${url}`);

          // Extract full content with retry logic
          let content: Awaited<ReturnType<typeof extractArticle>> | undefined;
          let extractRetries = 0;
          while (extractRetries < BATCH_CONFIG.maxRetries) {
            try {
              content = await extractArticle(url);
              break;
            } catch (error) {
              extractRetries++;
              if (extractRetries < BATCH_CONFIG.maxRetries) {
                console.log(`[ARTICLE ${itemIndex}/${articles.length}] Extract retry ${extractRetries}/${BATCH_CONFIG.maxRetries}`);
                await new Promise(resolve => setTimeout(resolve, BATCH_CONFIG.retryDelayMs));
              } else {
                throw error;
              }
            }
          }

          if (!content || !content.text || content.text.length < 100) {
            console.log(`[ARTICLE ${itemIndex}/${articles.length}] Article text too short (${content?.text?.length || 0} chars): ${url}`);
            results.skipped++;
            return;
          }

          // Summarize & classify
          let brief = await summarizeAndTag(client, {
            url,
            source: (item.creator || feed.title || content.url || "").toString(),
            publishedAt: item.isoDate || item.pubDate || "",
            title: content.title,
            text: content.text,
          });

          // Post-parse validation: deduplicate citations, validate URLs
          brief = validateAndCleanArticle(brief);

          // RAG Quality Check: Ensure article is suitable for retrieval
          const ragQuality = checkRAGQuality(brief);
          if (!ragQuality.isQuality) {
            console.warn(`[ARTICLE ${itemIndex}/${articles.length}] RAG quality check failed (score: ${ragQuality.score}/100):`, ragQuality.issues);
            // Log but don't skip - store with quality flag for filtering
          }

          // Entity normalization (always set, with defaults)
          const regionsNormalized = brief.tags?.regions && brief.tags.regions.length > 0
            ? normalizeRegions(brief.tags.regions)
            : [];
          const companiesNormalized = brief.tags?.companies && brief.tags.companies.length > 0
            ? normalizeCompanies(brief.tags.companies)
            : [];

          // Verify normalization is always set
          if (!Array.isArray(regionsNormalized)) {
            console.warn(`[ARTICLE ${itemIndex}/${articles.length}] regionsNormalized is not an array, defaulting to []`);
          }
          if (!Array.isArray(companiesNormalized)) {
            console.warn(`[ARTICLE ${itemIndex}/${articles.length}] companiesNormalized is not an array, defaulting to []`);
          }

          // Deduplication: canonical URL and content hash
          const canonicalUrl = getCanonicalUrl(url, content.html);
          const contentHash = computeContentHash(content.text);

          // Multi-layer deduplication check
          // 1. Check for duplicates by content hash
          const duplicateByContentHash = await db.collection('articles')
            .where('contentHash', '==', contentHash)
            .limit(1)
            .get();

          if (!duplicateByContentHash.empty) {
            console.log(`[ARTICLE ${itemIndex}/${articles.length}] Duplicate detected (content hash match): ${brief.title}`);
            results.skipped++;
            return;
          }

          // 2. Check for duplicates by canonical URL
          const duplicateByCanonicalUrl = await db.collection('articles')
            .where('canonicalUrl', '==', canonicalUrl)
            .limit(1)
            .get();

          if (!duplicateByCanonicalUrl.empty) {
            console.log(`[ARTICLE ${itemIndex}/${articles.length}] Duplicate detected (canonical URL match): ${brief.title}`);
            results.skipped++;
            return;
          }

          // 3. Check for duplicates by title + source (fuzzy match for syndicated content)
          const duplicateByTitleSource = await db.collection('articles')
            .where('title', '==', brief.title)
            .where('source', '==', brief.source)
            .limit(1)
            .get();

          if (!duplicateByTitleSource.empty) {
            console.log(`[ARTICLE ${itemIndex}/${articles.length}] Duplicate detected (title + source match): ${brief.title}`);
            results.skipped++;
            return;
          }

          // Use content hash as cluster ID for grouping related articles
          const clusterId = contentHash;

          // Regulatory detection: check if source is DOI or has regulatory keywords
          const regulatory = isRegulatorySource(url, brief.source) ||
                            (brief.tags?.regulations && brief.tags.regulations.length > 0);

          // Catastrophe detection: storm names
          const stormName = detectStormName(`${brief.title} ${content.text.slice(0, 1000)}`);

          // Build an embedding for Ask‑the‑Brief
          const emb = await embedForRAG(
            client,
            `${brief.title}\n${brief.bullets5.join("\n")}\n${Object.values(brief.whyItMatters).join("\n")}`
          );

          // Calculate SmartScore v3 (enhanced)
          const smartScore = calculateSmartScore({
            publishedAt: item.isoDate || item.pubDate || "",
            impactScore: brief.impactScore,
            impactBreakdown: brief.impactBreakdown,
            tags: brief.tags,
            regulatory,
            riskPulse: brief.riskPulse,
            stormName,
          });

          // AI-driven scoring for P&C professionals (v3 enhanced)
          const aiScore = await scoreArticleWithAI(client, {
            title: brief.title,
            bullets5: brief.bullets5,
            whyItMatters: brief.whyItMatters,
            tags: brief.tags,
            impactScore: brief.impactScore,
            publishedAt: item.isoDate || item.pubDate,
            regulatory,
            stormName,
            riskPulse: brief.riskPulse,
            sentiment: brief.sentiment,
          });

          // Store article metadata (without embedding for performance)
          await docRef.set({
            ...brief,
            publishedAt: item.isoDate || item.pubDate || "",
            createdAt: new Date(),
            smartScore,
            aiScore,
            ragQualityScore: ragQuality.score,
            ragQualityIssues: ragQuality.issues,
            regionsNormalized,
            companiesNormalized,
            canonicalUrl,
            contentHash,
            clusterId,
            regulatory,
            stormName: stormName || null,
            batchProcessedAt: new Date(),
          });

          // Store embedding in separate collection for performance
          await db.collection("article_embeddings").doc(id).set({
            embedding: emb,
            articleId: id,
            createdAt: new Date(),
          });

          // Record idempotency key to prevent reprocessing in same batch
          // TTL: 24 hours (idempotency window)
          await idempotencyRef.set({
            batchId,
            feedUrl,
            articleUrl: url,
            articleId: id,
            processedAt: new Date(),
            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
          });

          // Check link health (B2 - Link Health Checking)
          // Perform lightweight HEAD check to verify article URL is accessible
          const linkOk = await checkLinkHealth(canonicalUrl || url);

          // Update article with link health status
          await docRef.update({
            linkOk,
            lastCheckedAt: new Date(),
          });

          const articleLatency = Date.now() - articleStartTime;
          results.totalLatencyMs += articleLatency;
          console.log(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Successfully processed in ${articleLatency}ms (linkOk: ${linkOk}): ${brief.title}`);
          results.processed++;
        } catch (error) {
          const articleLatency = Date.now() - articleStartTime;
          results.totalLatencyMs += articleLatency;
          console.error(`[BATCH ${batchId}] [FEED ${feedId}] [ARTICLE ${itemIndex}/${articles.length}] Error after ${articleLatency}ms:`, error);
          results.errors++;
        }
        }));
      }

      const feedDuration = Date.now() - feedStartTime;
      console.log(`[BATCH ${batchId}] [FEED ${feedId}] Completed in ${feedDuration}ms`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error(`[BATCH ${batchId}] [FEED ${feedId}] Error fetching feed:`, errorMessage);
      recordFeedFailure(feedUrl); // Update circuit breaker
      updateFeedHealth(feedUrl, false, errorMessage); // Track failed fetch
      results.errors++;
      // Continue to next feed instead of failing entire batch
    }
  }

  const totalDuration = Date.now() - batchStartTime;
  console.log(`[BATCH ${batchId}] SUMMARY | Duration: ${totalDuration}ms | Feeds: ${results.feedsProcessed} | Processed: ${results.processed} | Skipped: ${results.skipped} | Errors: ${results.errors} | AvgLatency: ${results.processed > 0 ? Math.round(results.totalLatencyMs / results.processed) : 0}ms`);

  return results;
}

/**
 * Batch refresh configuration
 * Defines the recurring schedule for news article batch processing
 */
const BATCH_CONFIG = {
  // Primary batch: Every 60 minutes (hourly)
  interval: 60,
  timeZone: "America/New_York",
  // Batch size: Process up to 50 articles per batch
  batchSize: 50,
  // Retry configuration
  maxRetries: 3,
  retryDelayMs: 5000,
};

/**
 * Circuit breaker state for feed health
 * Prevents hammering feeds that are consistently failing
 */
interface CircuitBreakerState {
  url: string;
  state: 'CLOSED' | 'OPEN' | 'HALF_OPEN';
  failureCount: number;
  lastFailureTime: number;
  successCount: number;
}

const circuitBreakers = new Map<string, CircuitBreakerState>();
const CIRCUIT_BREAKER_THRESHOLD = 5; // Failures before opening
const CIRCUIT_BREAKER_TIMEOUT_MS = 5 * 60 * 1000; // 5 minutes before half-open

/**
 * Feed health tracking - persisted to Firestore
 * Monitors success/failure rates for each RSS feed
 */
interface FeedHealth {
  url: string;
  successCount: number;
  failureCount: number;
  lastSuccessAt?: FirebaseFirestore.Timestamp | Date;
  lastFailureAt?: FirebaseFirestore.Timestamp | Date;
  lastError?: string;
  updatedAt: FirebaseFirestore.Timestamp | Date;
}

/**
 * Circuit breaker pattern for feed resilience
 * Prevents cascading failures by temporarily disabling problematic feeds
 */
function getCircuitBreakerState(feedUrl: string): CircuitBreakerState {
  if (!circuitBreakers.has(feedUrl)) {
    circuitBreakers.set(feedUrl, {
      url: feedUrl,
      state: 'CLOSED',
      failureCount: 0,
      lastFailureTime: 0,
      successCount: 0,
    });
  }
  return circuitBreakers.get(feedUrl)!;
}

function canAttemptFeed(feedUrl: string): boolean {
  const breaker = getCircuitBreakerState(feedUrl);
  const now = Date.now();

  if (breaker.state === 'CLOSED') {
    return true; // Normal operation
  }

  if (breaker.state === 'OPEN') {
    // Check if timeout has elapsed to transition to HALF_OPEN
    if (now - breaker.lastFailureTime > CIRCUIT_BREAKER_TIMEOUT_MS) {
      breaker.state = 'HALF_OPEN';
      breaker.failureCount = 0;
      console.log(`[CIRCUIT BREAKER] ${feedUrl} transitioning to HALF_OPEN`);
      return true;
    }
    return false; // Still open, skip this feed
  }

  // HALF_OPEN state - allow one attempt
  return true;
}

function recordFeedSuccess(feedUrl: string): void {
  const breaker = getCircuitBreakerState(feedUrl);
  breaker.failureCount = 0;
  breaker.successCount++;

  if (breaker.state === 'HALF_OPEN') {
    breaker.state = 'CLOSED';
    console.log(`[CIRCUIT BREAKER] ${feedUrl} recovered to CLOSED`);
  }
}

function recordFeedFailure(feedUrl: string): void {
  const breaker = getCircuitBreakerState(feedUrl);
  breaker.failureCount++;
  breaker.lastFailureTime = Date.now();

  if (breaker.failureCount >= CIRCUIT_BREAKER_THRESHOLD && breaker.state !== 'OPEN') {
    breaker.state = 'OPEN';
    console.warn(`[CIRCUIT BREAKER] ${feedUrl} opened after ${breaker.failureCount} failures`);
  }
}

/**
 * Check if a URL is accessible (B2 - Link Health Checking)
 * Performs a lightweight HEAD request to verify link availability
 * Returns true if status is 2xx or 3xx, false otherwise
 */
async function checkLinkHealth(url: string): Promise<boolean> {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout

    const response = await fetch(url, {
      method: "HEAD",
      redirect: "follow",
      signal: controller.signal,
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
      },
    });

    clearTimeout(timeoutId);
    return response.ok || (response.status >= 300 && response.status < 400);
  } catch (error) {
    console.warn(`[LINK HEALTH] Failed to check ${url}:`, error instanceof Error ? error.message : String(error));
    return false;
  }
}

/**
 * Update feed health metrics in Firestore
 */
async function updateFeedHealth(feedUrl: string, success: boolean, error?: string) {
  try {
    const healthRef = db.collection('feed_health').doc(hashUrl(feedUrl));
    const healthDoc = await healthRef.get();

    const health: FeedHealth = healthDoc.exists
      ? (healthDoc.data() as FeedHealth)
      : {
          url: feedUrl,
          successCount: 0,
          failureCount: 0,
          updatedAt: new Date(),
        };

    if (success) {
      health.successCount++;
      health.lastSuccessAt = new Date();
    } else {
      health.failureCount++;
      health.lastFailureAt = new Date();
      if (error) health.lastError = error;
    }

    health.updatedAt = new Date();

    await healthRef.set(health);

    // Log warning if failure rate > 50%
    const total = health.successCount + health.failureCount;
    if (total > 5 && health.failureCount / total > 0.5) {
      console.warn(
        `[FEED HEALTH WARNING] ${feedUrl} has high failure rate: ${health.failureCount}/${total}`
      );
    }
  } catch (e) {
    console.error('[FEED HEALTH ERROR] Failed to update feed health:', e);
    // Don't throw - health tracking failure shouldn't break feed processing
  }
}

/**
 * Enhanced refresh logic with batch processing and detailed logging
 */
async function refreshFeedsWithBatching(apiKey: string) {
  const startTime = Date.now();
  console.log(`[BATCH START] Initiating news feed batch refresh at ${new Date().toISOString()}`);
  console.log(`[BATCH CONFIG] Interval: ${BATCH_CONFIG.interval}min, BatchSize: ${BATCH_CONFIG.batchSize}, MaxRetries: ${BATCH_CONFIG.maxRetries}`);

  try {
    const results = await refreshFeedsLogic(apiKey);
    const duration = Date.now() - startTime;

    console.log(`[BATCH COMPLETE] Refresh completed in ${duration}ms`);
    console.log(`[BATCH RESULTS] Processed: ${results.processed}, Skipped: ${results.skipped}, Errors: ${results.errors}`);

    // Log batch completion to Firestore for monitoring
    await logBatchCompletion({
      timestamp: new Date(),
      duration,
      processed: results.processed,
      skipped: results.skipped,
      errors: results.errors,
      status: 'success',
    });

    return results;
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`[BATCH ERROR] Batch refresh failed after ${duration}ms:`, error);

    // Log batch failure to Firestore for monitoring
    await logBatchCompletion({
      timestamp: new Date(),
      duration,
      processed: 0,
      skipped: 0,
      errors: 1,
      status: 'failed',
      errorMessage: error instanceof Error ? error.message : 'Unknown error',
    });

    throw error;
  }
}

/**
 * Log batch completion metrics to Firestore for monitoring and analytics
 */
async function logBatchCompletion(metrics: Record<string, unknown>) {
  try {
    await db.collection('batch_logs').add({
      ...metrics,
      batchInterval: BATCH_CONFIG.interval,
      batchSize: BATCH_CONFIG.batchSize,
    });
  } catch (error) {
    console.error('[BATCH LOG ERROR] Failed to log batch metrics:', error);
    // Don't throw - logging failure shouldn't fail the batch
  }
}

// 1) Scheduled gatherer (hourly batch refresh)
export const refreshFeeds = onSchedule(
  {schedule: `every ${BATCH_CONFIG.interval} minutes`, timeZone: BATCH_CONFIG.timeZone, secrets: [OPENAI_API_KEY]},
  async () => {
    await refreshFeedsWithBatching(OPENAI_API_KEY.value());
  }
);

// 1a) Initialize feeds collection (one-time setup)
export const initializeFeeds = onRequest(
  {cors: false},
  async (req, res) => {
    try {
      // CORS check for admin endpoints
      const origin = req.headers.origin;
      if (!checkCORS(origin)) {
        res.status(403).json({error: "Forbidden: Invalid origin"});
        return;
      }
      res.set('Access-Control-Allow-Origin', origin);

      console.log("[INIT FEEDS] Initializing feeds collection");
      await initializeFeedsCollection();
      res.json({
        success: true,
        message: "Feeds collection initialized",
        feedCount: DEFAULT_FEED_SOURCES.length,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      console.error('[INIT FEEDS ERROR]', error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  }
);

// 1b) Manual trigger for batch refresh (HTTP callable - restricted)
export const refreshFeedsManual = onRequest(
  {cors: false, secrets: [OPENAI_API_KEY], timeoutSeconds: 540},
  async (req, res) => {
    try {
      // CORS check for admin endpoints
      const origin = req.headers.origin;
      if (!checkCORS(origin)) {
        res.status(403).json({error: "Forbidden: Invalid origin"});
        return;
      }
      res.set('Access-Control-Allow-Origin', origin);

      console.log("[MANUAL TRIGGER] Feed refresh initiated via HTTP request");
      const results = await refreshFeedsWithBatching(OPENAI_API_KEY.value());
      res.json({
        success: true,
        message: "Batch feed refresh complete",
        batchConfig: BATCH_CONFIG,
        results,
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const err = error as any;
      console.error("[MANUAL TRIGGER ERROR] Error in refreshFeedsManual:", err);
      res.status(500).json({
        success: false,
        error: err.message || "Unknown error",
        stack: err.stack,
        timestamp: new Date().toISOString(),
      });
    }
  }
);

// 1c) Test single article processing
export const testSingleArticle = onRequest(
  {cors: true, secrets: [OPENAI_API_KEY]},
  async (_req, res) => {
    try {
      console.log("[TEST] Single article processing test initiated");
      const client = new OpenAI({apiKey: OPENAI_API_KEY.value()});
      const parser = new Parser();

      const feedUrl = FEEDS[0];
      console.log(`[TEST] Fetching feed: ${feedUrl}`);
      const feed = await parser.parseURL(feedUrl);
      console.log(`[TEST] Found ${feed.items.length} items`);

      if (feed.items.length === 0) {
        res.json({error: "No items in feed", timestamp: new Date().toISOString()});
        return;
      }

      const item = feed.items[0];
      const url = item.link!;
      console.log(`[TEST] Processing: ${url}`);

      // Extract
      const content = await extractArticle(url);
      console.log(`[TEST] Extracted ${content.text?.length || 0} characters`);

      // Summarize
      let brief = await summarizeAndTag(client, {
        url,
        source: (item.creator || feed.title || "").toString(),
        publishedAt: item.isoDate || item.pubDate || "",
        title: content.title,
        text: content.text,
      });

      // Post-parse validation: deduplicate citations, validate URLs
      brief = validateAndCleanArticle(brief);

      console.log(`[TEST] Summarized: ${brief.title}`);

      res.json({
        success: true,
        batchConfig: BATCH_CONFIG,
        article: {
          url,
          extractedLength: content.text?.length || 0,
          brief,
        },
        timestamp: new Date().toISOString(),
      });
    } catch (error) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const err = error as any;
      console.error("Error in testSingleArticle:", err);
      res.status(500).json({
        success: false,
        error: err.message || "Unknown error",
        stack: err.stack,
      });
    }
  }
);

// 4) Feed Health Report (monitoring endpoint)
export const feedHealthReport = onRequest({cors: true}, async (_req, res) => {
  try {
    // Fetch all feed health records from Firestore
    const healthSnapshot = await db.collection('feed_health').get();

    const healthData = healthSnapshot.docs.map(doc => {
      const health = doc.data() as FeedHealth;
      const total = health.successCount + health.failureCount;

      // Handle Firestore Timestamp or Date
      const lastSuccess = health.lastSuccessAt instanceof Date
        ? health.lastSuccessAt.toISOString()
        : health.lastSuccessAt?.toDate?.()?.toISOString();
      const lastFailure = health.lastFailureAt instanceof Date
        ? health.lastFailureAt.toISOString()
        : health.lastFailureAt?.toDate?.()?.toISOString();

      return {
        url: health.url,
        successCount: health.successCount,
        failureCount: health.failureCount,
        successRate: total > 0 ? (health.successCount / total * 100).toFixed(2) + '%' : 'N/A',
        lastSuccess,
        lastFailure,
        lastError: health.lastError,
        status: total === 0 ? 'UNKNOWN' : (health.failureCount / total > 0.5 ? 'UNHEALTHY' : 'HEALTHY'),
      };
    });

    res.json({
      success: true,
      timestamp: new Date().toISOString(),
      totalFeeds: FEEDS.length,
      monitoredFeeds: healthData.length,
      feeds: healthData,
    });
  } catch (error) {
    console.error('[FEED HEALTH ERROR]', error);
    res.status(500).json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    });
  }
});

/**
 * Cosine similarity helper
 */
function cosineSimilarity(a: number[], b: number[]): number {
  const dot = a.reduce((s, v, i) => s + v * b[i], 0);
  const ma = Math.sqrt(a.reduce((s, v) => s + v * v, 0));
  const mb = Math.sqrt(b.reduce((s, v) => s + v * v, 0));
  return dot / (ma * mb);
}

/**
 * Maximal Marginal Relevance (MMR) re-ranking
 * Balances relevance with diversity to avoid redundant results
 */
function mmrRerank(
  items: Array<{it: Record<string, unknown>; score: number}>,
  topK: number,
  lambda: number = 0.7
): Array<{it: Record<string, unknown>; score: number; mmrScore: number}> {
  const selected: Array<{it: Record<string, unknown>; score: number; mmrScore: number}> = [];
  const remaining = [...items];

  while (selected.length < topK && remaining.length > 0) {
    let bestIdx = 0;
    let bestScore = -Infinity;

    for (let i = 0; i < remaining.length; i++) {
      const relevance = remaining[i].score;

      // Diversity: penalize items similar to already-selected items
      let diversity = 1.0;
      if (selected.length > 0) {
        const maxSimilarity = Math.max(
          ...selected.map(s => cosineSimilarity(remaining[i].it.embedding as number[], s.it.embedding as number[]))
        );
        diversity = 1.0 - maxSimilarity;
      }

      const mmrScore = lambda * relevance + (1 - lambda) * diversity;
      if (mmrScore > bestScore) {
        bestScore = mmrScore;
        bestIdx = i;
      }
    }

    const [selected_item] = remaining.splice(bestIdx, 1);
    selected.push({...selected_item, mmrScore: bestScore});
  }

  return selected;
}

/**
 * Apply cluster diversity: limit to 1 article per clusterId
 */
function applyClusterDiversity(
  items: Array<{it: Record<string, unknown>; score: number; mmrScore?: number}>,
  maxPerCluster: number = 1
): Array<{it: Record<string, unknown>; score: number; mmrScore?: number}> {
  const clusterMap = new Map<string, Array<{it: Record<string, unknown>; score: number; mmrScore?: number}>>();

  for (const item of items) {
    const clusterId = (item.it.clusterId || item.it.id) as string;
    if (!clusterMap.has(clusterId)) {
      clusterMap.set(clusterId, []);
    }
    clusterMap.get(clusterId)!.push(item);
  }

  const result: Array<{it: Record<string, unknown>; score: number; mmrScore?: number}> = [];
  for (const cluster of clusterMap.values()) {
    // Take top N from each cluster (sorted by score)
    result.push(...cluster.sort((a, b) => (b.mmrScore ?? b.score) - (a.mmrScore ?? a.score)).slice(0, maxPerCluster));
  }

  return result;
}

/**
 * Apply recency boost: recent articles get higher scores
 */
function applyRecencyBoost(
  items: Array<{it: Record<string, unknown>; score: number; mmrScore?: number}>,
  boostFactor: number = 0.1
): Array<{it: Record<string, unknown>; score: number; mmrScore?: number; recencyBoostedScore?: number}> {
  const now = Date.now();
  const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days

  return items.map(item => {
    let createdAt: Date;
    const rawDate = item.it.createdAt;
    if (rawDate instanceof Date) {
      createdAt = rawDate;
    } else if (typeof rawDate === "object" && rawDate !== null && "toDate" in rawDate) {
      createdAt = (rawDate as {toDate: () => Date}).toDate();
    } else if (typeof rawDate === "number") {
      createdAt = new Date(rawDate);
    } else {
      createdAt = new Date();
    }
    const age = now - createdAt.getTime();
    const recencyScore = Math.max(0, 1 - age / maxAge);
    const boostedScore = (item.mmrScore ?? item.score) + recencyScore * boostFactor;

    return {...item, recencyBoostedScore: boostedScore};
  });
}

/**
 * Simple BM25-style keyword scoring for hybrid retrieval (D2)
 * Scores articles based on keyword matches in title, bullets, and tags
 */
function scoreByKeywords(query: string, article: Record<string, unknown>): number {
  const queryTerms = query.toLowerCase().split(/\s+/).filter(t => t.length > 2);
  if (queryTerms.length === 0) return 0;

  let score = 0;
  const text = [
    (article.title as string) || "",
    ((article.bullets5 as string[]) || []).join(" "),
    ((article.tags as {trends?: string[]})?.trends || []).join(" "),
    ((article.tags as {regulations?: string[]})?.regulations || []).join(" "),
    ((article.tags as {perils?: string[]})?.perils || []).join(" "),
  ].join(" ").toLowerCase();

  for (const term of queryTerms) {
    const matches = (text.match(new RegExp(term, "g")) || []).length;
    score += matches * 10; // Weight each match
  }

  return score;
}

/**
 * Promote regulatory and CAT documents when relevant (D2)
 */
function promoteRegulatoryAndCAT(items: Array<{it: Record<string, unknown>; score: number}>, query: string): Array<{it: Record<string, unknown>; score: number}> {
  const regulatoryKeywords = ["regulatory", "naic", "doi", "bulletin", "rule", "regulation", "compliance"];
  const catKeywords = ["hurricane", "storm", "catastrophe", "cat", "disaster", "wildfire", "earthquake"];

  const queryLower = query.toLowerCase();
  const isRegulatoryQuery = regulatoryKeywords.some(kw => queryLower.includes(kw));
  const isCATQuery = catKeywords.some(kw => queryLower.includes(kw));

  return items.map(item => {
    let boost = 1.0;
    if (isRegulatoryQuery && item.it.regulatory) {
      boost *= 1.5; // 50% boost for regulatory articles
    }
    if (isCATQuery && item.it.stormName) {
      boost *= 1.5; // 50% boost for CAT articles
    }
    return {...item, score: item.score * boost};
  });
}

// 2) Ask‑the‑Brief (RAG with hybrid retrieval, MMR, and cluster diversity)
export const askBrief = onRequest({cors: false, secrets: [OPENAI_API_KEY]}, async (req, res) => {
  const startTime = Date.now();
  try {
    // CORS check
    const origin = req.headers.origin;
    if (!checkCORS(origin)) {
      res.status(403).json(createErrorResponse('Forbidden: Invalid origin', 'CORS_ERROR'));
      return;
    }
    res.set('Access-Control-Allow-Origin', origin);
    res.set('Access-Control-Allow-Methods', 'GET, POST');
    res.set('Access-Control-Allow-Headers', 'Content-Type');

    // Handle preflight
    if (req.method === 'OPTIONS') {
      res.status(204).send('');
      return;
    }

    // Rate limiting (Firestore-backed)
    const ip = req.headers['x-forwarded-for']?.toString().split(',')[0] || req.ip || 'unknown';
    const rateLimitOk = await checkRateLimit(ip);
    if (!rateLimitOk) {
      res.status(429).json(createErrorResponse('Rate limit exceeded. Please try again later.', 'RATE_LIMIT_EXCEEDED'));
      return;
    }

    // Input validation and sanitization
    const rawQuery = (req.query.q || req.body?.q || "").toString();
    const q = rawQuery.replace(/<[^>]*>/g, '').slice(0, 500); // Strip HTML, limit length
    if (!q || q.trim().length < 3) {
      res.status(400).json(createErrorResponse('Query required (min 3 characters)', 'INVALID_QUERY'));
      return;
    }

    const client = new OpenAI({apiKey: OPENAI_API_KEY.value()});

    // Fetch recent articles - reduced from 500 to 200 for better performance
    const snap = await db.collection("articles").orderBy("createdAt", "desc").limit(200).get();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const articles = snap.docs.map((d) => ({id: d.id, ...d.data()} as any));

    if (articles.length === 0) {
      res.json({
        answerText: "No articles found in context.",
        bullets: [],
        sources: [],
        related: [],
        usedArticles: [],
        highlights: [],
        latencyMs: Date.now() - startTime,
      });
      return;
    }

    // Batch fetch embeddings in chunks of 10 (Firestore 'in' query limit)
    const articleIds = articles.map(a => a.id);
    const embeddingMap = new Map<string, unknown>();

    for (let i = 0; i < articleIds.length; i += 10) {
      const chunk = articleIds.slice(i, i + 10);
      const embeddingSnap = await db.collection("article_embeddings").where("articleId", "in", chunk).get();
      embeddingSnap.docs.forEach(d => {
        embeddingMap.set(d.data().articleId, d.data().embedding);
      });
    }

    // Merge embeddings with articles
    const items = articles
      .filter(a => embeddingMap.has(a.id)) // Only include articles with embeddings
      .map(a => ({...a, embedding: embeddingMap.get(a.id)} as Record<string, unknown>));

    if (items.length === 0) {
      res.json({
        answerText: "No articles with embeddings found in context.",
        bullets: [],
        sources: [],
        related: [],
        usedArticles: [],
        highlights: [],
        latencyMs: Date.now() - startTime,
      });
      return;
    }

    // Embed the query (MUST match stored embedding dimensions: 512)
    const qEmb = (await client.embeddings.create({
      model: "text-embedding-3-small",
      input: q,
      dimensions: 512,
    })).data[0].embedding;

    // Step 1: Hybrid retrieval - combine semantic and keyword scoring (D2)
    const keywordScored = items.map((it) => ({
      it,
      semanticScore: cosineSimilarity(qEmb, it.embedding as number[]),
      keywordScore: scoreByKeywords(q, it),
    }));

    // Normalize scores to 0-1 range
    const maxKeywordScore = Math.max(...keywordScored.map(x => x.keywordScore), 1);
    const hybridScored = keywordScored.map(x => ({
      ...x,
      score: (x.semanticScore * 0.6) + ((x.keywordScore / maxKeywordScore) * 0.4), // 60% semantic, 40% keyword
    }));

    // Step 2: Promote regulatory and CAT documents (D2)
    const promoted = promoteRegulatoryAndCAT(hybridScored, q);

    // Step 3: Cosine similarity ranking (top 20 for MMR)
    const cosineSimilarityRanked = promoted
      .sort((a, b) => b.score - a.score)
      .slice(0, 20);

    // Step 4: MMR re-ranking for diversity
    const mmrRanked = mmrRerank(cosineSimilarityRanked, 12, 0.7);

    // Step 5: Apply cluster diversity (max 1 per cluster)
    const diverseRanked = applyClusterDiversity(mmrRanked, 1);

    // Step 6: Apply recency boost
    const finalRanked = applyRecencyBoost(diverseRanked, 0.1)
      .sort((a, b) => (b.recencyBoostedScore ?? b.mmrScore ?? b.score) - (a.recencyBoostedScore ?? a.mmrScore ?? a.score))
      .slice(0, 8);

    // Build context from top results
    const context = finalRanked.map((r) => {
      const title = r.it.title as string;
      const bullets = (r.it.bullets5 as string[]) || [];
      const whyItMatters = (r.it.whyItMatters as Record<string, unknown>) || {};
      const canonicalUrl = r.it.canonicalUrl as string | undefined;
      const url = r.it.url as string;
      return `TITLE: ${title}\nBULLETS:\n- ${bullets.join("\n- ")}\nWHY:\n${
        Object.entries(whyItMatters).map(([k, v]) => `${k.toUpperCase()}: ${v}`).join("\n")
      }\nURL: ${canonicalUrl || url}`;
    }).join("\n\n---\n\n");

    // Generate answer with structured output
    const answer = await client.chat.completions.create({
      model: "gpt-4o-mini",
      temperature: 0.2,
      max_tokens: 500,
      messages: [
        {
          role: "system",
          content: "You are a P&C insurance analyst. Answer using ONLY the provided context. " +
            "If information is not found, respond with 'Not found in current context.' " +
            "Provide: 1) Short answer (1-2 sentences), 2) 3 bullet-point rationale, 3) Inline citations with [URL] format.",
        },
        {role: "user", content: `Question: ${q}\n\nContext:\n${context}`},
      ],
    });

    const answerText = answer.choices[0]?.message?.content ?? "Not found in current context.";

    // GUARDRAIL: Extract URLs from answer and validate against source articles
    // This prevents hallucinated links by only allowing URLs from the context
    const validArticleUrls = new Set(finalRanked.map(r => {
      const canonicalUrl = r.it.canonicalUrl as string | undefined;
      const url = r.it.url as string;
      return (canonicalUrl || url).toLowerCase();
    }));

    // Extract URLs from answer text (both [URL] format and plain URLs)
    const urlPattern = /\[?(https?:\/\/[^\s[\]]+)\]?/gi;
    const extractedUrls = new Set<string>();
    let match;
    while ((match = urlPattern.exec(answerText)) !== null) {
      const url = match[1].toLowerCase();
      // Only include URLs that are in our source articles
      if (validArticleUrls.has(url)) {
        extractedUrls.add(url);
      } else {
        console.warn(`[ASK BRIEF GUARDRAIL] Rejected hallucinated URL: ${url}`);
      }
    }

    // Build citations from validated URLs
    const citations = finalRanked
      .filter(r => {
        const canonicalUrl = r.it.canonicalUrl as string | undefined;
        const url = r.it.url as string;
        return extractedUrls.has((canonicalUrl || url).toLowerCase());
      })
      .map(r => ({
        title: r.it.title as string,
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
      }));

    // If no citations were extracted, include all source articles as fallback
    if (citations.length === 0) {
      citations.push(...finalRanked.map(r => ({
        title: r.it.title as string,
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
      })));
    }

    const latencyMs = Date.now() - startTime;
    console.log(`[ASK BRIEF] Query: "${q}" | Results: ${finalRanked.length} | Latency: ${latencyMs}ms`);

    // D1: Structured JSON output with enhanced fields
    res.json({
      answerText,
      bullets: finalRanked.slice(0, 3).map(r => ((r.it.bullets5 as string[]) || [])[0] || ''),
      sources: citations,
      related: finalRanked.slice(0, 5).map(r => ({
        title: r.it.title as string,
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
        clusterId: r.it.clusterId as string | undefined,
      })),
      usedArticles: finalRanked.map(r => r.it.id as string),
      highlights: finalRanked.slice(0, 3).map(r => ({
        quote: (r.it.leadQuote as string | undefined) || ((r.it.bullets5 as string[]) || [])[0] || '',
        url: (r.it.canonicalUrl as string | undefined) || (r.it.url as string),
      })),
      latencyMs,
    });
  } catch (e) {
    const statusCode = getHttpStatusCode(e);
    const errorResponse = createErrorResponse(e, 'ASK_BRIEF_ERROR');
    console.error('[ASK BRIEF ERROR]', errorResponse);
    res.status(statusCode).json(errorResponse);
  }
});

/**
 * Reader View Endpoint (B1)
 *
 * Fetches an article URL and returns sanitized HTML for display in a Quick Read modal.
 * Strips tracking, injects canonical source attribution, and returns safe HTML.
 *
 * Query Parameters:
 * - url: The article URL to fetch and sanitize
 *
 * Response:
 * {
 *   title: string,
 *   byline?: string,
 *   published?: string,
 *   mainImage?: string,
 *   html: string (sanitized)
 * }
 */
export const readerView = onRequest(
  {cors: true, timeoutSeconds: 30},
  async (req, res) => {
    try {
      const startTime = Date.now();
      const url = req.query.url as string;

      if (!url) {
        res.status(400).json({error: "Missing 'url' query parameter"});
        return;
      }

      // Validate URL format
      try {
        new URL(url);
      } catch {
        res.status(400).json({error: "Invalid URL format"});
        return;
      }

      console.log(`[READER VIEW] Fetching: ${url}`);

      // Extract article using existing utility
      const content = await extractArticle(url);

      if (!content || !content.html) {
        res.status(404).json({error: "Could not extract article content"});
        return;
      }

      // Sanitize HTML: remove scripts, tracking pixels, and dangerous elements
      const sanitizedHtml = sanitizeHtml(content.html);

      // Inject canonical source attribution at the end
      const attributedHtml = `${sanitizedHtml}
<div style="margin-top: 2rem; padding-top: 1rem; border-top: 1px solid #e5e7eb; font-size: 0.875rem; color: #6b7280;">
  <p><strong>Source:</strong> <a href="${url}" target="_blank" rel="noopener noreferrer">${new URL(url).hostname}</a></p>
  <p style="margin-top: 0.5rem; font-size: 0.75rem; color: #9ca3af;">Read via CarrierSignal Quick Read</p>
</div>`;

      const latencyMs = Date.now() - startTime;

      res.json({
        title: content.title || "Article",
        byline: content.author,
        mainImage: content.mainImage,
        html: attributedHtml,
        latencyMs,
      });
    } catch (error) {
      console.error('[READER VIEW ERROR]', error);
      res.status(500).json({
        error: error instanceof Error ? error.message : "Failed to fetch article",
      });
    }
  }
);

/**
 * Sanitize HTML for safe display
 * Removes scripts, tracking pixels, and dangerous elements
 * Preserves formatting and links
 */
function sanitizeHtml(html: string): string {
  // Remove script tags and content
  let sanitized = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "");

  // Remove style tags and content
  sanitized = sanitized.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, "");

  // Remove tracking pixels and iframes
  sanitized = sanitized.replace(/<img[^>]*(?:tracking|pixel|beacon)[^>]*>/gi, "");
  sanitized = sanitized.replace(/<iframe[^>]*>/gi, "");

  // Remove event handlers
  sanitized = sanitized.replace(/\s*on\w+\s*=\s*["'][^"']*["']/gi, "");
  sanitized = sanitized.replace(/\s*on\w+\s*=\s*[^\s>]*/gi, "");

  // Remove meta tags except for basic ones
  sanitized = sanitized.replace(/<meta[^>]*(?:tracking|analytics|facebook|twitter)[^>]*>/gi, "");

  // Remove noscript tags
  sanitized = sanitized.replace(/<noscript[^>]*>[\s\S]*?<\/noscript>/gi, "");

  // Remove comments
  sanitized = sanitized.replace(/<!--[\s\S]*?-->/g, "");

  return sanitized;
}





=================================================================================
FILE: functions/src/utils.ts
=================================================================================

/**
 * Pure utility functions for CarrierSignal
 * These functions have no external dependencies and can be easily tested
 */

import crypto from 'node:crypto';

/**
 * US State normalization map: common names/abbreviations → ISO 3166-2 codes
 */
const STATE_NORMALIZATION: Record<string, string> = {
  'alabama': 'US-AL', 'al': 'US-AL',
  'alaska': 'US-AK', 'ak': 'US-AK',
  'arizona': 'US-AZ', 'az': 'US-AZ',
  'arkansas': 'US-AR', 'ar': 'US-AR',
  'california': 'US-CA', 'ca': 'US-CA', 'calif': 'US-CA',
  'colorado': 'US-CO', 'co': 'US-CO',
  'connecticut': 'US-CT', 'ct': 'US-CT',
  'delaware': 'US-DE', 'de': 'US-DE',
  'florida': 'US-FL', 'fl': 'US-FL', 'fla': 'US-FL',
  'georgia': 'US-GA', 'ga': 'US-GA',
  'hawaii': 'US-HI', 'hi': 'US-HI',
  'idaho': 'US-ID', 'id': 'US-ID',
  'illinois': 'US-IL', 'il': 'US-IL',
  'indiana': 'US-IN', 'in': 'US-IN',
  'iowa': 'US-IA', 'ia': 'US-IA',
  'kansas': 'US-KS', 'ks': 'US-KS',
  'kentucky': 'US-KY', 'ky': 'US-KY',
  'louisiana': 'US-LA', 'la': 'US-LA',
  'maine': 'US-ME', 'me': 'US-ME',
  'maryland': 'US-MD', 'md': 'US-MD',
  'massachusetts': 'US-MA', 'ma': 'US-MA', 'mass': 'US-MA',
  'michigan': 'US-MI', 'mi': 'US-MI',
  'minnesota': 'US-MN', 'mn': 'US-MN',
  'mississippi': 'US-MS', 'ms': 'US-MS',
  'missouri': 'US-MO', 'mo': 'US-MO',
  'montana': 'US-MT', 'mt': 'US-MT',
  'nebraska': 'US-NE', 'ne': 'US-NE',
  'nevada': 'US-NV', 'nv': 'US-NV',
  'new hampshire': 'US-NH', 'nh': 'US-NH',
  'new jersey': 'US-NJ', 'nj': 'US-NJ',
  'new mexico': 'US-NM', 'nm': 'US-NM',
  'new york': 'US-NY', 'ny': 'US-NY',
  'north carolina': 'US-NC', 'nc': 'US-NC',
  'north dakota': 'US-ND', 'nd': 'US-ND',
  'ohio': 'US-OH', 'oh': 'US-OH',
  'oklahoma': 'US-OK', 'ok': 'US-OK',
  'oregon': 'US-OR', 'or': 'US-OR',
  'pennsylvania': 'US-PA', 'pa': 'US-PA',
  'rhode island': 'US-RI', 'ri': 'US-RI',
  'south carolina': 'US-SC', 'sc': 'US-SC',
  'south dakota': 'US-SD', 'sd': 'US-SD',
  'tennessee': 'US-TN', 'tn': 'US-TN',
  'texas': 'US-TX', 'tx': 'US-TX',
  'utah': 'US-UT', 'ut': 'US-UT',
  'vermont': 'US-VT', 'vt': 'US-VT',
  'virginia': 'US-VA', 'va': 'US-VA',
  'washington': 'US-WA', 'wa': 'US-WA',
  'west virginia': 'US-WV', 'wv': 'US-WV',
  'wisconsin': 'US-WI', 'wi': 'US-WI',
  'wyoming': 'US-WY', 'wy': 'US-WY',
  'district of columbia': 'US-DC', 'dc': 'US-DC', 'washington dc': 'US-DC',
};

/**
 * Company name normalization map
 */
const COMPANY_NORMALIZATION: Record<string, string> = {
  'state farm': 'State Farm',
  'statefarm': 'State Farm',
  'allstate': 'Allstate',
  'geico': 'GEICO',
  'progressive': 'Progressive',
  'usaa': 'USAA',
  'liberty mutual': 'Liberty Mutual',
  'farmers': 'Farmers Insurance',
  'nationwide': 'Nationwide',
  'travelers': 'Travelers',
  'american family': 'American Family Insurance',
  'chubb': 'Chubb',
  'hartford': 'The Hartford',
  'aig': 'AIG',
  'zurich': 'Zurich',
  'allianz': 'Allianz',
  'axa': 'AXA',
  'berkshire hathaway': 'Berkshire Hathaway',
  'markel': 'Markel',
  'fairfax': 'Fairfax Financial',
  'citizens': 'Citizens Property Insurance',
  'florida citizens': 'Citizens Property Insurance',
  'california fair plan': 'California FAIR Plan',
  'fair plan': 'California FAIR Plan',
};

/**
 * Normalize regions to ISO 3166-2 codes
 */
export function normalizeRegions(regions: string[]): string[] {
  const normalized = new Set<string>();

  for (const region of regions) {
    const lower = region.toLowerCase().trim();

    // Already ISO format
    if (lower.startsWith('us-') && lower.length === 5) {
      normalized.add(region.toUpperCase());
      continue;
    }

    // Check normalization map
    if (STATE_NORMALIZATION[lower]) {
      normalized.add(STATE_NORMALIZATION[lower]);
    } else {
      // Keep original if not found
      normalized.add(region);
    }
  }

  return Array.from(normalized);
}

/**
 * Normalize company names to canonical forms
 */
export function normalizeCompanies(companies: string[]): string[] {
  const normalized = new Set<string>();

  for (const company of companies) {
    const lower = company.toLowerCase().trim();

    if (COMPANY_NORMALIZATION[lower]) {
      normalized.add(COMPANY_NORMALIZATION[lower]);
    } else {
      // Keep original if not found
      normalized.add(company);
    }
  }

  return Array.from(normalized);
}

/**
 * Compute content hash for deduplication
 */
export function computeContentHash(text: string): string {
  const normalized = text.toLowerCase()
    .replace(/[^a-z0-9\s]/g, '')
    .replace(/\s+/g, ' ')
    .trim();

  const sample = normalized.slice(0, 500);
  return crypto.createHash("sha256").update(sample).digest("hex").slice(0, 16);
}

/**
 * Detect storm/hurricane names from text
 */
export function detectStormName(text: string): string | undefined {
  const patterns = [
    /Hurricane\s+([A-Z][a-z]+)/gi,
    /Tropical\s+Storm\s+([A-Z][a-z]+)/gi,
    /Typhoon\s+([A-Z][a-z]+)/gi,
    /Cyclone\s+([A-Z][a-z]+)/gi,
  ];

  for (const pattern of patterns) {
    const match = pattern.exec(text);
    if (match) {
      return match[0];
    }
  }

  return undefined;
}

/**
 * Detect if article is from a regulatory source
 */
export function isRegulatorySource(url: string, source: string): boolean {
  const regulatoryUrlKeywords = [
    'doi.', 'insurance.ca.gov', 'floir.com', 'tdi.texas.gov',
    'dfs.ny.gov', 'insurance.pa.gov', 'naic.org',
  ];

  const regulatorySourceKeywords = [
    'naic', 'dfs', 'doi', 'department of insurance', 'insurance commissioner',
    'state insurance', 'regulatory', 'regulator',
  ];

  const urlLower = url.toLowerCase();
  const sourceLower = source.toLowerCase();

  return regulatoryUrlKeywords.some(keyword => urlLower.includes(keyword)) ||
    regulatorySourceKeywords.some(keyword => sourceLower.includes(keyword));
}

/**
 * Calculate SmartScore v4 - Enhanced Dynamic Ranking for P&C Insurance Professionals
 *
 * Scoring Philosophy:
 * - Balances recency with enduring relevance (breaking news vs. structural changes)
 * - Prioritizes actionable intelligence over general news
 * - Weights catastrophe, regulatory, and market-moving events heavily
 * - Considers multi-dimensional impact (market, regulatory, catastrophe, technology)
 * - Applies dynamic decay as articles age to ensure older content naturally moves down
 * - Incorporates engagement metrics and professional interest signals
 *
 * Key Improvements:
 * 1. Dynamic recency decay that properly degrades scores over time
 * 2. Content-type-aware decay curves (breaking news vs. evergreen)
 * 3. Interest-based scoring incorporating engagement metrics
 * 4. Real-time score calculation to ensure accurate ranking
 */
export function calculateSmartScore(params: {
  publishedAt?: string;
  impactScore: number;
  impactBreakdown?: {
    market?: number;
    regulatory?: number;
    catastrophe?: number;
    technology?: number;
  };
  tags?: {
    regulations?: string[];
    perils?: string[];
    lob?: string[];
    trends?: string[];
  };
  regulatory?: boolean;
  riskPulse?: 'LOW' | 'MEDIUM' | 'HIGH';
  stormName?: string;
  // New engagement metrics for interest-based scoring
  engagementMetrics?: {
    clicks?: number;
    saves?: number;
    shares?: number;
    timeSpent?: number; // seconds
  };
  // New field to track if this is evergreen content
  isEvergreen?: boolean;
}): number {
  const now = Date.now();
  const pubDate = params.publishedAt ? new Date(params.publishedAt).getTime() : now;
  const ageHours = Math.max(0, (now - pubDate) / (1000 * 60 * 60));
  const ageDays = ageHours / 24;

  // Classify content type for appropriate decay curve
  const isCatastrophe = !!params.stormName || (params.impactBreakdown?.catastrophe ?? 0) > 50;
  const isRegulatory = params.regulatory || (params.tags?.regulations && params.tags.regulations.length > 0);
  const isEvergreen = params.isEvergreen || (params.tags?.trends?.length ?? 0) > 0;

  // ENHANCED RECENCY DECAY: Dynamic decay that properly degrades older articles
  // Different decay curves for different content types:
  // - Breaking News (CAT/Regulatory): Steep initial decay, then plateau
  // - Market News: Medium decay curve
  // - Evergreen Content: Slow decay, maintains relevance longer
  // - General News: Fast decay, quickly becomes less relevant

  let recencyScore: number;

  if (isCatastrophe) {
    // Catastrophe news: High relevance for 72 hours, then gradual decay
    // Formula: 100 * exp(-age^1.2 / 100) - steep initial drop, then plateau
    recencyScore = Math.max(0, 100 * Math.exp(-Math.pow(ageHours, 1.2) / 100));
  } else if (isRegulatory) {
    // Regulatory news: High relevance for 48 hours, then gradual decay
    // Formula: 100 * exp(-age^1.1 / 80)
    recencyScore = Math.max(0, 100 * Math.exp(-Math.pow(ageHours, 1.1) / 80));
  } else if (isEvergreen) {
    // Evergreen content: Slow decay, maintains relevance for weeks
    // Formula: 100 * exp(-age / 240) - very gradual decay (10 day half-life)
    recencyScore = Math.max(0, 100 * Math.exp(-ageHours / 240));
  } else {
    // General news: Fast decay, becomes less relevant quickly
    // Formula: 100 * exp(-age / 24) - 24 hour half-life
    recencyScore = Math.max(0, 100 * Math.exp(-ageHours / 24));
  }

  // Multi-dimensional impact scoring
  const impactBreakdown = params.impactBreakdown || {
    market: params.impactScore * 0.25,
    regulatory: params.impactScore * 0.25,
    catastrophe: params.impactScore * 0.25,
    technology: params.impactScore * 0.25,
  };

  // Weight different impact dimensions based on P&C industry priorities
  const weightedImpact =
    (impactBreakdown.market || 0) * 0.30 +        // Market impact: 30% (rates, capacity, competition)
    (impactBreakdown.regulatory || 0) * 0.35 +    // Regulatory: 35% (highest - directly affects operations)
    (impactBreakdown.catastrophe || 0) * 0.25 +   // Catastrophe: 25% (loss events, exposure)
    (impactBreakdown.technology || 0) * 0.10;     // Technology: 10% (innovation, but less immediate)

  // INTEREST-BASED SCORING: Factor in user engagement metrics
  // Engagement signals indicate professional interest and value
  let engagementBoost = 1.0;
  if (params.engagementMetrics) {
    const { clicks = 0, saves = 0, shares = 0, timeSpent = 0 } = params.engagementMetrics;

    // Normalize engagement metrics (assuming reasonable maximums)
    const clickScore = Math.min(clicks / 100, 1.0) * 0.4;      // 40% weight
    const saveScore = Math.min(saves / 50, 1.0) * 0.35;        // 35% weight
    const shareScore = Math.min(shares / 20, 1.0) * 0.15;      // 15% weight
    const timeScore = Math.min(timeSpent / 300, 1.0) * 0.10;   // 10% weight (5 min max)

    const normalizedEngagement = clickScore + saveScore + shareScore + timeScore;
    // Boost score by up to 15% based on engagement
    engagementBoost = 1.0 + (normalizedEngagement * 0.15);
  }

  // Risk pulse multiplier (industry disruption potential)
  const riskPulseMultiplier =
    params.riskPulse === 'HIGH' ? 1.25 :
    params.riskPulse === 'MEDIUM' ? 1.10 :
    1.0;

  // Regulatory boost (critical for compliance and operations)
  const regulatoryBoost = isRegulatory ? 1.20 : 1.0;

  // Catastrophe boost with graduated scale
  const catPerils = ['Hurricane', 'Wildfire', 'Earthquake', 'Flood', 'Tornado', 'Severe Weather', 'Hail', 'Winter Storm', 'Convective Storm'];
  const hasCatPeril = params.tags?.perils?.some(p =>
    catPerils.some(cat => p.toLowerCase().includes(cat.toLowerCase()))
  ) || false;

  // Named storm gets higher boost
  const catastropheBoost = params.stormName ? 1.30 : (hasCatPeril ? 1.15 : 1.0);

  // High-value trend boost (emerging risks and opportunities)
  const highValueTrends = [
    'Climate Risk', 'Social Inflation', 'GenAI', 'Litigation Funding',
    'Tort Reform', 'Rate Adequacy', 'Reinsurance', 'Capacity Constraints',
    'Nuclear Verdicts', 'Assignment of Benefits', 'Parametric Insurance'
  ];
  const hasHighValueTrend = params.tags?.trends?.some(t =>
    highValueTrends.some(hvt => t.toLowerCase().includes(hvt.toLowerCase()))
  ) || false;
  const trendBoost = hasHighValueTrend ? 1.10 : 1.0;

  // Multi-LOB coverage boost (broader industry relevance)
  const lobCount = params.tags?.lob?.length || 0;
  const lobBoost = lobCount >= 3 ? 1.08 : (lobCount >= 2 ? 1.04 : 1.0);

  // DYNAMIC WEIGHT ADJUSTMENT: Adjust weights based on content age and type
  // Fresh breaking news: Higher recency weight (50%)
  // Older content: Higher impact weight (70%)
  // This ensures fresh news gets priority while older high-impact content still ranks well
  let recencyWeight = 0.35;
  let impactWeight = 0.65;

  if (ageDays < 1) {
    // Fresh content (< 24 hours): Prioritize recency
    recencyWeight = 0.50;
    impactWeight = 0.50;
  } else if (ageDays > 7) {
    // Older content (> 7 days): Prioritize impact
    recencyWeight = 0.25;
    impactWeight = 0.75;
  }

  // Calculate base score with dynamic weighting
  const baseScore = (recencyScore * recencyWeight) + (weightedImpact * impactWeight);

  // Apply all multipliers
  const smartScore = Math.min(100,
    baseScore *
    engagementBoost *
    riskPulseMultiplier *
    regulatoryBoost *
    catastropheBoost *
    trendBoost *
    lobBoost
  );

  return Math.round(smartScore * 10) / 10;
}

/**
 * Calculate dynamic score for an article at query time
 * This function is called when articles are fetched to ensure scores reflect current time
 *
 * @param article - Article with original scoring data
 * @param currentTime - Current timestamp (defaults to now)
 * @returns Updated score reflecting current recency and engagement
 */
export function calculateDynamicScore(
  article: {
    publishedAt?: string;
    impactScore?: number;
    impactBreakdown?: {
      market?: number;
      regulatory?: number;
      catastrophe?: number;
      technology?: number;
    };
    tags?: {
      regulations?: string[];
      perils?: string[];
      lob?: string[];
      trends?: string[];
    };
    regulatory?: boolean;
    riskPulse?: 'LOW' | 'MEDIUM' | 'HIGH';
    stormName?: string;
    engagementMetrics?: {
      clicks?: number;
      saves?: number;
      shares?: number;
      timeSpent?: number;
    };
  },
): number {
  // Ensure impactScore is provided, default to 50 if missing
  const impactScore = article.impactScore ?? 50;

  return calculateSmartScore({
    ...article,
    impactScore,
    // Force recalculation with current time
  });
}

/**
 * Hash URL for document ID
 */
export function hashUrl(u: string): string {
  return crypto.createHash("sha256").update(u).digest("hex").slice(0, 24);
}



=================================================================================
FILE: functions/tsconfig.json
=================================================================================

{
  "compilerOptions": {
    "module": "commonjs",
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "outDir": "lib",
    "sourceMap": true,
    "strict": true,
    "target": "es2017",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "downlevelIteration": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noFallthroughCasesInSwitch": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "types": [
      "node",
      "jest"
    ]
  },
  "compileOnSave": true,
  "include": [
    "src",
    "scripts"
  ],
  "exclude": [
    "node_modules",
    "lib"
  ]
}



=================================================================================
FILE: firebase.json
=================================================================================

{
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        ".git",
        "firebase-debug.log",
        "firebase-debug.*.log",
        "*.local"
      ],
      "predeploy": [
        "npm --prefix \"$RESOURCE_DIR\" run lint",
        "npm --prefix \"$RESOURCE_DIR\" run build"
      ]
    }
  ],
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "/askBrief",
        "function": "askBrief"
      }
    ]
  }
}



================================================================================
                              END OF CODE REVIEW
================================================================================
Generated for external code review
All code files from frontend (src/) and backend (functions/src/) included
================================================================================
